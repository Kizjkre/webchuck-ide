{
    "@array": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>cap</span>**() (deprecated) For historical/compatibilty reasons, .cap() is always equal to .size(); instead of using .cap(), it is recommended to explicitly use .size() or .capacity().",
            "int **<span style='color:#006AB1;'>capacity</span>**(int val) Ensure capacity of the array (number of addressable elements).",
            "int **<span style='color:#006AB1;'>capacity</span>**() Get current capacity of the array (number of addressable elements).",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear the contents of the array.",
            "int **<span style='color:#006AB1;'>erase</span>**(int position) Remove element at 'position' from the array (same as popOut(int)).",
            "int **<span style='color:#006AB1;'>erase</span>**(int begin, int end) Remove element(s) in the range [begin,end).",
            "int **<span style='color:#006AB1;'>erase</span>**(string key) (map only) Erase all elements with the specified key.",
            "void **<span style='color:#006AB1;'>getKeys</span>**(string[] keys) Return all keys found in associative array in keys.",
            "int **<span style='color:#006AB1;'>isInMap</span>**(string key) (map only) test if 'key' is in the map; (historical) this was renamed from .find() to avoid confusion with the vector part of array.",
            "void **<span style='color:#006AB1;'>popBack</span>**() Remove the last element of the array.",
            "void **<span style='color:#006AB1;'>popFront</span>**() Remove the first element of the array.",
            "void **<span style='color:#006AB1;'>popOut</span>**(int position) Remove the element at 'position' from the array (same as erase(int)).",
            "void **<span style='color:#006AB1;'>reset</span>**() Reset array size to 0, set capacity to (at least) 8.",
            "void **<span style='color:#006AB1;'>reverse</span>**() Reverses the array in-place.",
            "void **<span style='color:#006AB1;'>shuffle</span>**() Shuffle the contents of the array.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the number of elements in the array.",
            "int **<span style='color:#006AB1;'>size</span>**(int newSize) Set the size of the array. If the new size is less than the current size, elements will be deleted from the end; if the new size is larger than the current size, 0 or null elements will be added to the end.",
            "void **<span style='color:#006AB1;'>sort</span>**() Sort the contents of the array in ascending order.",
            "void **<span style='color:#006AB1;'>zero</span>**() Zero out the contents of the array; size is unchanged."
        ],
        "examples": [
            "Examples: \t [array_append.ck](https://chuck.stanford.edu/doc/examples/array/array_append.ck), [array_argument.ck](https://chuck.stanford.edu/doc/examples/array/array_argument.ck), [array_assign.ck](https://chuck.stanford.edu/doc/examples/array/array_assign.ck), [array_associative.ck](https://chuck.stanford.edu/doc/examples/array/array_associative.ck), [array_capacity.ck](https://chuck.stanford.edu/doc/examples/array/array_capacity.ck), [array_dynamic.ck](https://chuck.stanford.edu/doc/examples/array/array_dynamic.ck), [array_erase.ck](https://chuck.stanford.edu/doc/examples/array/array_erase.ck), [array_erase2.ck](https://chuck.stanford.edu/doc/examples/array/array_erase2.ck), [array_mdim.ck](https://chuck.stanford.edu/doc/examples/array/array_mdim.ck), [array_mmixed.ck](https://chuck.stanford.edu/doc/examples/array/array_mmixed.ck), [array_negative.ck](https://chuck.stanford.edu/doc/examples/array/array_negative.ck), [array_range.ck](https://chuck.stanford.edu/doc/examples/array/array_range.ck), [array_resize.ck](https://chuck.stanford.edu/doc/examples/array/array_resize.ck), [array_reverse.ck](https://chuck.stanford.edu/doc/examples/array/array_reverse.ck), [array_shuffle.ck](https://chuck.stanford.edu/doc/examples/array/array_shuffle.ck), [array_sort.ck](https://chuck.stanford.edu/doc/examples/array/array_sort.ck), [array_storage.ck](https://chuck.stanford.edu/doc/examples/array/array_storage.ck), [array_sub_assign.ck](https://chuck.stanford.edu/doc/examples/array/array_sub_assign.ck), [array_zero.ck](https://chuck.stanford.edu/doc/examples/array/array_zero.ck)"
        ],
        "description": "Storage construct for sequential data of the same type; can also be used as an associative map data structure; also can be used as a stack with << operator to append/push and popBack to pop.",
        "title": "**Array**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#@array)"
    },
    "ABSaturator": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>dcOffset</span>**(float arg) Constant linear offset applied to the signal. A small offset will introduce odd harmonics into the distoration spectrum, whereas a zero offset will have only even harmonics.",
            "float **<span style='color:#006AB1;'>dcOffset</span>**() Constant linear offset applied to the signal. A small offset will introduce odd harmonics into the distoration spectrum, whereas a zero offset will have only even harmonics.",
            "float **<span style='color:#006AB1;'>drive</span>**(float arg) Input gain into the distortion section, in decibels. Controls overall amount of distortion.",
            "float **<span style='color:#006AB1;'>drive</span>**() Input gain into the distortion section, in decibels. Controls overall amount of distortion."
        ],
        "examples": [
            "Examples: \t [ABSaturator.ck](https://chuck.stanford.edu/doc/examples/effects/ABSaturator.ck)"
        ],
        "description": "Soft clip saturating distortion, based on examples from Abel/Berners' Music 424 course at Stanford.",
        "title": "**Absolute Value Saturator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#ABSaturator)"
    },
    "ADSR": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>attackRate</span>**(float value) Set attack rate.",
            "float **<span style='color:#006AB1;'>attackRate</span>**() Get attack rate.",
            "dur **<span style='color:#006AB1;'>attackTime</span>**(dur value) Set attack time.",
            "dur **<span style='color:#006AB1;'>attackTime</span>**() Get attack time.",
            "float **<span style='color:#006AB1;'>decayRate</span>**(float value) Set decay rate.",
            "float **<span style='color:#006AB1;'>decayRate</span>**() Get decay rate.",
            "dur **<span style='color:#006AB1;'>decayTime</span>**(dur value) Set decay time.",
            "dur **<span style='color:#006AB1;'>decayTime</span>**() Get decay time.",
            "float **<span style='color:#006AB1;'>releaseRate</span>**(float value) Set release rate.",
            "float **<span style='color:#006AB1;'>releaseRate</span>**() Get release rate.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**(dur value) Set release time.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**() Get release time.",
            "void **<span style='color:#006AB1;'>set</span>**(float attackTime, float decayTime, float sustainLevel, float releaseTime) Set attack, decay, sustain, and release all at once (in seconds).",
            "void **<span style='color:#006AB1;'>set</span>**(dur attackDuration, dur decayDuration, float sustainLevel, dur releaseDuration) Set attack, decay, sustain, and release all at once.",
            "int **<span style='color:#006AB1;'>state</span>**() Get state; attack=0, decay=1, sustain=2, release=3, done=4.",
            "float **<span style='color:#006AB1;'>sustainLevel</span>**(float value) Set sustain level.",
            "float **<span style='color:#006AB1;'>sustainLevel</span>**() Get sustain level.",
            "static member variables int ATTACK",
            "See **<span style='color:#006AB1;'>state</span>**() function. Denotes that the envelope is in the attack stage. int DECAY",
            "See **<span style='color:#006AB1;'>state</span>**() function. Denotes that the envelope is in the decay stage. int DONE",
            "See **<span style='color:#006AB1;'>state</span>**() function. Denotes that the envelope has completed all stages. int RELEASE",
            "See **<span style='color:#006AB1;'>state</span>**() function. Denotes that the envelope is in the release stage. int SUSTAIN",
            "See **<span style='color:#006AB1;'>state</span>**() function. Denotes that the envelope is in the sustain stage. [ top ]"
        ],
        "examples": [
            "Examples: \t [adsr.ck](https://chuck.stanford.edu/doc/examples/basic/adsr.ck), [blit2.ck](https://chuck.stanford.edu/doc/examples/basic/blit2.ck)"
        ],
        "description": "This Envelope subclass implements a traditional ADSR (Attack, Decay, Sustain, Release) envelope. It responds to simple `keyOn` and `keyOff` messages, keeping track of its state. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**ADSR Envelope**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#ADSR)"
    },
    "AI": {
        "functions": [],
        "examples": [],
        "description": "AI class library.",
        "title": "**AI Class Library**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#AI)"
    },
    "AmbPan3": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>azimuth</span>**(float arg) Set horizontal angle of point source.",
            "float **<span style='color:#006AB1;'>azimuth</span>**() Get horizontal angle of point source.",
            "void **<span style='color:#006AB1;'>channelMap</span>**(int[] arg) Set the mapping of channels for the amibsonic system.",
            "float **<span style='color:#006AB1;'>elevation</span>**(float arg) Set vertical angle of point source.",
            "float **<span style='color:#006AB1;'>elevation</span>**() Get vertical angle of point source."
        ],
        "examples": [
            "Examples: \t [AmbPan3-CCRMA.ck](https://chuck.stanford.edu/doc/examples/spatial/AmbPan3-CCRMA.ck)"
        ],
        "description": "Third-order ambisonics panner (https://en.wikipedia.org/wiki/Ambisonics)",
        "title": "**3D Ambisonic Panner**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#AmbPan3)"
    },
    "AutoCorr": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>normalize</span>**(int flag) No description available",
            "int **<span style='color:#006AB1;'>normalize</span>**() No description available",
            "float[] **<span style='color:#006AB1;'>compute</span>**(float[] input, int normalize, float[] output) No description available"
        ],
        "examples": [
            "Examples: \t [autocorr.ck](https://chuck.stanford.edu/doc/examples/analysis/autocorr.ck)"
        ],
        "description": "A unit analyzer that computes auto-correlation of the incoming analysis frame.",
        "title": "**Autocorrelation**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#AutoCorr)"
    },
    "BLT": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Set frequency.",
            "int **<span style='color:#006AB1;'>harmonics</span>**(int value) Set harmonics.",
            "int **<span style='color:#006AB1;'>harmonics</span>**() Get harmonics.",
            "float **<span style='color:#006AB1;'>phase</span>**(float value) Set phase.",
            "float **<span style='color:#006AB1;'>phase</span>**() Get phase."
        ],
        "examples": [],
        "description": "Super-class for band-limited oscillators.",
        "title": "**Band-Limited Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BLT)"
    },
    "BPF": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter center frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Set filter center frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Get filter frequency and resonance at the same time."
        ],
        "examples": [
            "Examples: \t [bpf.ck](https://chuck.stanford.edu/doc/examples/filter/bpf.ck)"
        ],
        "description": "A bandpass filter (2nd order Butterworth).",
        "title": "**Band-Pass Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#BPF)"
    },
    "BRF": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter center frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter center frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Set filter frequency and resonance at the same time."
        ],
        "examples": [
            "Examples: \t [brf.ck](https://chuck.stanford.edu/doc/examples/filter/brf.ck)"
        ],
        "description": "A band-reject filter (2nd order Butterworth).",
        "title": "**Band-Reject Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#BRF)"
    },
    "BandedWG": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>bowMotion</span>**(float value) Set bow motion, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowMotion</span>**() Get bow motion, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowPressure</span>**(float value) Set bow pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowPressure</span>**() Get bow pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowRate</span>**(float value) Set bowing rate (seconds).",
            "float **<span style='color:#006AB1;'>bowRate</span>**() Get bowing rate (seconds).",
            "float **<span style='color:#006AB1;'>integrationConstant</span>**(float value) Set integration constant, vibrato frequency.",
            "float **<span style='color:#006AB1;'>integrationConstant</span>**() Get integration constant, vibrato frequency.",
            "float **<span style='color:#006AB1;'>modesGain</span>**(float value) Set amplitude for modes.",
            "float **<span style='color:#006AB1;'>modesGain</span>**() Get amplitude for modes.",
            "float **<span style='color:#006AB1;'>pluck</span>**(float value) Pluck instrument, [0.0-1.0].",
            "int **<span style='color:#006AB1;'>preset</span>**(int value) Set instrument preset, (0-3, see above).",
            "int **<span style='color:#006AB1;'>preset</span>**() Get instrument preset, (0-3, see above).",
            "float **<span style='color:#006AB1;'>startBowing</span>**(float value) Start bowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBowing</span>**(float value) Stop bowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>strikePosition</span>**(float value) Set strike position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>strikePosition</span>**() Get strike position, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [band-o-matic.ck](https://chuck.stanford.edu/doc/examples/stk/band-o-matic.ck), [bandedwg.ck](https://chuck.stanford.edu/doc/examples/stk/bandedwg.ck), [bandedwg2.ck](https://chuck.stanford.edu/doc/examples/stk/bandedwg2.ck)"
        ],
        "description": "This class uses banded waveguide techniques to model a variety of sounds, including bowed bars, glasses, and bowls. For more information, see Essl, G. and Cook, P. 'Banded Waveguides: Towards Physical Modelling of Bar Percussion Instruments', Proceedings of the 1999 International Computer Music Conference. Control Change Numbers: - Bow Pressure = 2 - Bow Motion = 4 - Strike Position = 8 (not implemented) - Vibrato Frequency = 11 - Gain = 1 - Bow Velocity = 128 - Instrument Presets = 16 - Uniform Bar = 0 - Tuned Bar = 1 - Glass Harmonica = 2 - Tibetan Bowl = 3 by Georg Essl, 1999 - 2002. Modified for Stk 4.0 by Gary Scavone.",
        "title": "**Banded Waveguide**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BandedWG)"
    },
    "BeeThree": {
        "functions": [],
        "examples": [
            "Examples: \t [keyboard-organ.ck](https://chuck.stanford.edu/doc/examples/hid/keyboard-organ.ck)"
        ],
        "description": "STK Hammond-oid organ FM synthesis instrument. This class implements a simple 4 operator topology, also referred to as algorithm 8 of the TX81Z. Algorithm 8 is : 1 --. 2 -\\| +-> Out 3 -/| 4 --. Control Change Numbers: - Operator 4 (feedback) Gain = 2 (.controlOne) - Operator 3 Gain = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Organ**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BeeThree)"
    },
    "BiQuad": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>a0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>a1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>a2</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a2</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b2</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b2</span>**() Get filter coefficient.",
            "int **<span style='color:#006AB1;'>eqzs</span>**(int value) Enable equal-gain zeroes.",
            "int **<span style='color:#006AB1;'>norm</span>**(int value) Toggle normalization.",
            "int **<span style='color:#006AB1;'>norm</span>**() Get normalization setting.",
            "float **<span style='color:#006AB1;'>pfreq</span>**(float freq) Set resonance frequency (poles).",
            "float **<span style='color:#006AB1;'>pfreq</span>**() Get resonance frequency (poles).",
            "float **<span style='color:#006AB1;'>prad</span>**(float value) Set Pole radius (values greater than 1 will be unstable).",
            "float **<span style='color:#006AB1;'>prad</span>**() Get pole radius.",
            "float **<span style='color:#006AB1;'>pregain</span>**(float level) Set pregain.",
            "float **<span style='color:#006AB1;'>pregain</span>**() Get pregain.",
            "float **<span style='color:#006AB1;'>zfreq</span>**(float freq) Set notch frequency.",
            "float **<span style='color:#006AB1;'>zfreq</span>**() Get notch frequency.",
            "float **<span style='color:#006AB1;'>zrad</span>**(float value) Set zero radius.",
            "float **<span style='color:#006AB1;'>zrad</span>**() Get zero radius."
        ],
        "examples": [
            "Examples: \t [wind.ck](https://chuck.stanford.edu/doc/examples/basic/wind.ck), [moe.ck](https://chuck.stanford.edu/doc/examples/basic/moe.ck)"
        ],
        "description": "A BiQuad (two-pole, two-zero) filter section from STK. A method is provided for creating a resonance in the frequency response while maintaining a constant filter gain.",
        "title": "**BiQuadratic Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#BiQuad)"
    },
    "Bitcrusher": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bits</span>**(int arg) Number of bits to reduce signal to [1-32].",
            "int **<span style='color:#006AB1;'>bits</span>**() Number of bits to reduce signal to [1-32].",
            "int **<span style='color:#006AB1;'>downsample</span>**(int arg) Factor by which to downsample signal by decimation [≥1].",
            "int **<span style='color:#006AB1;'>downsample</span>**() Factor by which to downsample signal by decimation [≥1].",
            "int **<span style='color:#006AB1;'>downsampleFactor</span>**(int arg) Factor by which to downsample signal by decimation [≥1].",
            "int **<span style='color:#006AB1;'>downsampleFactor</span>**() Factor by which to downsample signal by decimation [≥1]."
        ],
        "examples": [
            "Examples: \t [Bitcrusher.ck](https://chuck.stanford.edu/doc/examples/effects/Bitcrusher.ck)"
        ],
        "description": "Applies aliased downsampling and sample-width reduction to create a variety of distortion effects.",
        "title": "**Bitcrusher Effect**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Bitcrusher)"
    },
    "Blit": {
        "functions": [],
        "examples": [
            "Examples: \t [blit.ck](https://chuck.stanford.edu/doc/examples/basic/blit.ck), [blit2.ck](https://chuck.stanford.edu/doc/examples/basic/blit2.ck), [foo2.ck](https://chuck.stanford.edu/doc/examples/basic/foo2.ck)"
        ],
        "description": "This class generates a band-limited impulse train using a closed-form algorithm reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The user can specify both the fundamental frequency of the impulse train and the number of harmonics contained in the resulting signal. The signal is normalized so that the peak value is +/-1.0. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Original code by Robin Davies, 2005. Revisions by Gary Scavone for STK, 2005.",
        "title": "**Band-Limited Impulse Train**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Blit)"
    },
    "BlitSaw": {
        "functions": [],
        "examples": [],
        "description": "This class generates a band-limited sawtooth waveform using a closed-form algorithm reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The user can specify both the fundamental frequency of the sawtooth and the number of harmonics contained in the resulting signal. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Based on initial code of Robin Davies, 2005. Modified algorithm code by Gary Scavone, 2005.",
        "title": "**Band-Limited Sawtooth Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BlitSaw)"
    },
    "BlitSquare": {
        "functions": [],
        "examples": [],
        "description": "This class generates a band-limited square wave signal. It is derived in part from the approach reported by Stilson and Smith in 'Alias-Free Digital Synthesis of Classic Analog Waveforms', 1996. The algorithm implemented in this class uses a SincM function with an even M value to achieve a bipolar bandlimited impulse train. This signal is then integrated to achieve a square waveform. The integration process has an associated DC offset but that is subtracted off the output signal. The user can specify both the fundamental frequency of the waveform and the number of harmonics contained in the resulting signal. If `nHarmonics` is 0, then the signal will contain all harmonics up to half the sample rate. Note, however, that this setting may produce aliasing in the signal when the frequency is changing (no automatic modification of the number of harmonics is performed by the `setFrequency()` function). Based on initial code of Robin Davies, 2005. Modified algorithm code by Gary Scavone, 2005.",
        "title": "**Band-Limited Square Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BlitSquare)"
    },
    "BlowBotl": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>noiseGain</span>**(float value) Set noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>noiseGain</span>**() Get noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack.",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack.",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**(float value) Set volume, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**() Get volume, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [blowbotl.ck](https://chuck.stanford.edu/doc/examples/stk/blowbotl.ck), [blowbotl2.ck](https://chuck.stanford.edu/doc/examples/stk/blowbotl2.ck)"
        ],
        "description": "This class implements a helmholtz resonator (biquad filter) with a polynomial jet excitation (a la Cook). Control Change Numbers: - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Blow Bottle**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BlowBotl)"
    },
    "BlowHole": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>noiseGain</span>**(float value) Set noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>noiseGain</span>**() Get noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**(float value) Set pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**() Get pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>reed</span>**(float value) Set reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>reed</span>**() Get reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>tonehole</span>**(float value) Set tonehole size, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>tonehole</span>**() Get tonehole size, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vent</span>**(float value) Set vent frequency, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vent</span>**() Get vent frequency, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [blowhole.ck](https://chuck.stanford.edu/doc/examples/stk/blowhole.ck), [blowhole2.ck](https://chuck.stanford.edu/doc/examples/stk/blowhole2.ck)"
        ],
        "description": "This class is based on the clarinet model, with the addition of a two-port register hole and a three-port dynamic tonehole implementation, as discussed by Scavone and Cook (1998). In this implementation, the distances between the reed/register hole and tonehole/bell are fixed. As a result, both the tonehole and register hole will have variable influence on the playing frequency, which is dependent on the length of the air column. In addition, the highest playing freqeuency is limited by these fixed lengths. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Noise Gain = 4 - Tonehole State = 11 - Register State = 1 - Breath Pressure = 128 Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Blow Hole**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#BlowHole)"
    },
    "Bowed": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>bowPosition</span>**(float value) Set bow position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowPosition</span>**() Get bow position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowPressure</span>**(float value) Set bow pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>bowPressure</span>**() Get bow pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>startBowing</span>**(float value) Start bowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBowing</span>**(float value) Stop bowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**(float value) Set volume, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**() Get volume, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [bowed.ck](https://chuck.stanford.edu/doc/examples/stk/bowed.ck), [bowed2.ck](https://chuck.stanford.edu/doc/examples/stk/bowed2.ck)"
        ],
        "description": "This class implements a bowed string model, a la Smith (1986), after McIntyre, Schumacher, Woodhouse (1983). This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Bow Pressure = 2 - Bow Position = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Bowed String**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Bowed)"
    },
    "Brass": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>lip</span>**(float value) Set lip tension, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>lip</span>**() Get lip tension, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>slide</span>**(float value) Set slide length, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>slide</span>**() Get slide length, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**(float value) Set volume, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**() Get volume, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [brass.ck](https://chuck.stanford.edu/doc/examples/stk/brass.ck), [brass2.ck](https://chuck.stanford.edu/doc/examples/stk/brass2.ck)"
        ],
        "description": "This class implements a simple brass instrument waveguide model, a la Cook (TBone, HosePlayer). This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Lip Tension = 2 - Slide Length = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Volume = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Brass**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Brass)"
    },
    "CKDoc": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>addGroup</span>**(Type[] types, string name, string shortName, string description) Add a group of types to be documented, including group 'name', a 'shortName' to be used for any files, and a group 'description'.",
            "void **<span style='color:#006AB1;'>addGroup</span>**(string[] typeNames, string name, string shortName, string description) Add a group of types (by type name) to be documented, including group 'name', a 'shortName' to be used for any files, and a group 'description'.",
            "void **<span style='color:#006AB1;'>addGroupExternal</span>**(string name, string URL, string description, string longDesc) Add a group documention at an external URL location.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear all added groups.",
            "string **<span style='color:#006AB1;'>examplesRoot</span>**(string path) Set the examples directory root path; returns what was set.",
            "string **<span style='color:#006AB1;'>examplesRoot</span>**() Get the current examples directory root path.",
            "string **<span style='color:#006AB1;'>genCSS</span>**() Generate CSS; return as string.",
            "void **<span style='color:#006AB1;'>genGroups</span>**(string[] results) Generate documentation for all added groups, return each in a separate entry.",
            "string **<span style='color:#006AB1;'>genIndex</span>**(string indexTitle) Generate top-level index; return as string.",
            "string **<span style='color:#006AB1;'>genType</span>**(Type type) Generate documentation for a single Type.",
            "string **<span style='color:#006AB1;'>genType</span>**(string typeName) Generate documentation for a single Type (by name).",
            "int **<span style='color:#006AB1;'>numGroups</span>**() Get the number of groups added.",
            "int **<span style='color:#006AB1;'>outputFormat</span>**(int which) Set which output format to use; see CKDoc.HTML, CKDoc.TEXT, CKDoc.MARKDOWN, CKDoc.JSON.",
            "int **<span style='color:#006AB1;'>outputFormat</span>**() Set which output format is selected; see CKDoc.HTML, CKDoc.TEXT, CKDoc.MARKDOWN, CKDoc.JSON.",
            "int **<span style='color:#006AB1;'>outputToDir</span>**(string path, string indexTitle) Generate everything as files into the output directory."
        ],
        "examples": [],
        "description": "A ChucK documentation generator. Based on Spencer Salazar's ckdoc utility.",
        "title": "**ChucK Documentation Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/utils.html#CKDoc)"
    },
    "CNoise": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>fprob</span>**(float fprob) Probability [0-1] used for calculating XOR noise.",
            "string **<span style='color:#006AB1;'>mode</span>**(string mode) Noise synthesis mode. Supported modes are \"white\", \"pink\", \"flip\", and \"xor\"."
        ],
        "examples": [],
        "description": "A noise generator with multiple noise synthesis modes.",
        "title": "**Colored Noise Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#CNoise)"
    },
    "Centroid": {
        "description": "A unit analyzer that computes the spectral centroid from a magnitude spectrum (either from incoming UAna or manually given), and outputs a single number.",
        "examples": [
            "Examples: \t [centroid.ck](https://chuck.stanford.edu/doc/examples/ai/features/centroid.ck), [feature-extract.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/feature-extract.ck), [genre-classify.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/genre-classify.ck)"
        ],
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input) Manually computes the centroid from a float array."
        ],
        "title": "**Spectral Centroid Analyzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Centroid)"
    },
    "Chorus": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>baseDelay</span>**(dur value) Set base delay.",
            "dur **<span style='color:#006AB1;'>baseDelay</span>**() Get base delay.",
            "void **<span style='color:#006AB1;'>max</span>**(dur baseDelay, float modDepth) No description available",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set effect mix.",
            "float **<span style='color:#006AB1;'>mix</span>**() Get effect mix.",
            "float **<span style='color:#006AB1;'>modDepth</span>**(float value) Set modulation depth.",
            "float **<span style='color:#006AB1;'>modDepth</span>**() Get modulation depth.",
            "float **<span style='color:#006AB1;'>modFreq</span>**(float value) Set modulation frequency.",
            "float **<span style='color:#006AB1;'>modFreq</span>**() Get modulation frequency."
        ],
        "examples": [
            "Examples: \t [chorus.ck](https://chuck.stanford.edu/doc/examples/effects/chorus.ck)"
        ],
        "description": "A chorus effect. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Chorus Effect**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Chorus)"
    },
    "Chroma": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input, float[] output) Manually computes the Chroma of the input (an FFT spectrum), and stores the results in the output array (Chroma coefficients).",
            "int **<span style='color:#006AB1;'>highOctNum</span>**(int high_oct_num) Set the highest octave number for Chroma analysis.",
            "int **<span style='color:#006AB1;'>highOctNum</span>**() Get the highest octave number for Chroma analysis.",
            "int **<span style='color:#006AB1;'>lowOctNum</span>**(int low_oct_num) Set the lowest octave number for Chroma analysis.",
            "int **<span style='color:#006AB1;'>lowOctNum</span>**() Get the lowest octave number for Chroma analysis.",
            "float **<span style='color:#006AB1;'>sampleRate</span>**(float sample_rate) Set the sample rate for Chroma analysis.",
            "float **<span style='color:#006AB1;'>sampleRate</span>**() Get the sample rate for Chroma analysis."
        ],
        "examples": [
            "Examples: \t [chroma.ck](https://chuck.stanford.edu/doc/examples/ai/features/chroma.ck)"
        ],
        "description": "A unit analyzer that computes the Chroma features from a magnitude spectrum (either from an incoming UAna, or given manually), and outputs a vector of coefficients.",
        "title": "**Chroma Feature Analyzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Chroma)"
    },
    "Chugen": {
        "functions": [],
        "examples": [
            "Examples: \t [chugen.ck](https://chuck.stanford.edu/doc/examples/extend/chugen.ck)"
        ],
        "description": "Base class for user-created in-language unit generators.",
        "title": "**User-Created UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Chugen)"
    },
    "Chugraph": {
        "functions": [],
        "examples": [
            "Examples: \t [chugraph.ck](https://chuck.stanford.edu/doc/examples/extend/chugraph.ck), [dinky.ck](https://chuck.stanford.edu/doc/examples/class/dinky.ck), [try.ck](https://chuck.stanford.edu/doc/examples/class/try.ck), [ks-chord.ck](https://chuck.stanford.edu/doc/examples/deep/ks-chord.ck)"
        ],
        "description": "Base class for subgraph-based user-created in-language unit generators.",
        "title": "**Subgraph-Based UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Chugraph)"
    },
    "Clarinet": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>noiseGain</span>**(float value) Set noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>noiseGain</span>**() Get noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**(float value) Set pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**() Get pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>reed</span>**(float value) Set reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>reed</span>**() Get reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [clarinet.ck](https://chuck.stanford.edu/doc/examples/stk/clarinet.ck), [clarinet2.ck](https://chuck.stanford.edu/doc/examples/stk/clarinet2.ck), [polyfony2.ck](https://chuck.stanford.edu/doc/examples/midi/polyfony2.ck)"
        ],
        "description": "This class implements a simple clarinet physical model, as discussed by Smith (1986), McIntyre, Schumacher, Woodhouse (1983), and others. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Clarinet**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Clarinet)"
    },
    "ConsoleInput": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>can_wait</span>**() (internal) used by virtual machine for synthronization.",
            "string **<span style='color:#006AB1;'>getLine</span>**() Return the next line of input as a string.",
            "int **<span style='color:#006AB1;'>more</span>**() Return whether there is more input to read.",
            "Event **<span style='color:#006AB1;'>prompt</span>**() Return an Event to wait on.",
            "Event **<span style='color:#006AB1;'>prompt</span>**(string what) Print a prompt text and return an Event to wait on."
        ],
        "examples": [
            "Examples: \t [readline.ck](https://chuck.stanford.edu/doc/examples/string/readline.ck), [word2vec-prompt.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/word2vec-prompt.ck), [poem-ungenerate.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-ungenerate.ck)"
        ],
        "description": "(Terminal only) a utility for prompting user input on the command line.",
        "title": "**Console Input Utility**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/utils.html#ConsoleInput)"
    },
    "CurveTable": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [GenX-CurveTable-test.ck](https://chuck.stanford.edu/doc/examples/special/GenX-CurveTable-test.ck)"
        ],
        "description": "Constructs a wavetable composed of segments of variable times, values, and curvatures. Coefficients are specified as a single linear array of triplets of [ time, value, curvature ] followed by a final duple of [ time, value ] to specify the final value of the table. time values are expressed in unitless, ascending values. For curvature equal to 0, the segment is a line; for curvature less than 0, the segment is a convex curve; for curvature greater than 0, the segment is a concave curve.",
        "title": "**Curve Table**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#CurveTable)"
    },
    "DCT": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the DCT size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the DCT size.",
            "void **<span style='color:#006AB1;'>spectrum</span>**(float[] buffer) Manually retrieve the results of a transform.",
            "void **<span style='color:#006AB1;'>transform</span>**(float[] from) Manually take DCT (as opposed to using .upchuck() / upchuck operator).",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [
            "Examples: \t [dct.ck](https://chuck.stanford.edu/doc/examples/analysis/dct.ck)"
        ],
        "description": "Computes the Discrete Cosine Transform on incoming audio samples, and outputs the result via its UAnaBlob as real values in the D.C. spectrum. A buffering mechanism maintains the previous DCT size # of samples, allowing DCT to be taken at any point in time, on demand (via .upchuck() or by upchucking a downstream UAna; see UAna documentation). The window size (along with an arbitrary window shape) is controlled via the .window method. The hop size is complete dynamic, and is throttled by how time is advanced.",
        "title": "**Discrete Cosine Transform**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#DCT)"
    },
    "Delay": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear delay line.",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur value) Set length of delay.",
            "dur **<span style='color:#006AB1;'>delay</span>**() Get length of delay.",
            "dur **<span style='color:#006AB1;'>max</span>**(dur value) Set max delay (buffer size).",
            "dur **<span style='color:#006AB1;'>max</span>**() Get max delay (buffer size)."
        ],
        "examples": [
            "Examples: \t [comb.ck](https://chuck.stanford.edu/doc/examples/basic/comb.ck), [plu.ck](https://chuck.stanford.edu/doc/examples/deep/plu.ck)"
        ],
        "description": "A non-interpolating digital delay-line. A fixed maximum length of 4095 and a delay of zero is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. A non-interpolating delay line is typically used in fixed delay-length applications, such as for reverberation. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Digital Delay Line**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Delay)"
    },
    "DelayA": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear delay line.",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur value) Set length of delay.",
            "dur **<span style='color:#006AB1;'>delay</span>**() Get length of delay.",
            "dur **<span style='color:#006AB1;'>max</span>**(dur value) Set max delay (buffer size).",
            "dur **<span style='color:#006AB1;'>max</span>**() Get max delay (buffer size)."
        ],
        "examples": [
            "Examples: \t [ks-chord.ck](https://chuck.stanford.edu/doc/examples/deep/ks-chord.ck)"
        ],
        "description": "A fractional-length digital delay-line using a first-order allpass filter. A fixed maximum length of 4095 and a delay of 0.5 is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. An allpass filter has unity magnitude gain but variable phase delay properties, making it useful in achieving fractional delays without affecting a signal's frequency magnitude response. In order to achieve a maximally flat phase delay response, the minimum delay possible in this implementation is limited to a value of 0.5. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**All-Pass Interpolating Delay Line**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#DelayA)"
    },
    "DelayL": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear delay line.",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur value) Set length of delay.",
            "dur **<span style='color:#006AB1;'>delay</span>**() Get length of delay.",
            "dur **<span style='color:#006AB1;'>max</span>**(dur value) Set max delay (buffer size).",
            "dur **<span style='color:#006AB1;'>max</span>**() Get max delay (buffer size)."
        ],
        "examples": [
            "Examples: \t [delay.ck](https://chuck.stanford.edu/doc/examples/basic/delay.ck), [i-robot.ck](https://chuck.stanford.edu/doc/examples/basic/i-robot.ck), [we-robot.ck](https://chuck.stanford.edu/doc/examples/multi/we-robot.ck), [xcorr.ck](https://chuck.stanford.edu/doc/examples/analysis/xcorr.ck), [poem-i-feel.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-i-feel.ck)"
        ],
        "description": "A fractional-length digital delay-line using first-order linear interpolation. A fixed maximum length of 4095 and a delay of zero is set using the default constructor. Alternatively, the delay and maximum length can be set during instantiation with an overloaded constructor. Linear interpolation is an efficient technique for achieving fractional delay lengths, though it does introduce high-frequency signal attenuation to varying degrees depending on the fractional delay setting. The use of higher order Lagrange interpolators can typically improve (minimize) this attenuation characteristic. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Linear Interpolating Delay Line**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#DelayL)"
    },
    "Dyno": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>attackTime</span>**(dur aTime) Set duration for the envelope to move linearly from current value to the absolute value of the signal's amplitude.",
            "dur **<span style='color:#006AB1;'>attackTime</span>**() Get duration for the envelope to move linearly from current value to the absolute value of the signal's amplitude.",
            "void **<span style='color:#006AB1;'>compress</span>**() Set parameters to default compressor values: slopeAbove = 0.5, slopeBelow = 1.0, thresh = 0.5, attackTime = 5 ms, releaseTime = 500 ms, externalSideInput = 0 (false)",
            "void **<span style='color:#006AB1;'>duck</span>**() Set parameters to default ducker values: slopeAbove = 0.5, slopeBelow = 1.0, thresh = 0.5, attackTime = 10 ms, releaseTime = 1000 ms, externalSideInput = 1 (true)",
            "void **<span style='color:#006AB1;'>expand</span>**() Set parameters to default expander values: slopeAbove = 2.0, slopeBelow = 1.0, thresh = 0.5, attackTime = 20 ms, releaseTime = 400 ms, externalSideInput = 0 (false)",
            "int **<span style='color:#006AB1;'>externalSideInput</span>**(int externalSideInput) Set to true to cue the amplitude envelope off sideInput instead of the input signal. Note that this means you will need to manually set sideInput every so often.",
            "int **<span style='color:#006AB1;'>externalSideInput</span>**() Get externalSideInput state. If set to true, the amplitude envelope will be cued off sideInput instead of the input signal. Note that this means you will need to manually set sideInput every so often.",
            "void **<span style='color:#006AB1;'>gate</span>**() Set parameters to default noise gate values: slopeAbove = 1.0, slopeBelow = 1.0E08, thresh = 0.1, attackTime = 11 ms, releaseTime = 100 ms, externalSideInput = 0 (false)",
            "void **<span style='color:#006AB1;'>limit</span>**() Set parameters to default limiter values: slopeAbove = 0.1, slopeBelow = 1.0, thresh = 0.5, attackTime = 5 ms, releaseTime = 300 ms, externalSideInput = 0 (false)",
            "float **<span style='color:#006AB1;'>ratio</span>**(float ratio) An alternate way of setting slopeAbove and slopeBelow; sets slopeBelow to 1.0 and slopeAbove to 1.0 / ratio.",
            "float **<span style='color:#006AB1;'>ratio</span>**() Get the ratio set by .ratio(float); slopeBelow to 1.0 and slopeAbove to 1.0 / ratio.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**(dur rTime) Set duration for the envelope to decay down to around 1/10 of its current amplitude, if not brought back up by the signal.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**() Get duration for the envelope to decay down to around 1/10 of its current amplitude, if not brought back up by the signal.",
            "float **<span style='color:#006AB1;'>sideInput</span>**(float sideInput) If externalSideInput is set to true, replace the signal being processed as the input to the amplitude envelope.",
            "float **<span style='color:#006AB1;'>sideInput</span>**() If externalSideInput is set to true, replaces the signal being processed as the input to the amplitude envelope.",
            "float **<span style='color:#006AB1;'>slopeAbove</span>**(float slopeAbove) Set the slope of the output gain vs the input envelope's level when the envelope is above thresh.",
            "float **<span style='color:#006AB1;'>slopeAbove</span>**() Get the slope of the output gain vs the input envelope's level when the envelope is above thresh.",
            "float **<span style='color:#006AB1;'>slopeBelow</span>**(float slopeBelow) Set the slope of the output gain vs the input envelope's level when the envelope is below thresh.",
            "float **<span style='color:#006AB1;'>slopeBelow</span>**() Get the slope of the output gain vs the input envelope's level when the envelope is below thresh.",
            "float **<span style='color:#006AB1;'>thresh</span>**(float thresh) Set threshold, above which to stop using slopeBelow and start using slopeAbove to determine output gain vs input gain.",
            "float **<span style='color:#006AB1;'>thresh</span>**() Get threshold, above which to stop using slopeBelow and start using slopeAbove to determine output gain vs input gain."
        ],
        "examples": [
            "Examples: \t [Dyno-compress.ck](https://chuck.stanford.edu/doc/examples/special/Dyno-compress.ck), [Dyno-duck.ck](https://chuck.stanford.edu/doc/examples/special/Dyno-duck.ck), [Dyno-limit.ck](https://chuck.stanford.edu/doc/examples/special/Dyno-limit.ck)"
        ],
        "description": "A dynamics processor. Includes presets for limiter, compressor, expander, noise gate, and ducker.",
        "title": "**Dynamics Processor**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Dyno)"
    },
    "Echo": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur value) Set length of echo.",
            "dur **<span style='color:#006AB1;'>delay</span>**() Get length of echo.",
            "dur **<span style='color:#006AB1;'>max</span>**(dur value) Set max delay (buffer size).",
            "dur **<span style='color:#006AB1;'>max</span>**() Get max delay (buffer size).",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set mix level (wet/dry).",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix level (wet/dry)."
        ],
        "examples": [
            "Examples: \t [echo.ck](https://chuck.stanford.edu/doc/examples/basic/echo.ck), [rhodey.ck](https://chuck.stanford.edu/doc/examples/stk/rhodey.ck), [wurley2.ck](https://chuck.stanford.edu/doc/examples/stk/wurley2.ck)"
        ],
        "description": "An echo effect. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Echo Effect**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Echo)"
    },
    "Elliptic": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>atten</span>**(float arg) Set filter attenuation in dB. Default 90.0.",
            "float **<span style='color:#006AB1;'>atten</span>**() Get filter attenuation in dB.",
            "void **<span style='color:#006AB1;'>bpf</span>**(float stop, float hip, float lop) Create a band-pass filter.",
            "int **<span style='color:#006AB1;'>bypass</span>**(int arg) Set switch bypass. 1 is on, 0 is off. Default 0.",
            "int **<span style='color:#006AB1;'>bypass</span>**() Get switch bypass. 1 is on, 0 is off.",
            "void **<span style='color:#006AB1;'>hpf</span>**(float stop, float pass) Create a high-pass filter.",
            "void **<span style='color:#006AB1;'>lpf</span>**(float stop, float pass) Create a low-pass filter.",
            "float **<span style='color:#006AB1;'>ripple</span>**(float arg) Set filter ripple in dB. Default 0.2.",
            "float **<span style='color:#006AB1;'>ripple</span>**() Get filter ripple in dB."
        ],
        "examples": [
            "Examples: \t [Elliptic-help.ck](https://chuck.stanford.edu/doc/examples/filter/Elliptic-help.ck)"
        ],
        "description": "Elliptic implements cascaded IIR filters and a built-in elliptical filter design. It is capable of low-pass, high-pass, or bandpass filtering with very steep slopes. The atten determines how much of the signal is attenuated outside the passband. Elliptic filters come with a trade-off for their steep slopes: they have a certain amount of ripple outside the passbands. A very small ripple (0.1 or 0.2 dB) produces very little ringing, whereas a large ripple (eg. 20 dB) produces a very strong harmonic ring. The filter design algorithm sometimes can't fulfill the design criteria -- a particular combination of cutoff frequencies, ripple, and attenuation. If that happens, the user is warned that the filter is not initialized, and the filter is bypassed. This may happen, for instance, if you ask for a very steep attenuation with very low ripple.",
        "title": "**Elliptic Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Elliptic)"
    },
    "Envelope": {
        "description": "This class implements a simple envelope generator which is capable of ramping to a target value by a specified rate. It also responds to simple `keyOn` and `keyOff` messages, ramping to 1.0 on `keyOn` and to 0.0 on `keyOff`. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "examples": [
            "Examples: \t [envelope.ck](https://chuck.stanford.edu/doc/examples/basic/envelope.ck), [chirp2.ck](https://chuck.stanford.edu/doc/examples/basic/chirp2.ck), [say-chu.ck](https://chuck.stanford.edu/doc/examples/deep/say-chu.ck)"
        ],
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur value) Set duration to reach target.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get duration to reach target.",
            "int **<span style='color:#006AB1;'>keyOff</span>**() Get keyOff state.",
            "int **<span style='color:#006AB1;'>keyOff</span>**(int value) Ramp to 0.0.",
            "int **<span style='color:#006AB1;'>keyOn</span>**() Get keyOn state.",
            "int **<span style='color:#006AB1;'>keyOn</span>**(int value) Ramp to 1.0.",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of change.",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of change.",
            "float **<span style='color:#006AB1;'>target</span>**(float value) Set value to ramp to.",
            "float **<span style='color:#006AB1;'>target</span>**() Get value to ramp to.",
            "float **<span style='color:#006AB1;'>time</span>**(float value) Set time to reach target (in seconds).",
            "float **<span style='color:#006AB1;'>time</span>**() Get time to reach target (in seconds).",
            "float **<span style='color:#006AB1;'>value</span>**(float value) Set immediate value.",
            "float **<span style='color:#006AB1;'>value</span>**() Get immediate value."
        ],
        "title": "**Envelope UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Envelope)"
    },
    "Event": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>broadcast</span>**() Signal all shreds that are waiting on this event.",
            "int **<span style='color:#006AB1;'>can_wait</span>**() Can the event can be waited on? (internal) used by virtual machine for synchronization.",
            "void **<span style='color:#006AB1;'>signal</span>**() Signal one shred that is waiting on this event.",
            "void **<span style='color:#006AB1;'>waiting_on</span>**() (internal) used by virtual machine to be notified when a shred starts waiting on this Event."
        ],
        "examples": [
            "Examples: \t [broadcast.ck](https://chuck.stanford.edu/doc/examples/event/broadcast.ck), [signal.ck](https://chuck.stanford.edu/doc/examples/event/signal.ck), [signal4.ck](https://chuck.stanford.edu/doc/examples/event/signal4.ck), [event-extend.ck](https://chuck.stanford.edu/doc/examples/event/event-extend.ck), [event-extend2.ck](https://chuck.stanford.edu/doc/examples/event/event-extend2.ck), [event-x-bpm-1.ck](https://chuck.stanford.edu/doc/examples/event/event-x-bpm-1.ck), [event-x-bpm-2.ck](https://chuck.stanford.edu/doc/examples/event/event-x-bpm-2.ck)"
        ],
        "description": "A mechanism for precise synchronization across shreds.",
        "title": "**ChucK Event Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Event)"
    },
    "ExpDelay": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>ampcurve</span>**(float ampcurve) Set steepness of amplitude decay [0.0001-inf].",
            "float **<span style='color:#006AB1;'>ampcurve</span>**() Get steepness of amplitude decay [0.0001-inf].",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur delay) Set duration of delay.",
            "dur **<span style='color:#006AB1;'>delay</span>**() Get duration of delay.",
            "float **<span style='color:#006AB1;'>durcurve</span>**(float durcurve) Set steepness of delay curve [0.0001-inf]: 1 = steady <1 = starts fast and slows down >1 = starts slow and speeds up.",
            "float **<span style='color:#006AB1;'>durcurve</span>**() Get steepness of delay curve [0.0001-inf].",
            "dur **<span style='color:#006AB1;'>max</span>**(dur max) Set maximum possible delay duration.",
            "dur **<span style='color:#006AB1;'>max</span>**() Get maximum possible delay duration.",
            "float **<span style='color:#006AB1;'>mix</span>**(float mix) Set dry/wet mix [0-1].",
            "float **<span style='color:#006AB1;'>mix</span>**() Get dry/wet mix [0-1].",
            "int **<span style='color:#006AB1;'>reps</span>**(int reps) Set number of repetitions.",
            "int **<span style='color:#006AB1;'>reps</span>**() Get number of repetitions."
        ],
        "examples": [
            "Examples: \t [ExpDelay.ck](https://chuck.stanford.edu/doc/examples/effects/ExpDelay.ck)"
        ],
        "description": "Feedback delay at exponentially changing delay times.",
        "title": "**Exponential Delay**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#ExpDelay)"
    },
    "ExpEnv": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>T60</span>**(dur arg) Set T60 delay time (time for sounds to decay by 60dB.",
            "dur **<span style='color:#006AB1;'>T60</span>**() Get T60 delay time (time for sounds to decay by 60dB.",
            "int **<span style='color:#006AB1;'>keyOn</span>**(int arg) No description available",
            "float **<span style='color:#006AB1;'>radius</span>**(float arg) No description available",
            "float **<span style='color:#006AB1;'>radius</span>**() No description available",
            "float **<span style='color:#006AB1;'>value</span>**(float arg) No description available",
            "float **<span style='color:#006AB1;'>value</span>**() No description available"
        ],
        "examples": [
            "Examples: \t [ExpEnv.ck](https://chuck.stanford.edu/doc/examples/effects/ExpEnv.ck), [ExpEnv-modes.ck](https://chuck.stanford.edu/doc/examples/effects/ExpEnv-modes.ck)"
        ],
        "description": "ChucK Simple Decaying Exponential Envelope UGen Simple single time constant exponential decay, applied to any signal passed through it. Obeys: value, T60, radius, and keyOn Especially useful for Modal synthesis. One of these for each mode: SinOsc s => ExpEnv e => dac; Also useful for noise excitation pulse, using it like: Noise n => ExpEnv e => dac;.",
        "title": "**Exponential Envelope**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#ExpEnv)"
    },
    "FFT": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the FFT-size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the FFT-size.",
            "void **<span style='color:#006AB1;'>spectrum</span>**(complex[] buffer) Manually retrieve the results of a transform.",
            "void **<span style='color:#006AB1;'>transform</span>**(float[] from) Manually take FFT (as opposed to using .upchuck() / upchuck operator)",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [
            "Examples: \t [fft.ck](https://chuck.stanford.edu/doc/examples/analysis/fft.ck), [fft2.ck](https://chuck.stanford.edu/doc/examples/analysis/fft2.ck), [fft3.ck](https://chuck.stanford.edu/doc/examples/analysis/fft3.ck), [ifft.ck](https://chuck.stanford.edu/doc/examples/analysis/ifft.ck), [feature-extract.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/feature-extract.ck), [genre-classify.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/genre-classify.ck)"
        ],
        "description": "Computes the Fast Fourier Transform on incoming audio samples, and outputs the result via its UAnaBlob as both the complex spectrum and the magnitude spectrum. A buffering mechanism maintains the previous FFTsize # of samples, allowing FFT's to be taken at any point in time, on demand (via .upchuck() or by upchucking a downstream UAna. The window size (along with an arbitrary window shape) is controlled via the .window method. The hop size is complete dynamic, and is throttled by how time is advanced.",
        "title": "**Fast Fourier Transform**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#FFT)"
    },
    "FIR": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bpHetero</span>**(float freq) Cosine modulate lowpass filter to freq.",
            "float **<span style='color:#006AB1;'>coeff</span>**(int idx, float coeff) Set filter idx's coefficient to coeff.",
            "float **<span style='color:#006AB1;'>coeff</span>**(int idx) Set filter idx's coefficient.",
            "int **<span style='color:#006AB1;'>gaussian</span>**(float cutoff_freq) Create a gaussian lowpass filter with cutoff cutoff_freq.",
            "int **<span style='color:#006AB1;'>hpHetero</span>**() Cosine modulate lowpass filter to 1/2 the sample rate.",
            "int **<span style='color:#006AB1;'>order</span>**(int arg) Set filter's order.",
            "int **<span style='color:#006AB1;'>order</span>**() Get filter's order.",
            "int **<span style='color:#006AB1;'>sinc</span>**(float cutoff_freq) Create a sinc lowpass filter with cutoff cutoff_freq."
        ],
        "examples": [
            "Examples: \t [FIR-convolve-homer.ck](https://chuck.stanford.edu/doc/examples/filter/FIR-convolve-homer.ck), [FIR-greyhole-down-up-decimate.ck](https://chuck.stanford.edu/doc/examples/filter/FIR-greyhole-down-up-decimate.ck), [FIR-sinc-explicit.ck](https://chuck.stanford.edu/doc/examples/filter/FIR-sinc-explicit.ck)"
        ],
        "description": "Yo! This here is a ChugIn for ChucK. It's a general-purpose FIR filter. You make a new one: FIR myFilter; Then specify order: N => myFilter.order;.",
        "title": "**Finite Impulse Response Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#FIR)"
    },
    "FM": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>afterTouch</span>**(float value) Set aftertouch, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>afterTouch</span>**() Get aftertouch, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>controlOne</span>**(float value) Set control one [instrument specific].",
            "float **<span style='color:#006AB1;'>controlOne</span>**() Get control one [instrument specific].",
            "float **<span style='color:#006AB1;'>controlTwo</span>**(float value) Set control two [instrument specific].",
            "float **<span style='color:#006AB1;'>controlTwo</span>**() Get control two [instrument specific].",
            "float **<span style='color:#006AB1;'>getFMTableGain</span>**(int index) Get table gain lookup.",
            "float **<span style='color:#006AB1;'>getFMTableSusLevel</span>**(int index) Get sustain level lookup.",
            "float **<span style='color:#006AB1;'>getFMTableTime</span>**(int index) Get table time lookup.",
            "float **<span style='color:#006AB1;'>lfoDepth</span>**(float value) Set modulation depth, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>lfoDepth</span>**() Get modulation depth, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>lfoSpeed</span>**(float value) Set modulation speed (Hz).",
            "float **<span style='color:#006AB1;'>lfoSpeed</span>**() Get modulation speed (Hz).",
            "float **<span style='color:#006AB1;'>op4Feedback</span>**(float value) Set operator 4 feedback.",
            "float **<span style='color:#006AB1;'>op4Feedback</span>**() Get operator 4 feedback.",
            "float **<span style='color:#006AB1;'>opADSR</span>**(int opNum, float attack, float decay, float sustain, float release) Set operator ADSR: attack (sec), decay (sec), sustain [0.0-1.0], release (sec).",
            "float **<span style='color:#006AB1;'>opAM</span>**(int opNum, float value) Set operator amplitude modulation.",
            "float **<span style='color:#006AB1;'>opAM</span>**(int opNum) Get operator amplitude modulation.",
            "float **<span style='color:#006AB1;'>opGain</span>**(int opNum, float value) Set operator gain.",
            "float **<span style='color:#006AB1;'>opGain</span>**(int opNum) Get gperator gain.",
            "float **<span style='color:#006AB1;'>opRatio</span>**(int opNum, float ratio) Set operator frequency ratio.",
            "float **<span style='color:#006AB1;'>opRatio</span>**(int opNum) Get operator frequency ratio.",
            "float **<span style='color:#006AB1;'>opWave</span>**(int opNum, int wave) Set operator waveform [1-8]."
        ],
        "examples": [],
        "description": "STK FM synthesis super class. You should NOT need to use this UGen directly. Please refer to the documentation on FM subclasses instead. This class controls an arbitrary number of waves and envelopes, determined via a constructor argument. Control Change Numbers: - Control One = 2 - Control Two = 4 - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK FM Synthesis**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#FM)"
    },
    "FMVoices": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>adsrTarget</span>**(float value) Set ADSR targets, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>adsrTarget</span>**() Get ADSR targets, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>spectralTilt</span>**(float value) Set spectral tilt, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>spectralTilt</span>**() Get spectral tilt, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vowel</span>**(float value) Set vowel, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vowel</span>**() Get vowel, [0.0-1.0]."
        ],
        "examples": [],
        "description": "STK singing FM synthesis instrument. This class implements 3 carriers and a common modulator, also referred to as algorithm 6 of the TX81Z. Algorithm 6 is : ___//->1 -\\ 4-||-->2 - +-> Out ___\\->3 -// Control Change Numbers: - Vowel = 2 (.controlOne) - Spectral Tilt = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**FM Voices**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#FMVoices)"
    },
    "FeatureCollector": {
        "functions": [],
        "examples": [
            "Examples: \t [feature-extract.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/feature-extract.ck), [genre-classify.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/genre-classify.ck), [concat.ck](https://chuck.stanford.edu/doc/examples/analysis/concat.ck)"
        ],
        "description": "Turns UAna input into a single feature vector, upon .upchuck()",
        "title": "**UAna Feature Collector**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#FeatureCollector)"
    },
    "FileIO": {
        "description": "File input and output utilities for reading, writing, seeking, etc. See examples for usage.",
        "examples": [
            "Examples: \t [chout.ck](https://chuck.stanford.edu/doc/examples/io/chout.ck), [read-float.ck](https://chuck.stanford.edu/doc/examples/io/read-float.ck), [read-int.ck](https://chuck.stanford.edu/doc/examples/io/read-int.ck), [read-line.ck](https://chuck.stanford.edu/doc/examples/io/read-line.ck), [read-str.ck](https://chuck.stanford.edu/doc/examples/io/read-str.ck), [read-tokens.ck](https://chuck.stanford.edu/doc/examples/io/read-tokens.ck), [seek.ck](https://chuck.stanford.edu/doc/examples/io/seek.ck), [write.ck](https://chuck.stanford.edu/doc/examples/io/write.ck), [write2.ck](https://chuck.stanford.edu/doc/examples/io/write2.ck), [write-auto.ck](https://chuck.stanford.edu/doc/examples/io/write-auto.ck), [read-byte.ck](https://chuck.stanford.edu/doc/examples/io/read-byte.ck), [write-byte.ck](https://chuck.stanford.edu/doc/examples/io/write-byte.ck)"
        ],
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>autoExtension</span>**() Get auto extension for \"special:auto\" filename generation (applicable to file writing only).",
            "string **<span style='color:#006AB1;'>autoPrefix</span>**() Get auto prefix for \"special:auto\" filename generation (applicable to file writing only).",
            "void **<span style='color:#006AB1;'>autoPrefixExtension</span>**(string prefix, string extension) Set auto prefix and extension for \"special:auto\" filename generation (applicable to file writing only).",
            "void **<span style='color:#006AB1;'>close</span>**() Close (and flush) the currently open file.",
            "string[] **<span style='color:#006AB1;'>dirList</span>**() Get an array of file names in an open directory.",
            "int **<span style='color:#006AB1;'>eof</span>**() Return whether end-of-file has been reached; the opposite of .more().",
            "string **<span style='color:#006AB1;'>filename</span>**() Get current filename.",
            "void **<span style='color:#006AB1;'>flush</span>**() Write any buffered output to file.",
            "int **<span style='color:#006AB1;'>good</span>**() Returns whether the file is ready for reading.",
            "int **<span style='color:#006AB1;'>isDir</span>**() Return if the open file is a directory.",
            "int **<span style='color:#006AB1;'>mode</span>**(int flag) Set file IO mode (IO.MODE_SYNC or IO.MODE_ASYNC).",
            "int **<span style='color:#006AB1;'>mode</span>**() Get file IO mode (IO.MODE_SYNC or IO.MODE_ASYNC).",
            "int **<span style='color:#006AB1;'>more</span>**() Return whether there is more to read; the opposite of .eof().",
            "int **<span style='color:#006AB1;'>open</span>**(string path) Open a file by name (and by default in ASCII mode).",
            "int **<span style='color:#006AB1;'>open</span>**(string path, int flags) Open a file by name with flags (bitwise combinations of IO.READ, IO.WRITE, IO.READ_WRITE, IO_APPEND, IO.ASCII, IO.BINARY).",
            "float **<span style='color:#006AB1;'>readFloat</span>**() Read and return the next floating point value.",
            "float **<span style='color:#006AB1;'>readFloat</span>**(int flags) Read and return the next floating point value; if binary mode: 'flags' denotes the size of float to read (IO.FLOAT32 or IO.FLOAT64).",
            "int **<span style='color:#006AB1;'>readInt</span>**(int flags) Read and return an integer; binary mode: 'flags' specifies int size to read (IO.INT8, IO.INT16, IO.INT32 default to unsigned values; for signed integers use IO.SINT8, IO.SINT16, IO.SINT32).",
            "string **<span style='color:#006AB1;'>readLine</span>**() Read and return the next line from file.",
            "void **<span style='color:#006AB1;'>seek</span>**(int pos) Seek to a specified byte offset in file.",
            "int **<span style='color:#006AB1;'>size</span>**() Return the size of the file in bytes, or -1 if no file is opened or if a directory is opened.",
            "int **<span style='color:#006AB1;'>tell</span>**() Return the byte read offset of the file, or -1 if no file is opened.",
            "void **<span style='color:#006AB1;'>write</span>**(string val) Write a string to file.",
            "void **<span style='color:#006AB1;'>write</span>**(int val) Write an integer to file.",
            "void **<span style='color:#006AB1;'>write</span>**(int val, int flags) Write integer value to file; binary mode: int size specified by 'flags' (IO.INT8, IO.INT16, IO.INT32).",
            "void **<span style='color:#006AB1;'>write</span>**(float val) Write floating point value to file.",
            "void **<span style='color:#006AB1;'>write</span>**(float val, int flags) Write floating point value to file; binary mode: flags indicate float size (IO.FLOAT32 or IO.FLOAT64).",
            "string **<span style='color:#006AB1;'>expandPath</span>**(string path) Expand platform-specific filepath to an absolute path, which is returned. On macOS and Linux expandPath() will attempt to resolve `~` or `~[username]`; on Windows expandPath() will attempt to resolve %USERNAME%. (Known issue: (macOS) expandPath currently introduced an audio click; it recommended to call expandPath() at the beginning; e.g., expanding path ahead of time could avoid a click instead of calling Machine.add() on a filepath with `~`.)"
        ],
        "title": "**File Input and Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#FileIO)"
    },
    "FilterBasic": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter cutoff/center frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter cutoff/center frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Set filter frequency and resonance at the same time."
        ],
        "examples": [],
        "description": "Base class for basic filters with a notion of center/cutoff frequency and Q.",
        "title": "**Basic Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#FilterBasic)"
    },
    "FilterStk": {
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>coefs</span>**(string value) No description available"
        ],
        "examples": [],
        "description": "FilterStk is an STK Filter base class inherited by all Stk Filter UGens such as BiQuad, TwoZero, PoleZero, etc. You should NOT need to use this UGen directly. Please refer to the documentation on other filter types instead.",
        "title": "**FilterStk Base Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#FilterStk)"
    },
    "Flip": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>output</span>**(float[] buffer) Manually take Flip (as opposed to using .upchuck() / upchuck operator)",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the Flip size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the Flip size.",
            "void **<span style='color:#006AB1;'>transform</span>**(float[] from) Manually take Flip (as opposed to using .upchuck() / upchuck operator).",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [
            "Examples: \t [flip.ck](https://chuck.stanford.edu/doc/examples/analysis/flip.ck), [autocorr.ck](https://chuck.stanford.edu/doc/examples/analysis/autocorr.ck), [zerox.ck](https://chuck.stanford.edu/doc/examples/ai/features/zerox.ck)"
        ],
        "description": "Turn N (size) audio samples into a Unit Analyzer audio analysis frame.",
        "title": "**Signal Flip**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Flip)"
    },
    "Flute": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>endReflection</span>**(float value) Set end reflection.",
            "float **<span style='color:#006AB1;'>endReflection</span>**() Get end reflection.",
            "float **<span style='color:#006AB1;'>jetDelay</span>**(float value) Set jet delay.",
            "float **<span style='color:#006AB1;'>jetDelay</span>**() Get jet delay.",
            "float **<span style='color:#006AB1;'>jetReflection</span>**(float value) Set jet reflection.",
            "float **<span style='color:#006AB1;'>jetReflection</span>**() Get jet reflection.",
            "float **<span style='color:#006AB1;'>noiseGain</span>**(float value) Set noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>noiseGain</span>**() Get noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**(float value) Set pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**() Get pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [flute.ck](https://chuck.stanford.edu/doc/examples/stk/flute.ck)"
        ],
        "description": "This class implements a simple flute physical model, as discussed by Karjalainen, Smith, Waryznyk, etc. The jet model uses a polynomial, a la Cook. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Jet Delay = 2 - Noise Gain = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Flute**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Flute)"
    },
    "Flux": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>reset</span>**() Reset the extractor.",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] lhs, float[] rhs) Manually computes the flux between two frames.",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] lhs, float[] rhs, float[] diff) Manually computes the flux between two frames, and stores the difference in a third array."
        ],
        "examples": [
            "Examples: \t [flux.ck](https://chuck.stanford.edu/doc/examples/ai/features/flux.ck), [flux0.ck](https://chuck.stanford.edu/doc/examples/ai/features/flux0.ck)"
        ],
        "description": "A unit analyzer that computes the spectral flux between successive magnitude spectra (via incoming UAna, or given manually), and outputs a single number.",
        "title": "**Spectral Flux Analyzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Flux)"
    },
    "FoldbackSaturator": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>index</span>**(float arg) The index that the signal is multiplied by after it is inverted against the threshold. Defaults to 2.0.",
            "float **<span style='color:#006AB1;'>index</span>**() The index that the signal is multiplied by after it is inverted against the threshold. Defaults to 2.0.",
            "float **<span style='color:#006AB1;'>makeupGain</span>**(float arg) The amount of makeup gain applied to the signal after processing, multiplied against the reciprocal of the threshold. Defaults to 1.0.",
            "float **<span style='color:#006AB1;'>makeupGain</span>**() The amount of makeup gain applied to the signal after processing, multiplied against the reciprocal of the threshold. Defaults to 1.0.",
            "float **<span style='color:#006AB1;'>threshold</span>**(float arg) The threshold (positive and negative) that the signal is inverted against as it is passed. Defaults to 0.6.",
            "float **<span style='color:#006AB1;'>threshold</span>**() The threshold (positive and negative) that the signal is inverted against as it is passed. Defaults to 0.6."
        ],
        "examples": [
            "Examples: \t [FoldbackSaturator-index.ck](https://chuck.stanford.edu/doc/examples/effects/FoldbackSaturator-index.ck), [FoldbackSaturator-threshold.ck](https://chuck.stanford.edu/doc/examples/effects/FoldbackSaturator-threshold.ck)"
        ],
        "description": "Foldback saturator that inverts a signal and multiplies it by an index as it passes a threshold.",
        "title": "**Foldback Saturator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#FoldbackSaturator)"
    },
    "FrencHrn": {
        "functions": [],
        "examples": [
            "Examples: \t [frenchrn-algo2.ck](https://chuck.stanford.edu/doc/examples/stk/frenchrn-algo2.ck)"
        ],
        "description": "STK-style French Horn FM synthesis instrument. This class implements 3 cascade operators and a 4th modulator with feedback modulation, also referred to as algorithm 2 of the TX81Z. Algorithm 2 is : ____4--\\ 3--+-->>2-->1-->Out Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**French Horn**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#FrencHrn)"
    },
    "FullRect": {
        "functions": [],
        "examples": [],
        "description": "A full wave rectifier.",
        "title": "**Full Wave Rectifier**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#FullRect)"
    },
    "GVerb": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>bandwidth</span>**() Get the input bandwidth [0 - 1]. Same as damping control, but on the input signal. Default 0.5.",
            "float **<span style='color:#006AB1;'>bandwidth</span>**(float arg) Set the input bandwidth [0 - 1]. Same as damping control, but on the input signal. Default 0.5.",
            "float **<span style='color:#006AB1;'>damping</span>**() Get high frequency rolloff [0 - 1]. 0 damps the reverb signal completely, 1 not at all. Default 0.",
            "float **<span style='color:#006AB1;'>damping</span>**(float arg) Set high frequency rolloff [0 - 1]. 0 damps the reverb signal completely, 1 not at all. Default 0.",
            "float **<span style='color:#006AB1;'>dry</span>**() Get the amount of dry signal [0 - 1]. Default 0.5.",
            "float **<span style='color:#006AB1;'>dry</span>**(float arg) Set the amount of dry signal [0 - 1]. Default 0.5.",
            "float **<span style='color:#006AB1;'>early</span>**() Get the early reflection level [0 - 1]. Default 0.4.",
            "float **<span style='color:#006AB1;'>early</span>**(float arg) Set the early reflection level [0 - 1]. Default 0.4.",
            "dur **<span style='color:#006AB1;'>revtime</span>**(dur arg) Set reverberation time. Default 5::second.",
            "dur **<span style='color:#006AB1;'>revtime</span>**() Get reverberation time.",
            "float **<span style='color:#006AB1;'>roomsize</span>**(float arg) Set room size [1.0 - 300.0]. Default 30.0.",
            "float **<span style='color:#006AB1;'>roomsize</span>**() Get room size [1.0 - 300.0].",
            "float **<span style='color:#006AB1;'>tail</span>**() Get the tail level [0 - 1]. Default 0.5.",
            "float **<span style='color:#006AB1;'>tail</span>**(float arg) Set the tail level [0 - 1]. Default 0.5."
        ],
        "examples": [
            "Examples: \t [GVerb.ck](https://chuck.stanford.edu/doc/examples/effects/GVerb.ck)"
        ],
        "description": "GVerb is a very smooth reverberator with the ability to produce very long reverb times. GVERB is based on the original \"gverb/gigaverb\" by Juhana Sadeharju (kouhia at nic.funet.fi). The code for this version was adapted from RTcmix (http:rtcmix.org), which in turn adapted it from the Max/MSP version by Olaf Mtthes (olaf.matthes at gmx.de).",
        "title": "**GVerb Reverb**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#GVerb)"
    },
    "Gain": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode."
        ],
        "examples": [
            "Examples: \t [i-robot.ck](https://chuck.stanford.edu/doc/examples/basic/i-robot.ck)"
        ],
        "description": "A gain control unit generator. (All unit generators can already change their own gain; this is an explicit way to add multiple outputs together and scale them.)",
        "title": "**Gain Control UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Gain)"
    },
    "Gen10": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [Gen10-test.ck](https://chuck.stanford.edu/doc/examples/special/Gen10-test.ck)"
        ],
        "description": "Constructs a lookup table of harmonic partials with specified amplitudes. The amplitude of partial n is specified by the nth element of the coefficients. For example, setting coefs to [ 1 ] will produce a sine wave.",
        "title": "**Generalized UGen 10-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Gen10)"
    },
    "Gen17": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [Gen17-test.ck](https://chuck.stanford.edu/doc/examples/special/Gen17-test.ck)"
        ],
        "description": "Constructs a Chebyshev polynomial wavetable with harmonic partials of specified weights. The weight of partial n is specified by the nth element of the coefficients. Primarily used for waveshaping, driven by a SinOsc instead of a Phasor. See http://crca.ucsd.edu/~msp/techniques/v0.08/book-html/node74.html and http://en.wikipedia.org/wiki/Distortion_synthesis for more information.",
        "title": "**Generalized UGen 17-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Gen17)"
    },
    "Gen5": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [Gen5-test.ck](https://chuck.stanford.edu/doc/examples/special/Gen5-test.ck)"
        ],
        "description": "Constructs a lookup table composed of sequential exponential curves. For a table with N curves, starting value of y', and value yn for lookup index xn, set the coefficients to [ y', y0, x0, ..., yN-1, xN-1 ]. Note that there must be an odd number of coefficients. If an even number of coefficients is specified, behavior is undefined. The sum of xn for 0 ≤ n < N must be 1. yn = 0 is approximated as 0.000001 to avoid strange results arising from the nature of exponential curves.",
        "title": "**Generalized UGen 5-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Gen5)"
    },
    "Gen7": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [Gen7-test.ck](https://chuck.stanford.edu/doc/examples/special/Gen7-test.ck)"
        ],
        "description": "Constructs a lookup table composed of sequential line segments. For a table with N lines, starting value of y', and value yn for lookupindex xn, set the coefficients to [ y', y0, x0, ..., yN-1, xN-1 ]. Note that there must be an odd number of coefficients. If an even number of coefficients is specified, behavior is undefined. The sum of xn for 0 ≤ n < N must be 1.",
        "title": "**Generalized UGen 7-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Gen7)"
    },
    "Gen9": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [Gen9-test.ck](https://chuck.stanford.edu/doc/examples/special/Gen9-test.ck)"
        ],
        "description": "Constructs a lookup table of partials with specified amplitudes, phases, and harmonic ratios to the fundamental. Coefficients are specified in triplets of [ ratio, amplitude, phase ] arranged in a single linear array.",
        "title": "**Generalized UGen 9-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#Gen9)"
    },
    "GenX": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients; meaning is dependent on subclass.",
            "float **<span style='color:#006AB1;'>lookup</span>**(float which) Get lookup table value at index i [ -1, 1 ]; absolute value is used in the range [ -1, 0 )"
        ],
        "examples": [
            "Examples: \t [readme-GenX.ck](https://chuck.stanford.edu/doc/examples/special/readme-GenX.ck)"
        ],
        "description": "Ported from rtcmix. See http://www.music.columbia.edu/cmix/makegens.html for more information on the GenX family of UGens. Currently coefficients past the 100th are ignored. Lookup can either be done using the lookup() function, or by driving the table with an input UGen, typically a Phasor. For an input signal between [ -1, 1 ], using the absolute value for [ -1, 0 ), GenX will output the table value indexed by the current input.",
        "title": "**Generalized UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#GenX)"
    },
    "HMM": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>generate</span>**(int length, int[] output) Generate a sequence of observations of the given length.",
            "int **<span style='color:#006AB1;'>load</span>**(float[] initiailDistribution, float[][] transitionMatrix, float[][] emissionMatrix) Initialize the HMM model with the given initial state distribution, transition matrix, and emission matrix.",
            "int **<span style='color:#006AB1;'>train</span>**(int numStates, int numEmissions, int[] observations) Train the HMM model with the given observations."
        ],
        "examples": [
            "Examples: \t [hmm-load.ck](https://chuck.stanford.edu/doc/examples/ai/hmm/hmm-load.ck), [hmm-train.ck](https://chuck.stanford.edu/doc/examples/ai/hmm/hmm-train.ck)"
        ],
        "description": "A hidden markov model (HMM) utility that generates a sequence of observations based on the training data.",
        "title": "**Hidden Markov Model**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#HMM)"
    },
    "HPF": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter cutoff frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter cutoff frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Set filter frequency and resonance at the same time."
        ],
        "examples": [
            "Examples: \t [hpf.ck](https://chuck.stanford.edu/doc/examples/filter/hpf.ck), [rhpf.ck](https://chuck.stanford.edu/doc/examples/filter/rhpf.ck)"
        ],
        "description": "A resonant high-pass filter (2nd order Butterworth).",
        "title": "**High-Pass Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#HPF)"
    },
    "HalfRect": {
        "functions": [],
        "examples": [],
        "description": "A half wave rectifier.",
        "title": "**Half Wave Rectifier**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#HalfRect)"
    },
    "HevyMetl": {
        "functions": [],
        "examples": [
            "Examples: \t [hevymetl-algo3.ck](https://chuck.stanford.edu/doc/examples/stk/hevymetl-algo3.ck), [hevymetl-dance-now.ck](https://chuck.stanford.edu/doc/examples/stk/hevymetl-dance-now.ck), [hevymetl-trumpet-algo3.ck](https://chuck.stanford.edu/doc/examples/stk/hevymetl-trumpet-algo3.ck)"
        ],
        "description": "A STK heavy metal FM synthesis instrument. This class implements 3 cascade operators with feedback modulation, also referred to as algorithm 3 of the TX81Z. Algorithm 3 is : ____4--\\ 3-->2-- + -->1-->Out Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Heavy Metal**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#HevyMetl)"
    },
    "Hid": {
        "description": "Class for interacting with human-interface devices (HIDs) such as keyboards, mice, gamepads, joysticks, etc.",
        "examples": [
            "Examples: \t [kb.ck](https://chuck.stanford.edu/doc/examples/hid/kb.ck), [keyboard-organ.ck](https://chuck.stanford.edu/doc/examples/hid/keyboard-organ.ck), [mouse.ck](https://chuck.stanford.edu/doc/examples/hid/mouse.ck), [mouse-abs.ck](https://chuck.stanford.edu/doc/examples/hid/mouse-abs.ck), [mouse-fm.ck](https://chuck.stanford.edu/doc/examples/hid/mouse-fm.ck), [joy.ck](https://chuck.stanford.edu/doc/examples/hid/joy.ck), [joy-fm.ck](https://chuck.stanford.edu/doc/examples/hid/joy-fm.ck), [joy-noise.ck](https://chuck.stanford.edu/doc/examples/hid/joy-noise.ck), [joy-shake.ck](https://chuck.stanford.edu/doc/examples/hid/joy-shake.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>can_wait</span>**() (internal) used by virtual machine for synthronization.",
            "int **<span style='color:#006AB1;'>good</span>**() Get whether a device has been successfully opened on this HID instance.",
            "string **<span style='color:#006AB1;'>name</span>**() Get the name of the currently open device; return empty string (\"\") if no device is open on this HID instance.",
            "int **<span style='color:#006AB1;'>num</span>**() Get the number of the currently open device; returns -1 if no device is open on this HID instance.",
            "int **<span style='color:#006AB1;'>open</span>**(int type, int num) Open a HID device by device number ('num') and type ('type'). See static member variables for possible types.",
            "int **<span style='color:#006AB1;'>open</span>**(string name) Open a HID device by name.",
            "int **<span style='color:#006AB1;'>openJoystick</span>**(int num) Open a joystick/gamepad by device number.",
            "int **<span style='color:#006AB1;'>openJoystick</span>**(int num, int suppressErrMsg) Open a joystick/gamepad by device number, with option (true/false) to suppress error messages.",
            "int **<span style='color:#006AB1;'>openKeyboard</span>**(int num) Open a keyboard by device number.",
            "int **<span style='color:#006AB1;'>openKeyboard</span>**(int num, int suppressErrMsg) Open a keyboard by device number, with option (true/false) to suppress error messages.",
            "int **<span style='color:#006AB1;'>openMouse</span>**(int num) Open a mouse/trackpad by device number.",
            "int **<span style='color:#006AB1;'>openMouse</span>**(int num, int suppressErrMsg) Open a mouse/trackpad by device number, with option (true/false) to suppress error messages.",
            "int **<span style='color:#006AB1;'>openTiltSensor</span>**() Open a tilt-sensor by device number.",
            "void **<span style='color:#006AB1;'>printerr</span>**(int toPrintOrNot) Set whether to print errors (default is YES).",
            "int **<span style='color:#006AB1;'>read</span>**(int type, int which, HidMsg msg) Read the next HidMsg from device of type 'type' with device id 'which'.",
            "int **<span style='color:#006AB1;'>recv</span>**(HidMsg msg) Receive the next available HidMsg.",
            "int **<span style='color:#006AB1;'>send</span>**(HidMsg msg) Send a HidMsg to device; return whether the operation was successful.",
            "dur **<span style='color:#006AB1;'>globalTiltPollRate</span>**(dur d) Set tilt-sensor poll rate.",
            "dur **<span style='color:#006AB1;'>globalTiltPollRate</span>**() Get tilt-sensor poll rate.",
            "int[] **<span style='color:#006AB1;'>readTiltSensor</span>**() Read tilt-sensor and return as an int array.",
            "int **<span style='color:#006AB1;'>startCursorTrack</span>**() Start cursor tracking; return whether the request was successful.",
            "int **<span style='color:#006AB1;'>stopCursorTrack</span>**() Stop cursor tracking; return whether the request was successful."
        ],
        "title": "**Human-Interface Device (HID)**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#Hid)"
    },
    "HidMsg": {
        "description": "Helper class for receiving HID information; e.g., which key was pressed, joystick position, etc.",
        "examples": [
            "Examples: \t [kb.ck](https://chuck.stanford.edu/doc/examples/hid/kb.ck), [keyboard-organ.ck](https://chuck.stanford.edu/doc/examples/hid/keyboard-organ.ck), [mouse.ck](https://chuck.stanford.edu/doc/examples/hid/mouse.ck), [mouse-abs.ck](https://chuck.stanford.edu/doc/examples/hid/mouse-abs.ck), [mouse-fm.ck](https://chuck.stanford.edu/doc/examples/hid/mouse-fm.ck), [joy.ck](https://chuck.stanford.edu/doc/examples/hid/joy.ck), [joy-fm.ck](https://chuck.stanford.edu/doc/examples/hid/joy-fm.ck), [joy-noise.ck](https://chuck.stanford.edu/doc/examples/hid/joy-noise.ck), [joy-shake.ck](https://chuck.stanford.edu/doc/examples/hid/joy-shake.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>isAxisMotion</span>**() Return whether this message is an axis-motion event.",
            "int **<span style='color:#006AB1;'>isButtonDown</span>**() Return whether this message is a button-down event.",
            "int **<span style='color:#006AB1;'>isButtonUp</span>**() Return whether this message is a button-up event.",
            "int **<span style='color:#006AB1;'>isHatMotion</span>**() Return whether this message is a hat-motion event.",
            "int **<span style='color:#006AB1;'>isMouseMotion</span>**() Return whether this message is a mouse-motion event.",
            "int **<span style='color:#006AB1;'>isWheelMotion</span>**() Return whether this message is a wheel-motion event.",
            "int **<span style='color:#006AB1;'>is_axis_motion</span>**() (Deprecated; use .isAxisMotion() instead).",
            "int **<span style='color:#006AB1;'>is_button_down</span>**() (Deprecated; use .isButtonDown() instead).",
            "int **<span style='color:#006AB1;'>is_button_up</span>**() (Deprecated; use .isButtonUp() instead).",
            "int **<span style='color:#006AB1;'>is_hat_motion</span>**() (Deprecated; use .isHatMotion() instead).",
            "int **<span style='color:#006AB1;'>is_mouse_motion</span>**() (Deprecated; use .isMouseMotion() instead)."
        ],
        "title": "**Human-Interface Device (HID) Message**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#HidMsg)"
    },
    "HnkyTonk": {
        "functions": [],
        "examples": [
            "Examples: \t [honkeytonk-algo1.ck](https://chuck.stanford.edu/doc/examples/stk/honkeytonk-algo1.ck), [honkeytonk-algo3.ck](https://chuck.stanford.edu/doc/examples/stk/honkeytonk-algo3.ck)"
        ],
        "description": "STK-style Honkey Tonk Piano FM synthesis instrument. This class implements 4 cascade operators with feedback modulation, also referred to as algorithm 1 of the TX81Z. Algorithm 1 is : ____4-->3-->2-->1-->Out Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Honky Tonk Piano**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#HnkyTonk)"
    },
    "IDCT": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>samples</span>**(float[] buffer) Manually get result of previous IDCT.",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the IDCT size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the IDCT size.",
            "void **<span style='color:#006AB1;'>transform</span>**(complex[] from) Manually take IDCT (as opposed to using .upchuck() / upchuck operator).",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [],
        "description": "Computes the inverse Discrete Cosine Transform on incoming spectral frames (on demand), and overlap-adds the results into its internal buffer, ready to be sent to other UGen's connected via =>. The window size (along with an arbitrary window shape) is controlled via the .window method.",
        "title": "**Inverse Discrete Cosine Transform**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#IDCT)"
    },
    "IFFT": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>samples</span>**(float[] buffer) Manually take IFFT (as opposed to using .upchuck() / upchuck operator)",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the IFFT-size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the IFFT-size.",
            "void **<span style='color:#006AB1;'>transform</span>**(complex[] from) Manually take IFFT (as opposed to using .upchuck() / upchuck operator)",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [
            "Examples: \t [ifft.ck](https://chuck.stanford.edu/doc/examples/analysis/ifft.ck), [ifft2.ck](https://chuck.stanford.edu/doc/examples/analysis/ifft2.ck), [ifft3.ck](https://chuck.stanford.edu/doc/examples/analysis/ifft3.ck)"
        ],
        "description": "Computes the inverse Fast Fourier Transform on incoming spectral frames (on demand), and overlap-adds the results into its internal buffer, ready to be sent to other UGen's connected via =>. The window size (along with an arbitrary window shape) is controlled via the .window method.",
        "title": "**Inverse Fast Fourier Transform**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#IFFT)"
    },
    "IO": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>close</span>**() Close the currently open IO.",
            "int **<span style='color:#006AB1;'>eof</span>**() Return whether end-of-file has been reached; the opposite of .more().",
            "void **<span style='color:#006AB1;'>flush</span>**() Write any buffered output.",
            "int **<span style='color:#006AB1;'>good</span>**() Returns whether IO is ready for reading.",
            "int **<span style='color:#006AB1;'>mode</span>**(int flag) Set the current IO mode; either IO.MODE_ASYNC or IO.MODE_SYNC.",
            "int **<span style='color:#006AB1;'>mode</span>**() Get the current IO mode; either IO.MODE_ASYNC or IO.MODE_SYNC.",
            "int **<span style='color:#006AB1;'>more</span>**() Return whether there is more to read; the opposite of .eof().",
            "float **<span style='color:#006AB1;'>readFloat</span>**(int flags) Read and return the next floating point value; binary mode: 'flags' denotes the size of float to read (IO.FLOAT32 or IO.FLOAT64).",
            "int **<span style='color:#006AB1;'>readInt</span>**(int flags) Read and return the next integer; binary mode: 'flags' denotes the bit-size of int (IO.INT8, IO.INT16, or IO.INT32).",
            "string **<span style='color:#006AB1;'>readLine</span>**() Read until an end-of-line character.",
            "void **<span style='color:#006AB1;'>write</span>**(string val) Write string 'val'.",
            "void **<span style='color:#006AB1;'>write</span>**(int val) Write integer 'val'.",
            "void **<span style='color:#006AB1;'>write</span>**(float val) Write floating point number 'val'.",
            "string **<span style='color:#006AB1;'>newline</span>**() Newline character; same as IO.nl().",
            "string **<span style='color:#006AB1;'>nl</span>**() Newline character; same as IO.newline()."
        ],
        "examples": [],
        "description": "Base class for other IO classes such as FileIO, StdOut and StdErr. Besides IO.newline(), it’s unlikely you need to use this class directly.",
        "title": "**Input/Output Operations**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#IO)"
    },
    "Impulse": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>next</span>**(float next) Set the value of next sample. (Note: if you are using the UGen.last() method to read the output of the impulse, the value set by Impulse.next() does not appear as the output until after the next sample boundary. In this case, there is a consistent 1::samp offset between setting .next(...) and reading that value using .last().)",
            "float **<span style='color:#006AB1;'>next</span>**() Get value of next sample to be generated."
        ],
        "examples": [
            "Examples: \t [imp.ck](https://chuck.stanford.edu/doc/examples/basic/imp.ck), [comb.ck](https://chuck.stanford.edu/doc/examples/basic/comb.ck), [chant.ck](https://chuck.stanford.edu/doc/examples/deep/chant.ck)"
        ],
        "description": "An impulse generator. Can be used to set the value of the next sample; default for each sample is 0 if not set. Additionally, this can be used to generate a digital signal, one sample at a time.",
        "title": "**Impulse Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Impulse)"
    },
    "JCRev": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set mix level.",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix level."
        ],
        "examples": [
            "Examples: \t [reverb.ck](https://chuck.stanford.edu/doc/examples/effects/reverb.ck), [otf_06.ck](https://chuck.stanford.edu/doc/examples/otf_06.ck), [otf_07.ck](https://chuck.stanford.edu/doc/examples/otf_07.ck)"
        ],
        "description": "John Chowning's reverberator class. This class is derived from the CLM NRev function, which is based on the use of networks of simple allpass and comb delay filters. This particular arrangement consists of 6 comb filters in parallel, followed by 3 allpass filters, a lowpass filter, and another allpass in series, followed by two allpass filters in parallel with corresponding right and left outputs. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**John Chowning's Reverberator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#JCRev)"
    },
    "KBHit": {
        "description": "KBHit (terminal only) is a simple mechanism for capturing keyboard input; for a more flexible mechanism, see HID. (On Linux, KBHit does not require granting device permissions; it works out of the box.)",
        "examples": [
            "Examples: \t [kbhit.ck](https://chuck.stanford.edu/doc/examples/hid/kbhit/kbhit.ck), [kbhit2.ck](https://chuck.stanford.edu/doc/examples/hid/kbhit/kbhit2.ck), [clix.ck](https://chuck.stanford.edu/doc/examples/hid/kbhit/clix.ck), [clix2.ck](https://chuck.stanford.edu/doc/examples/hid/kbhit/clix2.ck), [clix3.ck](https://chuck.stanford.edu/doc/examples/hid/kbhit/clix3.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>can_wait</span>**() (internal) used by virtual machine for synthronization.",
            "int **<span style='color:#006AB1;'>getchar</span>**() Get the ASCII value of the last keyboard press.",
            "Event **<span style='color:#006AB1;'>hit</span>**() Return itself as an Event to wait on; this is largely unnecessary as the KBHit instance can be directly => to 'now'.",
            "int **<span style='color:#006AB1;'>more</span>**() Return whether there are unprocessed KBHit events (e.g., if a user presses multiple keys at once).",
            "void **<span style='color:#006AB1;'>off</span>**() Disable the KBHit.",
            "void **<span style='color:#006AB1;'>on</span>**() Enable the KBHit.",
            "void **<span style='color:#006AB1;'>state</span>**() Get whether the KBHit is currently enabled."
        ],
        "title": "**Keyboard Hit**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#KBHit)"
    },
    "KNN": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>search</span>**(float[] query, int k, int[] indices) Search for the 'k' nearest neighbors of 'query' and return their corresponding indices.",
            "void **<span style='color:#006AB1;'>search</span>**(float[] query, int k, int[] indices, float[][] observations) Search for the 'k' nearest neighbors of 'query' and return their corresponding indices and observations.",
            "int **<span style='color:#006AB1;'>train</span>**(float[][] x) Train the KNN model with the given observations 'x'",
            "void **<span style='color:#006AB1;'>weigh</span>**(float[] weights) Set the weights for each dimension in the data."
        ],
        "examples": [
            "Examples: \t [knn-search.ck](https://chuck.stanford.edu/doc/examples/ai/knn/knn-search.ck)"
        ],
        "description": "A basic k-NN utility that searches for k nearest neighbors from a set of observations / feature vectors. (Also see KNN2. The differrence between KNN and KNN2 is that KNN does not deal with labels whereas KNN2 is designed to work with labels.)",
        "title": "**K-Nearest Neighbors**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#KNN)"
    },
    "KNN2": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>predict</span>**(float[] query, int k, float[] prob) Predict the output probabilities 'prob' given unlabeled test input 'query' based on distances to 'k' nearest neighbors.",
            "void **<span style='color:#006AB1;'>search</span>**(float[] query, int k, int[] labels) Search for the 'k' nearest neighbors of 'query' and return their labels.",
            "void **<span style='color:#006AB1;'>search</span>**(float[] query, int k, int[] labels, int[] indices) Search for the 'k' nearest neighbors of 'query' and return their labels and indices.",
            "void **<span style='color:#006AB1;'>search</span>**(float[] query, int k, int[] labels, int[] indices, float[][] observations) Search for the 'k' nearest neighbors of 'query' and return their labels, indices, and observations.",
            "int **<span style='color:#006AB1;'>train</span>**(float[][] x, int[] labels) Train the KNN model with the given observations 'x' and corresponding labels.",
            "void **<span style='color:#006AB1;'>weigh</span>**(float[] weights) Set the weights for each dimension in the data."
        ],
        "examples": [
            "Examples: \t [knn2-classify.ck](https://chuck.stanford.edu/doc/examples/ai/knn/knn2-classify.ck), [knn2-search.ck](https://chuck.stanford.edu/doc/examples/ai/knn/knn2-search.ck)"
        ],
        "description": "A k-NN utility that predicts probabilities of class membership based on distances from a test input to its k nearest neighbors. (Also see KNN. The differrence between KNN and KNN2 is that KNN does not deal with labels whereas KNN2 is designed to work with labels.)",
        "title": "**K-Nearest Neighbors 2**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#KNN2)"
    },
    "KasFilter": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>accent</span>**(float arg) Sets the amount of waveshaping on the crossfading sine [0 - 1]. 1 is close to regular under-sampling (if no resonance is used).",
            "float **<span style='color:#006AB1;'>accent</span>**() Gets the amount of waveshaping on the crossfading sine [0 - 1]. 1 is close to regular under-sampling (if no resonance is used).",
            "float **<span style='color:#006AB1;'>freq</span>**(float arg) Sets the cutoff frequency. This sets both the frequency at which the two sample & holds sample the input signal and the frequency of the sine that crossfades between them.",
            "float **<span style='color:#006AB1;'>freq</span>**() Gets the cutoff frequency. This sets both the frequency at which the two sample & holds sample the input signal and the frequency of the sine that crossfades between them.",
            "float **<span style='color:#006AB1;'>resonance</span>**(float arg) Sets the resonance, which is implemented as negative feedback [0 - 0.95].",
            "float **<span style='color:#006AB1;'>resonance</span>**() Gets the resonance, which is implemented as negative feedback [0 - 0.95]."
        ],
        "examples": [
            "Examples: \t [KasFilter.ck](https://chuck.stanford.edu/doc/examples/filter/KasFilter.ck)"
        ],
        "description": "Under-sampling-based resonant lowpass filter, based on two sample & holds with a cosine crossfading between them. Each S&H samples at the moment it's faded out. The frequency of the crossfading and sampling of the input sets the cutoff. This leads to a infinitely steep cutoff, at the price of aliasing. Negative feedback is used for resonance at the cutoff frequency, a technique that I believe is new here. In addition to the traditional modulation options waveshaping of the crossfading signal is provided. This leads to distortion at the cutoff frequency. At extreme values (and assuming no feedback is used) that makes the effect closer to traditional under-sampling. Linear interpolation is used on the input signal to avoid the S&Hs being quantised to ChucK's sample rate; This technique causes quite a few interesting artifacts that result from the ratio between the frequency of the input and the cutoff frequency. To emphasise those it makes sense to try to minimise artifacts induced by the digital environment itself. Thanks to Rob Hordijk for sharing his insights there.",
        "title": "**Kassel Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#KasFilter)"
    },
    "KrstlChr": {
        "functions": [],
        "examples": [
            "Examples: \t [krstlchr-algo7.ck](https://chuck.stanford.edu/doc/examples/stk/krstlchr-algo7.ck)"
        ],
        "description": "STK-style \"Crystal Choir\" FM synthesis instrument. This class implements 3 parallel operators with being modulated (feedback modulation), also referred to as algorithm 7 of the TX81Z. Algorithm 7 is : 1 -\\ 2 - +-> Out 4-->3 -/ Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Crystal Choir**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#KrstlChr)"
    },
    "Kurtosis": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input) Manually computes the kurtosis of a given input array."
        ],
        "examples": [
            "Examples: \t [kurtosis.ck](https://chuck.stanford.edu/doc/examples/ai/features/kurtosis.ck)"
        ],
        "description": "A unit analyzer that computes the kurtosis of a given input array, and outputs a single number.",
        "title": "**Kurtosis Analyzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Kurtosis)"
    },
    "LPF": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter cutoff frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter cutoff frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Set filter frequency and resonance at the same time."
        ],
        "examples": [
            "Examples: \t [lpf.ck](https://chuck.stanford.edu/doc/examples/filter/lpf.ck), [rlpf.ck](https://chuck.stanford.edu/doc/examples/filter/rlpf.ck)"
        ],
        "description": "A resonant low-pass filter (2nd order Butterworth).",
        "title": "**Low-Pass Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#LPF)"
    },
    "LiSa": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [
            "Examples: \t [LiSa-munger1.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-munger1.ck), [LiSa-munger2.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-munger2.ck), [LiSa-munger3.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-munger3.ck), [LiSa-load.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-load.ck), [LiSa-simplelooping.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-simplelooping.ck), [LiSa-trigger.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-trigger.ck), [LiSa-track1.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-track1.ck), [LiSa-track2.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-track2.ck), [LiSa-track3.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-track3.ck), [LiSa-track4.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-track4.ck), [LiSa-track5.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-track5.ck), [LiSa-stereo.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-stereo.ck), [twilight-granular-kb.ck](https://chuck.stanford.edu/doc/examples/special/twilight/twilight-granular-kb.ck), [twilight-granular-kb-interp.ck](https://chuck.stanford.edu/doc/examples/special/twilight/twilight-granular-kb-interp.ck)"
        ],
        "description": "LiSa provides basic live sampling functionality, and is also often used for granular synthesis. An internal buffer stores samples chucked to LiSa's input. Segments of this buffer can be played back, with ramping and speed/direction control. Multiple voice facility is built in, allowing for a single LiSa object to serve as a source for sample layering and granular textures. by Dan Trueman (2007) See also: a slowly growing tutorial | LiSa examples in the ChucK distribution | video tutorial by Clint Hoagland.",
        "title": "**Live Sampling UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa)"
    },
    "LiSa10": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [],
        "description": "A (li)ve (sa)mpling unit generator (10-channel edition); also popularly used for granular synthesis.",
        "title": "**Live Sampling UGen 10-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa10)"
    },
    "LiSa16": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [],
        "description": "A (li)ve (sa)mpling unit generator (16-channel edition); also popularly used for granular synthesis.",
        "title": "**Live Sampling UGen 16-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa16)"
    },
    "LiSa2": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [
            "Examples: \t [LiSa-stereo.ck](https://chuck.stanford.edu/doc/examples/special/LiSa-stereo.ck)"
        ],
        "description": "A (li)ve (sa)mpling unit generator (stereo edition); also popularly used for granular synthesis.",
        "title": "**Live Sampling UGen 2-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa2)"
    },
    "LiSa6": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [],
        "description": "A (li)ve (sa)mpling unit generator (6-channel edition); also popularly used for granular synthesis.",
        "title": "**Live Sampling UGen 6-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa6)"
    },
    "LiSa8": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bi</span>**(int voice, int val) For particular voice (arg 1), turn on/off bidirectional playback.",
            "int **<span style='color:#006AB1;'>bi</span>**(int val) For particular voice (arg 1), get bidirectional playback status.",
            "int **<span style='color:#006AB1;'>bi</span>**() Get birectional playback status.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear recording buffer.",
            "dur **<span style='color:#006AB1;'>duration</span>**(dur val) Set buffer size; required to allocate memory, also resets all parameter values to default.",
            "dur **<span style='color:#006AB1;'>duration</span>**() Get buffer size.",
            "float **<span style='color:#006AB1;'>feedback</span>**(float val) Set feedback amount when overdubbing (loop recording; how much to retain).",
            "float **<span style='color:#006AB1;'>feedback</span>**() Get feedback amount when overdubbing (loop recording; how much to retain).",
            "int **<span style='color:#006AB1;'>getVoice</span>**() Return an available voice (one that is not currently playing). Return -1 if no voice is available.",
            "int **<span style='color:#006AB1;'>getbi</span>**(int voice) Turn on/off bidirectional playback (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**(int val) Turn on/off looping (voice 0).",
            "int **<span style='color:#006AB1;'>loop0</span>**() Get looping status (voice 0).",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice, int val) For particular voice (arg 1), turn on/off looping.",
            "int **<span style='color:#006AB1;'>loop</span>**(int voice) For particular voice (arg 1), get looping status.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice, dur val) For particular voice (arg 1), set loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(int voice) For particular voice (arg 1), get loop ending point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**(dur val) Set loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEnd</span>**() Get loop ending point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**(dur val) Set end point in buffer for loop recording.",
            "dur **<span style='color:#006AB1;'>loopEndRec</span>**() Get end point in buffer for loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**(int val) Turn on/off loop recording.",
            "int **<span style='color:#006AB1;'>loopRec</span>**() Get loop recording status.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice, dur val) For particular voice (arg 1), set loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(int voice) For particular voice (arg 1), get loop starting point for playback. only applicable when .loop(voice, 1).",
            "dur **<span style='color:#006AB1;'>loopStart</span>**(dur val) Set loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "dur **<span style='color:#006AB1;'>loopStart</span>**() Get loop starting point for playback (voice 0). only applicable when 1 => loop.",
            "int **<span style='color:#006AB1;'>maxVoices</span>**(int val) Set the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "int **<span style='color:#006AB1;'>maxVoices</span>**() Get the maximum number of voices allowable; 10 by default (256 is the current hardwired internal limit).",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**(int voice) For particular voice (arg 1), get panning value.",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) For voice 0, set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>pan</span>**() For voice 0, get panning value.",
            "int **<span style='color:#006AB1;'>play</span>**(int voice, int toggle) For particular voice (arg 1), turn on/off sample playback.",
            "int **<span style='color:#006AB1;'>play</span>**(int toggle) Turn on/off sample playback (voice 0)",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice, dur val) For particular voice (arg 1), set playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(int voice) For particular voice (arg 1), get playback position.",
            "dur **<span style='color:#006AB1;'>playPos</span>**(dur val) Set playback position (voice 0).",
            "dur **<span style='color:#006AB1;'>playPos</span>**() Get playback position (voice 0).",
            "int **<span style='color:#006AB1;'>playing</span>**(int val) Get playing status.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(int voice, dur val) For particular voice (arg 1), turn off sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampDown</span>**(dur val) Turn off sample playback, with ramp (voice 0).",
            "void **<span style='color:#006AB1;'>rampUp</span>**(int voice, dur val) For particular voice (arg 1), turn on sample playback, with ramp.",
            "void **<span style='color:#006AB1;'>rampUp</span>**(dur val) Turn on sample playback, with ramp (voice 0).",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice, float val) For particular voice (arg 1), set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(int voice) For particular voice (arg 1), get playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**(float val) Set playback rate (voice 0). Note that the int/float type for this method will determine whether the rate is being set (float, for voice 0) or read (int, for voice number).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (voice 0).",
            "dur **<span style='color:#006AB1;'>recPos</span>**(dur val) Set record position.",
            "dur **<span style='color:#006AB1;'>recPos</span>**() Get record position.",
            "dur **<span style='color:#006AB1;'>recRamp</span>**(dur val) Set ramping when recording (from 0 to loopEndRec).",
            "int **<span style='color:#006AB1;'>record</span>**(int toggle) Turn recording on and off.",
            "int **<span style='color:#006AB1;'>sync</span>**(int val) Set input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>sync</span>**() Get input mode; (0) input is recorded to internal buffer, (1) input sets playback position [0,1] (phase value between loopStart and loopEnd for all active voices), (2) input sets playback position, interpreted as a time value in samples (only works with voice 0)",
            "int **<span style='color:#006AB1;'>track</span>**(int val) Identical to sync.",
            "int **<span style='color:#006AB1;'>track</span>**() Identical to sync.",
            "dur **<span style='color:#006AB1;'>value</span>**(int voice, dur val) For particular voice (arg 1), get value from the voice.",
            "dur **<span style='color:#006AB1;'>value</span>**(dur val) Get value from voice 0.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(float val, dur index) Set value directly in record buffer.",
            "float **<span style='color:#006AB1;'>valueAt</span>**(dur index) Get value directly from record buffer.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice, float val) For particular voice (arg 1), set gain.",
            "float **<span style='color:#006AB1;'>voiceGain</span>**(int voice) Set playback gain (voice 0).",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice, float val) For particular voice (arg 1), set panning value [0.0, number of channels - 1.0].",
            "float **<span style='color:#006AB1;'>voicePan</span>**(int voice) For particular voice (arg 1), get panning value."
        ],
        "examples": [],
        "description": "A (li)ve (sa)mpling unit generator (8-channel edition); also popularly used for granular synthesis.",
        "title": "**Live Sampling UGen 8-channel**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#LiSa8)"
    },
    "MFCC": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input, float[] output) Manually computes the MFCC of the input (an FFT spectrum), and stores the results in the output array (MFCC coefficients).",
            "int **<span style='color:#006AB1;'>numCoeffs</span>**(int n) Set the number of MFCC coefficients to compute.",
            "int **<span style='color:#006AB1;'>numCoeffs</span>**() Get the number of MFCC coefficients to compute.",
            "int **<span style='color:#006AB1;'>numFilters</span>**(int n) Set the number of linearly spaced filters in MEL space.",
            "int **<span style='color:#006AB1;'>numFilters</span>**() Get the number of linearly spaced filters in MEL space.",
            "int **<span style='color:#006AB1;'>sampleRate</span>**(int sr) Set the sample rate for MFCC analysis; NOTE: by default this is set to current ChucK sample rate.",
            "int **<span style='color:#006AB1;'>sampleRate</span>**() Get the sample rate for MFCC analysis."
        ],
        "examples": [
            "Examples: \t [mfcc-basic.ck](https://chuck.stanford.edu/doc/examples/ai/features/mfcc-basic.ck), [mfcc-mean.ck](https://chuck.stanford.edu/doc/examples/ai/features/mfcc-mean.ck), [feature-extract.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/feature-extract.ck), [genre-classify.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/genre-classify.ck)"
        ],
        "description": "A unit analyzer that computes Mel-frequency Cepstral Coefficients (MFCCs), and outputs a vector of coefficients.",
        "title": "**Mel-Frequency Cepstral Coefficients**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#MFCC)"
    },
    "MLP": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>backprop</span>**(float[] output, float learningRate) (Manually) backpropagate from the output layer, for a single input-output observation; compute the gradient of the loss function with respect to the weights in the network, one layer at a time.",
            "void **<span style='color:#006AB1;'>forward</span>**(float[] input) (Manually) forward-propagate the input vector through the network.",
            "void **<span style='color:#006AB1;'>getActivations</span>**(int layer, float[] activations) Get the activations of the given layer, after a manual .forward().",
            "void **<span style='color:#006AB1;'>getBiases</span>**(int layer, float[] biases) Get the biases of the given layer.",
            "void **<span style='color:#006AB1;'>getGradients</span>**(int layer, float[] gradients) Get the gradients of the given layer, after a manual .backprop().",
            "void **<span style='color:#006AB1;'>getWeights</span>**(int layer, float[][] weights) Get the weights of the given layer.",
            "void **<span style='color:#006AB1;'>init</span>**(int[] nodesPerLayer) Initialize the MLP with the given number of nodes per layer.",
            "void **<span style='color:#006AB1;'>init</span>**(int[] nodesPerLayer, int[] activationPerLayer) Initialize the MLP with the given number of nodes per layer and the given activation function per layer, as specified in 'activationPerLayer' (options: AI.Linear, AI.Sigmoid, AI.ReLU, AI.Tanh, or AI.Softmax).",
            "void **<span style='color:#006AB1;'>init</span>**(int[] nodesPerLayer, int activationFunction) Initialize the MLP with the given number of nodes per layer and the given activation function for all layers (options: AI.Linear, AI.Sigmoid, AI.ReLU, AI.Tanh, or AI.Softmax).",
            "int **<span style='color:#006AB1;'>load</span>**(string filename) Load a MLP model from file.",
            "int **<span style='color:#006AB1;'>predict</span>**(float[] input, float[] output) Predict the output layer from an input layer.",
            "int **<span style='color:#006AB1;'>save</span>**(string filename) Save the MLP model to file.",
            "void **<span style='color:#006AB1;'>train</span>**(float[][] inputs, float[][] outputs) Train the MLP with the given input and output observations with default learning rate=.01 and epochs=100. (Also see MLP.train(inputs,outputs,learningRate,epochs).)",
            "void **<span style='color:#006AB1;'>train</span>**(float[][] inputs, float[][] outputs, float learningRate, int epochs) Train the MLP with the given input and output observations, the learning rate, and number of epochs.",
            "void **<span style='color:#006AB1;'>shuffle</span>**(float[][] X, float[][] Y) (Manually) shuffle the given input and output vectors."
        ],
        "examples": [
            "Examples: \t [mlp.ck](https://chuck.stanford.edu/doc/examples/ai/mlp/mlp.ck), [mlp-manual.ck](https://chuck.stanford.edu/doc/examples/ai/mlp/mlp-manual.ck), [model-load.ck](https://chuck.stanford.edu/doc/examples/ai/mlp/model-load.ck), [model-save.ck](https://chuck.stanford.edu/doc/examples/ai/mlp/model-save.ck)"
        ],
        "description": "A multilayer perceptron (MLP)--a basic artificial neural network--that maps an input layer to an output layer across a number of fully-connected hidden layers. This implementation can be trained either 1) by using one of the comprehensive .train() functions OR 2) by iteratively calling .forward() and .backprop() for each input-output observation, and using .shuffle() for each epoch. Commonly used for regression or classification.",
        "title": "**Multi-Layer Perceptron**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#MLP)"
    },
    "Machine": {
        "description": "Machine is the runtime interface to the ChucK Virtual Machine (Ck.VM or simply VM). This interface can be used to manage shreds, evaluate code, set log levels, etc. Machine's shred commands (add, replace, remove, etc.) are similar to the on-the-fly programming commands, except these are invoked from within a ChucK program, and benefit from ChucK's strongly-timed mechanics.",
        "examples": [
            "Examples: \t [eval.ck](https://chuck.stanford.edu/doc/examples/machine/eval.ck), [eval-global.ck](https://chuck.stanford.edu/doc/examples/machine/eval-global.ck), [intsize.ck](https://chuck.stanford.edu/doc/examples/machine/intsize.ck), [is-realtime.ck](https://chuck.stanford.edu/doc/examples/machine/is-realtime.ck), [machine-help.ck](https://chuck.stanford.edu/doc/examples/machine/machine-help.ck), [machine-shred.ck](https://chuck.stanford.edu/doc/examples/machine/machine-shred.ck), [version.ck](https://chuck.stanford.edu/doc/examples/machine/version.ck), [DrumMachine](https://chuck.stanford.edu/doc/examples/book/digital-artists/chapter9/DrumMachine), [initialize.ck](https://chuck.stanford.edu/doc/examples/book/digital-artists/chapter9/SmartMandolin/initialize.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>add</span>**(string path) Compile and spork a new shred from file at 'path' into the VM; returns the new shred ID. It is possible to include arguments with the file being added, e.g., `Machine.add( \"foo.ck:bar:3:5.0\" )`.",
            "void **<span style='color:#006AB1;'>clearVM</span>**() Reset the type system, removing all user-defined types and all global variables; removes all shreds in the VM (including the shred calling this function); use with care.",
            "void **<span style='color:#006AB1;'>crash</span>**() Explicitly crash the virtual machine. The very last resort; or an emphatic gesture. Use with care.",
            "int **<span style='color:#006AB1;'>eval</span>**(string code) Evaluate a string as ChucK code, compile it and immediately spork it as a new independent shred, and automatically yield the current shred to give the new shred a chance to run, without advancing time.",
            "int **<span style='color:#006AB1;'>eval</span>**(string code, string args) Evaluate a string as ChucK code, with arguments (bundled in 'args' as \"ARG1:ARG2:...\", compile it and immediately spork it as a new independent shred, and automatically yield the current shred to give the new shred a chance to run, without advancing time.",
            "int **<span style='color:#006AB1;'>eval</span>**(string code, string args, int count) Evaluate a string as ChucK code, with optional arguments (bundled in 'args' as \"ARG1:ARG2:...\", compile it and immediately spork 'count' independent shreds; and automatically yield the current shred to give all new shreds a chance to run, without advancing time.",
            "int **<span style='color:#006AB1;'>intsize</span>**() Return the bit size of an integer.",
            "int **<span style='color:#006AB1;'>loglevel</span>**(int level) Set log level |- 0: NONE |- 1: CORE |- 2: SYSTEM |- 3: HERALD |- 4: WARNING |- 5: INFO |- 6: DEBUG |- 7: FINE |- 8: FINER |- 9: FINEST |- 10: ALL.",
            "int **<span style='color:#006AB1;'>loglevel</span>**() Get log level.",
            "int **<span style='color:#006AB1;'>numShreds</span>**() Get the number of shreds currently in the VM.",
            "void **<span style='color:#006AB1;'>printStatus</span>**() Print (to terminal or console) the current status of the VM.",
            "void **<span style='color:#006AB1;'>printTimeCheck</span>**() Print (to terminal or console) the current time information in the VM.",
            "int **<span style='color:#006AB1;'>realtime</span>**() Return true if the shred is in realtime mode, false if it's in silent mode (i.e. --silent is enabled)",
            "int **<span style='color:#006AB1;'>refcount</span>**(Object obj) Get an object's current internal reference count; this is intended for testing or curiosity; NOTE: this function intentionally does not take into account any reference counting related to the calling of this function (normally all functions increments the reference count for objects passed as arguments and decrements upon returning)",
            "int **<span style='color:#006AB1;'>remove</span>**(int id) Remove shred from VM by shred ID (returned by Machine.add).",
            "void **<span style='color:#006AB1;'>removeAllShreds</span>**() Remove all shreds in the VM (including the shred calling this function).",
            "int **<span style='color:#006AB1;'>removeLastShred</span>**() Remove the most recently added shred in the VM (could be the shred calling this function); returns the ID of the removed shred.",
            "int **<span style='color:#006AB1;'>replace</span>**(int id, string path) Replace shred with new shred from file. Returns new shred ID, or 0 on error. It is possible to include arguments, e.g., `Machine.replace( outID, \"foo.ck:bar:3:5.0\" )`.",
            "void **<span style='color:#006AB1;'>resetOperators</span>**() Reset operator overloading state to default startup state; removes all public @operator overloads; use with care.",
            "int **<span style='color:#006AB1;'>resetShredID</span>**() Reset shred IDs to 1 + the highest current shred ID in the VM; can be used as shred management to keep shred IDs low, after a lot of sporks; returns what the next shred ID would be.",
            "int[] **<span style='color:#006AB1;'>shreds</span>**() Retrieve an array of active shred ids.",
            "int **<span style='color:#006AB1;'>silent</span>**() Return false if the shred is in realtime mode, true if it's in silent mode (i.e. --silent is enabled)",
            "int **<span style='color:#006AB1;'>sp_mem</span>**() Get the calling shred's memory (aka \"mem\") stack pointer; intended for either debugging or curiosity.",
            "int **<span style='color:#006AB1;'>sp_reg</span>**() Get the calling shred's operand (aka \"reg\"/register) stack pointer; intended for either debugging or curiosity.",
            "int **<span style='color:#006AB1;'>status</span>**() Print the current status of the VM; legacy version of printStatus().",
            "string **<span style='color:#006AB1;'>version</span>**() Return language and VM version string."
        ],
        "title": "**ChucK Virtual Machine**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Machine)"
    },
    "MagicSine": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float arg) Oscillator frequency [Hz].",
            "float **<span style='color:#006AB1;'>freq</span>**() Oscillator frequency [Hz]."
        ],
        "examples": [],
        "description": "Fast, recursive sine wave generator using the so-called \"magic circle\" algorithm (see https://ccrma.stanford.edu/~jos/pasp/Digital_Sinusoid_Generators.html). Can be 30-40% faster than regular SinOsc. Frequency modulation will negate this performance benefit; most useful when pure sine tones are desired or for additive synthesis.",
        "title": "**Magic Sine Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#MagicSine)"
    },
    "Mandolin": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>afterTouch</span>**(float value) Set aftertouch (currently unsupported).",
            "string **<span style='color:#006AB1;'>bodyIR</span>**(string path) Set body impulse response.",
            "string **<span style='color:#006AB1;'>bodyIR</span>**() Get body impulse response.",
            "float **<span style='color:#006AB1;'>bodySize</span>**(float value) Set body size (percentage).",
            "float **<span style='color:#006AB1;'>bodySize</span>**() Get body size (percentage).",
            "float **<span style='color:#006AB1;'>pluck</span>**(float value) Pluck instrument, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pluckPos</span>**(float value) Set pluck position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pluckPos</span>**() Get pluck position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stringDamping</span>**(float value) Set string damping, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stringDamping</span>**() Get string damping, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stringDetune</span>**(float value) Set detuning of string pair, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stringDetune</span>**() Get detuning of string pair, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [mandolin.ck](https://chuck.stanford.edu/doc/examples/stk/mandolin.ck), [mand-o-matic.ck](https://chuck.stanford.edu/doc/examples/stk/mand-o-matic.ck), [mand-o-matic-simple.ck](https://chuck.stanford.edu/doc/examples/stk/mand-o-matic-simple.ck)"
        ],
        "description": "This class inherits from PluckTwo and uses 'commuted synthesis' techniques to model a mandolin instrument. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Commuted Synthesis, in particular, is covered by patents, granted, pending, and/or applied-for. All are assigned to the Board of Trustees, Stanford University. For information, contact the Office of Technology Licensing, Stanford University. Control Change Numbers: - Body Size = 2 - Pluck Position = 4 - String Sustain = 11 - String Detuning = 1 - Microphone Position = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Mandolin**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Mandolin)"
    },
    "Math": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>abs</span>**(int value) Return absolute value of an integer value.",
            "float **<span style='color:#006AB1;'>acos</span>**(float x) Compute arccosine of x; result in [0, pi].",
            "float **<span style='color:#006AB1;'>asin</span>**(float x) Compute arcsine of x; result in [-pi/2, +pi/2].",
            "float **<span style='color:#006AB1;'>atan2</span>**(float y, float x) Compute arc tangent of two variables (y/x).",
            "float **<span style='color:#006AB1;'>atan</span>**(float x) Compute arctangent of x; result in [-pi/2, +pi/2].",
            "float **<span style='color:#006AB1;'>ceil</span>**(float x) Return the smallest integer value (returned as float) not less than x.",
            "float **<span style='color:#006AB1;'>clampf</span>**(float value, float min, float max) Clamp a float to range [min,max].",
            "int **<span style='color:#006AB1;'>clampi</span>**(int value, int min, int max) Clamp an integer to range [min,max].",
            "float **<span style='color:#006AB1;'>cos</span>**(float x) Compute cosine of x (measured in radians).",
            "float **<span style='color:#006AB1;'>cosh</span>**(float x) Compute the hyperbolic cosine of x.",
            "float **<span style='color:#006AB1;'>cossim</span>**(float[] a, float[] b) Compute the cosine similarity between arrays a and b.",
            "float **<span style='color:#006AB1;'>cossim</span>**(vec3 a, vec3 b) Compute the cosine similarity between 3D vectors a and b.",
            "float **<span style='color:#006AB1;'>cossim</span>**(vec4 a, vec4 b) Compute the cosine similarity between 4D vectors a and b.",
            "float **<span style='color:#006AB1;'>dbtopow</span>**(float value) Convert decibels (dB) to signal power ratio.",
            "float **<span style='color:#006AB1;'>dbtorms</span>**(float value) Convert decibles (dB) to linear amplitude.",
            "int **<span style='color:#006AB1;'>ensurePow2</span>**(int x) Return the smallest power-of-2 greater than or equal to the value of x.",
            "int **<span style='color:#006AB1;'>equal</span>**(float x, float y) Return whether two floats are considered equal.",
            "float **<span style='color:#006AB1;'>euclidean</span>**(float[] a, float[] b) Compute the euclidean distance between arrays a and b.",
            "float **<span style='color:#006AB1;'>euclidean</span>**(vec2 a, vec2 b) Compute the euclidean distance between 2D vectors a and b.",
            "float **<span style='color:#006AB1;'>euclidean</span>**(vec3 a, vec3 b) Compute the euclidean distance between 3D vectors a and b.",
            "float **<span style='color:#006AB1;'>euclidean</span>**(vec4 a, vec4 b) Compute the euclidean distance between 4D vectors a and b.",
            "float **<span style='color:#006AB1;'>exp2</span>**(float x) Compute 2^x, the base-2 exponential of x.",
            "float **<span style='color:#006AB1;'>exp</span>**(float x) Compute e^x, the base-e exponential of x.",
            "float **<span style='color:#006AB1;'>fabs</span>**(float value) Return absolute value of a floating point value.",
            "float **<span style='color:#006AB1;'>floor</span>**(float x) Return the largest integer value (returned as float) not greater than x.",
            "float **<span style='color:#006AB1;'>fmod</span>**(float x, float y) Compute the floating-point remainder of x / y.",
            "float **<span style='color:#006AB1;'>ftom</span>**(float value) Convert frequency (Hz) to MIDI note number space.",
            "float **<span style='color:#006AB1;'>gauss</span>**(float x, float mean, float sd) Compute gaussian function at x, given mean and SD.",
            "float **<span style='color:#006AB1;'>hypot</span>**(float x, float y) Compute the euclidean distance sqrt(x*x+y*y).",
            "float **<span style='color:#006AB1;'>im</span>**(complex v) Return the imaginary component of complex value v.",
            "int **<span style='color:#006AB1;'>isinf</span>**(float x) Return true if x is infinity, else return false.",
            "int **<span style='color:#006AB1;'>isnan</span>**(float x) Return true if x is not a number, else return false.",
            "float **<span style='color:#006AB1;'>log10</span>**(float x) Compute the logarithm of x to base 10.",
            "float **<span style='color:#006AB1;'>log2</span>**(float x) Compute the logarithm of x to base 2.",
            "float **<span style='color:#006AB1;'>log</span>**(float x) Compute the natural logarithm of x.",
            "float **<span style='color:#006AB1;'>mag</span>**(polar v) Return the magnitude component of polar value v.",
            "float **<span style='color:#006AB1;'>map2</span>**(float value, float x1, float y1, float x2, float y2) Map 'value' from range [x1,y1] into range [x2,y2]; 'value' will be clamped to [x1,y1] if outside range. (see also: Math.map())",
            "float **<span style='color:#006AB1;'>map</span>**(float value, float x1, float y1, float x2, float y2) Map 'value' from range [x1,y1] into range [x2,y2]; 'value' can be outside range[x1,y1]. (see also: Math.map2())",
            "int **<span style='color:#006AB1;'>max</span>**(int x, int y) Return the greater of x and y (integer).",
            "float **<span style='color:#006AB1;'>max</span>**(float x, float y) Return the greater of x and y (float).",
            "int **<span style='color:#006AB1;'>min</span>**(int x, int y) Return the lesser of x and y (int).",
            "float **<span style='color:#006AB1;'>min</span>**(float x, float y) Return the lesser of x and y (float).",
            "float **<span style='color:#006AB1;'>mtof</span>**(float value) Convert a MIDI note number to frequency (Hz). Note that the input value is of type float and supports fractional note numbers.",
            "int **<span style='color:#006AB1;'>nextpow2</span>**(int x) Compute the smallest power-of-2 greater than x.",
            "float **<span style='color:#006AB1;'>phase</span>**(polar v) Return the phase component of polar value v.",
            "float **<span style='color:#006AB1;'>pow</span>**(float x, float y) Compute x raised to the y-th power.",
            "float **<span style='color:#006AB1;'>powtodb</span>**(float value) Convert signal power ratio to decibels (dB).",
            "int **<span style='color:#006AB1;'>ptor</span>**(polar[] from, complex[] to) Convert polar values to complex values; returns number of values converted.",
            "int **<span style='color:#006AB1;'>random2</span>**(int min, int max) Return successive pseudo-random numbers in the range [min, max].",
            "float **<span style='color:#006AB1;'>random2f</span>**(float min, float max) Return successive pseudo-random floating-point numbers in the range [min, max].",
            "int **<span style='color:#006AB1;'>random</span>**() Return successive pseudo-random integer numbers in the range [0, Math.RANDOM_MAX]].",
            "float **<span style='color:#006AB1;'>randomf</span>**() Return successive pseudo-random floating-point numbers in the range [0,1].",
            "void **<span style='color:#006AB1;'>randomize</span>**() Randomize the seed of the random number generator (RNG), using an non-deterministic mechanism. Whereas srandom() explicitly seeds the RNG and will produce a deterministic sequence of pseudo-random numbers, randomize() \"shakes things up\" and causes RNG to start generating from a practically unpredicable seed. The quality of randomize() depends on the underlying implementation.",
            "float **<span style='color:#006AB1;'>re</span>**(complex v) Return the real component of complex value v.",
            "float **<span style='color:#006AB1;'>remainder</span>**(float x, float y) Compute the value r such that r=x-n*y, where n is the integer nearest the exact value of x / y. If there are two integers closest to x / y, n shall be the even one. If r is zero, it is given the same sign as x.",
            "float **<span style='color:#006AB1;'>remap</span>**(float value, float x1, float y1, float x2, float y2) Same as Math.map2().",
            "float **<span style='color:#006AB1;'>rmstodb</span>**(float value) Convert linear amplitude to decibels (dB).",
            "float **<span style='color:#006AB1;'>round</span>**(float x) Return the integer value (returned as float) nearest to x (rounding halfway cases away from zero).",
            "int **<span style='color:#006AB1;'>rtop</span>**(complex[] from, polar[] to) Convert complex values to polar values; returns number of values converted.",
            "float **<span style='color:#006AB1;'>sgn</span>**(float value) Return sign of 'value' as -1.0 (negative), 0.0, or 1.0 (positive).",
            "float **<span style='color:#006AB1;'>sin</span>**(float x) Compute sine of x (measured in radians).",
            "float **<span style='color:#006AB1;'>sinh</span>**(float x) Compute the hyperbolic sine of x.",
            "float **<span style='color:#006AB1;'>sqrt</span>**(float x) Compute the non-negative square root of x.",
            "void **<span style='color:#006AB1;'>srandom</span>**(int seed) Seed the random number generator (RNG). Different seeds will generate very different sequences of random numbers even if the seeds are close together. Alternatively, a deterministic sequence of pseudo-random numbers can repeatably generated by setting the same seed.",
            "float **<span style='color:#006AB1;'>tan</span>**(float x) Compute tangent of x (measured in radians).",
            "float **<span style='color:#006AB1;'>tanh</span>**(float x) Compute the hyperbolic tangent of x.",
            "float **<span style='color:#006AB1;'>trunc</span>**(float x) Return the integer value nearest to but no greater in magnitude than x.",
            "static member variables float e",
            "Euler's number; base of the natural logarithm. float E",
            "Euler's number; base of the natural logarithm. float FLOAT_MAX",
            "Largest representable floating-point value. float FLOAT_MIN_MAG",
            "Smallest representable non-negative floating-point value. complex i",
            "The complex number **<span style='color:#006AB1;'>sqrt</span>**(-1). complex I",
            "The complex number **<span style='color:#006AB1;'>sqrt</span>**(-1). float INFINITY",
            "Like, infinity. int INT_MAX",
            "Largest representable integer value. complex j",
            "The complex number **<span style='color:#006AB1;'>sqrt</span>**(-1). complex J",
            "The complex number **<span style='color:#006AB1;'>sqrt</span>**(-1). float pi",
            "An approximation of pi. (Same as global keyword 'pi'.) float PI",
            "An approximation of pi. (Same as global keyword 'pi'.) int RANDOM_MAX",
            "The largest possible value returned by **<span style='color:#006AB1;'>random</span>**(). float two_pi",
            "An approximation of 2*pi. float TWO_PI",
            "An approximation of 2*pi. [ top ]",
            "Machine inherits : Object"
        ],
        "examples": [
            "Examples: \t [blit2.ck](https://chuck.stanford.edu/doc/examples/basic/blit2.ck), [mand-o-matic.ck](https://chuck.stanford.edu/doc/examples/stk/mand-o-matic.ck), [randomize.ck](https://chuck.stanford.edu/doc/examples/math/randomize.ck), [maybe.ck](https://chuck.stanford.edu/doc/examples/math/maybe.ck), [int-dist.ck](https://chuck.stanford.edu/doc/examples/math/int-dist.ck), [map.ck](https://chuck.stanford.edu/doc/examples/math/map.ck)"
        ],
        "description": "Math class library.",
        "title": "**Math Class Library**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Math)"
    },
    "Mesh2D": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>decay</span>**() Decay constant (0 = instant decay, 1.0 = long decay time).",
            "float **<span style='color:#006AB1;'>decay</span>**(float arg) Decay constant (0 = instant decay, 1.0 = long decay time).",
            "float **<span style='color:#006AB1;'>noteOff</span>**(float arg) Release the model.",
            "float **<span style='color:#006AB1;'>noteOn</span>**(float arg) Trigger the mesh with given amplitude.",
            "int **<span style='color:#006AB1;'>x</span>**() X dimension of \"plate\" (max 12).",
            "int **<span style='color:#006AB1;'>x</span>**(int arg) X dimension of \"plate\" (max 12).",
            "float **<span style='color:#006AB1;'>xpos</span>**() Strike x position (appears to be on range (0.0, 2.0)).",
            "float **<span style='color:#006AB1;'>xpos</span>**(float arg) Strike x position (appears to be on range (0.0, 2.0)).",
            "int **<span style='color:#006AB1;'>y</span>**() Y dimension of \"plate\" (max 12).",
            "int **<span style='color:#006AB1;'>y</span>**(int arg) Y dimension of \"plate\" (max 12).",
            "float **<span style='color:#006AB1;'>ypos</span>**() Strike y position (appears to be on range (0.0, 2.0)).",
            "float **<span style='color:#006AB1;'>ypos</span>**(float arg) Strike y position (appears to be on range (0.0, 2.0))."
        ],
        "examples": [
            "Examples: \t [Mesh2D.ck](https://chuck.stanford.edu/doc/examples/special/Mesh2D.ck)"
        ],
        "description": "This class implements a rectilinear, two-dimensional digital waveguide mesh structure. For details, see Van Duyne and Smith, \"Physical Modeling with the 2-D Digital Waveguide Mesh,\" Proceedings of the 1993 International Computer Music Conference.",
        "title": "**2D Digital Waveguide Mesh**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Mesh2D)"
    },
    "MidiFileIn": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>close</span>**() Close the MIDI file.",
            "int **<span style='color:#006AB1;'>numTracks</span>**() Get the number of tracks in the open MIDI file.",
            "int **<span style='color:#006AB1;'>open</span>**(string path) Open a MIDI file.",
            "int **<span style='color:#006AB1;'>read</span>**(MidiMsg msg) Read next MIDI Event (on default track 0); return contents in 'msg'.",
            "int **<span style='color:#006AB1;'>read</span>**(MidiMsg msg, int track) Read next MIDI Event on track 'track'; return contents in 'msg'.",
            "void **<span style='color:#006AB1;'>rewind</span>**() Rewind MIDI reader to beginning of default track 0.",
            "void **<span style='color:#006AB1;'>rewind</span>**(int track) Rewind MIDI reader to beginning of track 'track'."
        ],
        "examples": [
            "Examples: \t [midiplay-play.ck](https://chuck.stanford.edu/doc/examples/midi/midiplay-play.ck)"
        ],
        "description": "Class for reading data from a MIDI file.",
        "title": "**MIDI File Input**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#MidiFileIn)"
    },
    "MidiIn": {
        "description": "Class that can be ChucKed to now as an event. When receiving a message, an event is signaled and Midi information can be read.",
        "examples": [
            "Examples: \t [gomidi.ck](https://chuck.stanford.edu/doc/examples/midi/gomidi.ck), [gomidi2.ck](https://chuck.stanford.edu/doc/examples/midi/gomidi2.ck), [polyfony.ck](https://chuck.stanford.edu/doc/examples/midi/polyfony.ck), [polyfony2.ck](https://chuck.stanford.edu/doc/examples/midi/polyfony2.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>can_wait</span>**() (internal) used by virtual machine for synthronization.",
            "int **<span style='color:#006AB1;'>good</span>**() Return true (1) if a device has been opened for this instance and there was no error connecting to it. Return false (0) if a device has not been opened or there was an error opening a device.",
            "string **<span style='color:#006AB1;'>name</span>**() Return the Midi device's name as string.",
            "int **<span style='color:#006AB1;'>num</span>**() Return the device number of the device (i.e. the number passed to MidiIn/MidiOut.open).",
            "int **<span style='color:#006AB1;'>open</span>**(int port) Open Midi device using a port number.",
            "int **<span style='color:#006AB1;'>open</span>**(string name) Open Midi device using the device's name.",
            "void **<span style='color:#006AB1;'>printerr</span>**(int print_or_not) Set error printing (1 for on, 0 for off). On by default.",
            "int **<span style='color:#006AB1;'>recv</span>**(MidiMsg msg) Return into the MidiMsg argument the next message in the queue from the device. Return 0 if the queue is empty or 1 if a message was in the queue and returned in the argument."
        ],
        "title": "**MIDI Input**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#MidiIn)"
    },
    "MidiMsg": {
        "functions": [],
        "examples": [
            "Examples: \t [gomidi.ck](https://chuck.stanford.edu/doc/examples/midi/gomidi.ck), [gomidi2.ck](https://chuck.stanford.edu/doc/examples/midi/gomidi2.ck), [polyfony.ck](https://chuck.stanford.edu/doc/examples/midi/polyfony.ck), [polyfony2.ck](https://chuck.stanford.edu/doc/examples/midi/polyfony2.ck)"
        ],
        "description": "Creates a message for sending and receiving Midi information.",
        "title": "**MIDI Message**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#MidiMsg)"
    },
    "MidiOut": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>good</span>**() Return true (1) if a device has been opened for this instance and there was no error connecting to it. Return false (0) if a device has not been opened or there was an error opening a device.",
            "string **<span style='color:#006AB1;'>name</span>**() Return the Midi device's name as string.",
            "int **<span style='color:#006AB1;'>num</span>**() Return the device number of the device (i.e. the number passed to MidiIn/MidiOut.open).",
            "int **<span style='color:#006AB1;'>open</span>**(int port) Open Midi device using a port number.",
            "int **<span style='color:#006AB1;'>open</span>**(string name) Open Midi device using the device's name.",
            "void **<span style='color:#006AB1;'>printerr</span>**(int print_or_not) Set error printing (1 for on, 0 for off). On by default.",
            "int **<span style='color:#006AB1;'>send</span>**(MidiMsg msg) Send out a MidiMsg message."
        ],
        "examples": [
            "Examples: \t [midiout.ck](https://chuck.stanford.edu/doc/examples/midi/midiout.ck)"
        ],
        "description": "Class for sending out Midi messages.",
        "title": "**MIDI Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#MidiOut)"
    },
    "Mix2": {
        "description": "A stereo-to-mono unit generator for mixing stereo signal to mono.\nconstructors",
        "examples": [],
        "functions": [],
        "title": "**Stereo to Mono UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Mix2)"
    },
    "ModalBar": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>damp</span>**(float value) Damp bar, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>directGain</span>**(float value) Set direct gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>directGain</span>**() Get direct gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>masterGain</span>**(float value) Set master gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>masterGain</span>**() Get master gain, [0.0-1.0].",
            "int **<span style='color:#006AB1;'>mode</span>**(int value) Set mode.",
            "int **<span style='color:#006AB1;'>mode</span>**() Get mode.",
            "float **<span style='color:#006AB1;'>modeGain</span>**(float value) Set gain for selected mode, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>modeGain</span>**() Get gain for selected mode, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>modeRadius</span>**(float value) Set radius for selected mode, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>modeRadius</span>**() Get radius for selected mode, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>modeRatio</span>**(float value) Set ratio for selected mode.",
            "float **<span style='color:#006AB1;'>modeRatio</span>**() Get ratio for selected mode.",
            "int **<span style='color:#006AB1;'>preset</span>**(int value) Set preset (see above).",
            "int **<span style='color:#006AB1;'>preset</span>**() Get preset.",
            "float **<span style='color:#006AB1;'>stickHardness</span>**(float value) Set stick hardness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stickHardness</span>**() Get stick hardness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>strike</span>**(float value) Strike bar, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>strikePosition</span>**(float value) Set strike position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>strikePosition</span>**() Get strike position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**(float value) Set volume, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**() Get volume, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [modalbar.ck](https://chuck.stanford.edu/doc/examples/stk/modalbar.ck), [modalbar2.ck](https://chuck.stanford.edu/doc/examples/stk/modalbar2.ck), [mode-o-matic.ck](https://chuck.stanford.edu/doc/examples/stk/mode-o-matic.ck), [mode-o-test.ck](https://chuck.stanford.edu/doc/examples/stk/mode-o-test.ck)"
        ],
        "description": "This class implements a number of different struck bar instruments. It inherits from the Modal class. Control Change Numbers: - Stick Hardness = 2 - Stick Position = 4 - Vibrato Gain = 11 - Vibrato Frequency = 7 - Direct Stick Mix = 1 - Volume = 128 - Modal Presets = 16 - Marimba = 0 - Vibraphone = 1 - Agogo = 2 - Wood1 = 3 - Reso = 4 - Wood2 = 5 - Beats = 6 - Two Fixed = 7 - Clump = 8 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Modal Bar**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#ModalBar)"
    },
    "Modulate": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>randomGain</span>**(float value) Set gain for random contribution.",
            "float **<span style='color:#006AB1;'>randomGain</span>**() Get gain for random contribution.",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set gain for vibrato.",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get gain for vibrato.",
            "float **<span style='color:#006AB1;'>vibratoRate</span>**(float value) Set rate for vibrato.",
            "float **<span style='color:#006AB1;'>vibratoRate</span>**() Get rate for vibrato."
        ],
        "examples": [
            "Examples: \t [modulate.ck](https://chuck.stanford.edu/doc/examples/stk/modulate.ck)"
        ],
        "description": "This class combines random and periodic modulations to give a nice, natural human modulation function. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Modulation Effect**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Modulate)"
    },
    "Moog": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>afterTouch</span>**(float value) Set aftertouch, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>filterQ</span>**(float value) Set filter Q value, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>filterQ</span>**() Get filter Q value, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>filterStartFreq</span>**(float freq) Set filter starting frequency.",
            "float **<span style='color:#006AB1;'>filterStartFreq</span>**() Get filter starting frequency.",
            "float **<span style='color:#006AB1;'>filterSweepRate</span>**(float value) Set filter sweep rate, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>filterSweepRate</span>**() Get filter sweep rate, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>lfoDepth</span>**(float value) Set LFO modulation depth.",
            "float **<span style='color:#006AB1;'>lfoDepth</span>**() Get LFO modulation depth.",
            "float **<span style='color:#006AB1;'>lfoSpeed</span>**(float value) Set LFO modulation speed.",
            "float **<span style='color:#006AB1;'>lfoSpeed</span>**() Get LFO modulation speed.",
            "float **<span style='color:#006AB1;'>modDepth</span>**(float value) Set modulation depth.",
            "float **<span style='color:#006AB1;'>modDepth</span>**() Get modulation depth.",
            "float **<span style='color:#006AB1;'>modSpeed</span>**(float value) Set modulation speed.",
            "float **<span style='color:#006AB1;'>modSpeed</span>**() Get modulation speed.",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>volume</span>**(float value) Set volume.",
            "float **<span style='color:#006AB1;'>volume</span>**() Get volume."
        ],
        "examples": [
            "Examples: \t [moog.ck](https://chuck.stanford.edu/doc/examples/stk/moog.ck), [moog2.ck](https://chuck.stanford.edu/doc/examples/stk/moog2.ck), [moogie.ck](https://chuck.stanford.edu/doc/examples/stk/moogie.ck)"
        ],
        "description": "This instrument uses one attack wave, one looped wave, and an ADSR envelope (inherited from the Sampler class) and adds two sweepable formant (FormSwep) filters. Control Change Numbers: - Filter Q = 2 - Filter Sweep Rate = 4 - Vibrato Frequency = 11 - Vibrato Gain = 1 - Gain = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Moog**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Moog)"
    },
    "Multicomb": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>maxfreq</span>**(float maxfreq) Set max frequency. Default 880.",
            "float **<span style='color:#006AB1;'>maxfreq</span>**() Get max frequency. Default 880.",
            "float **<span style='color:#006AB1;'>minfreq</span>**(float minfreq) Set low frequency. Default 220.",
            "float **<span style='color:#006AB1;'>minfreq</span>**() Get low frequency. Default 220.",
            "int **<span style='color:#006AB1;'>num</span>**(int num) Set number of comb filters. Default 5.",
            "int **<span style='color:#006AB1;'>num</span>**() Get number of comb filters. Default 5.",
            "dur **<span style='color:#006AB1;'>revtime</span>**(dur revtime) Set total ring time. Default 1::second.",
            "dur **<span style='color:#006AB1;'>revtime</span>**() Get total ring time. Default 1::second.",
            "void **<span style='color:#006AB1;'>set</span>**(float minfreq, float maxfreq) Set both low and high frequencies."
        ],
        "examples": [
            "Examples: \t [Multicomb.ck](https://chuck.stanford.edu/doc/examples/filter/Multicomb.ck)"
        ],
        "description": "Multiple simultaneous comb filters randomly chosen within a specified frequency range and spread across the stereo field.",
        "title": "**Multi-Comb Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Multicomb)"
    },
    "NRev": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set mix level.",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix level."
        ],
        "examples": [
            "Examples: \t [reverb.ck](https://chuck.stanford.edu/doc/examples/effects/reverb.ck), [krstlchr-algo7.ck](https://chuck.stanford.edu/doc/examples/stk/krstlchr-algo7.ck), [thx.ck](https://chuck.stanford.edu/doc/examples/deep/thx.ck)"
        ],
        "description": "CCRMA's NRev reverberator class. This class is derived from the CLM NRev function, which is based on the use of networks of simple allpass and comb delay filters. This particular arrangement consists of 6 comb filters in parallel, followed by 3 allpass filters, a lowpass filter, and another allpass in series, followed by two allpass filters in parallel with corresponding rightand left outputs. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**CCRMA's NRev Reverberator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#NRev)"
    },
    "Noise": {
        "functions": [],
        "examples": [
            "Examples: \t [wind.ck](https://chuck.stanford.edu/doc/examples/basic/wind.ck), [powerup.ck](https://chuck.stanford.edu/doc/examples/shred/powerup.ck)"
        ],
        "description": "A white noise generator.",
        "title": "**Noise Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Noise)"
    },
    "Object": {
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>toString</span>**() Get a textual description of this object.",
            "void **<span style='color:#006AB1;'>help</span>**() Output helpful information about a class or an instance thereof.",
            "Type **<span style='color:#006AB1;'>typeOf</span>**() Get the type of this object (or class)."
        ],
        "examples": [],
        "description": "constructors",
        "title": "**ChucK Base Object Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Object)"
    },
    "OnePole": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>a1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>pole</span>**(float value) Set pole position along real axis of z-plane.",
            "float **<span style='color:#006AB1;'>pole</span>**() Get pole position along real axis of z-plane."
        ],
        "examples": [
            "Examples: \t [follower.ck](https://chuck.stanford.edu/doc/examples/deep/follower.ck)"
        ],
        "description": "This Filter subclass implements a one-pole digital filter. A method is provided for setting the pole position along the real axis of the z-plane while maintaining a constant peak filter gain. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**One-Pole Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#OnePole)"
    },
    "OneZero": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>zero</span>**(float value) Set zero position.",
            "float **<span style='color:#006AB1;'>zero</span>**() Get zero position."
        ],
        "examples": [
            "Examples: \t [plu.ck](https://chuck.stanford.edu/doc/examples/deep/plu.ck), [plu2.ck](https://chuck.stanford.edu/doc/examples/deep/plu2.ck), [plu3.ck](https://chuck.stanford.edu/doc/examples/deep/plu3.ck)"
        ],
        "description": "This Filter subclass implements a one-zero digital filter. A method is provided for setting the zero position along the real axis of the z-plane while maintaining a constant filter gain. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**One-Zero Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#OneZero)"
    },
    "Osc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency)."
        ],
        "examples": [],
        "description": "Base class for simple oscillator unit generators.",
        "title": "**Oscillator Base Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Osc)"
    },
    "OscIn": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "void **<span style='color:#006AB1;'>addAddress</span>**(string address) Add an OSC address to receive messages from.",
            "void **<span style='color:#006AB1;'>listenAll</span>**() Set OscIn to receive messages of any OSC address.",
            "int **<span style='color:#006AB1;'>port</span>**() Get which port to listen on.",
            "int **<span style='color:#006AB1;'>port</span>**(int p) Set which port to listen on; this will begin priming the background OSC listener on the named port. If port is set to 0, a usable port would be automatically assigned; the auto-assigned port number can be retrieved by calling .port() but may initially take some time to acquire (e.g., hundreds of milliseconds); if there is more than one OscIn client on port 0, they all will eventually share the same auto-assigned port.",
            "int **<span style='color:#006AB1;'>recv</span>**(OscMsg msg) Receive the next queued incoming OSC message, returning its contents in `msg`.",
            "void **<span style='color:#006AB1;'>removeAddress</span>**(string address) Stop listening on a particular OSC address.",
            "void **<span style='color:#006AB1;'>removeAllAddresses</span>**() Stop listening on all OSC addresses."
        ],
        "examples": [
            "Examples: \t [r.ck](https://chuck.stanford.edu/doc/examples/osc/r.ck), [s.ck](https://chuck.stanford.edu/doc/examples/osc/s.ck), [osc-dump.ck](https://chuck.stanford.edu/doc/examples/osc/osc-dump.ck), [r-multi-msg.ck](https://chuck.stanford.edu/doc/examples/osc/multi-msg/r-multi-msg.ck)"
        ],
        "description": "Class for receiving Open Sound Control (OSC) messages. See examples for usage.",
        "title": "**OSC Input**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#OscIn)"
    },
    "OscMsg": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "float **<span style='color:#006AB1;'>getFloat</span>**(int i) Get argument (at index 'i') as a float.",
            "int **<span style='color:#006AB1;'>getInt</span>**(int i) Get argument (at index 'i') as an integer.",
            "string **<span style='color:#006AB1;'>getString</span>**(int i) Get argument (at index 'i') as a string.",
            "int **<span style='color:#006AB1;'>numArgs</span>**() Get the number of arguments contained in this OscMsg."
        ],
        "examples": [
            "Examples: \t [r.ck](https://chuck.stanford.edu/doc/examples/osc/r.ck), [s.ck](https://chuck.stanford.edu/doc/examples/osc/s.ck), [osc-dump.ck](https://chuck.stanford.edu/doc/examples/osc/osc-dump.ck), [r-multi-msg.ck](https://chuck.stanford.edu/doc/examples/osc/multi-msg/r-multi-msg.ck)"
        ],
        "description": "Helper class for receiving the contents of an OSC message.",
        "title": "**OSC Message**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#OscMsg)"
    },
    "OscOut": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "OscOut **<span style='color:#006AB1;'>add</span>**(int i) Add an integer value to an OSC message.",
            "OscOut **<span style='color:#006AB1;'>add</span>**(float f) Add a floating-point value to an OSC message.",
            "OscOut **<span style='color:#006AB1;'>add</span>**(string s) Add an string value to an OSC message.",
            "OscOut **<span style='color:#006AB1;'>dest</span>**(string hostname, int port) Set the destination hostname and port for sending OSC message.",
            "OscOut **<span style='color:#006AB1;'>send</span>**() Send the current OSC message.",
            "OscOut **<span style='color:#006AB1;'>start</span>**(string address) Start an OSC message with a particular address.",
            "OscOut **<span style='color:#006AB1;'>start</span>**(string address, string host, int port) Start an OSC message with a particular address, aimed at a destination host and port."
        ],
        "examples": [
            "Examples: \t [s.ck](https://chuck.stanford.edu/doc/examples/osc/s.ck), [r.ck](https://chuck.stanford.edu/doc/examples/osc/r.ck), [osc-dump.ck](https://chuck.stanford.edu/doc/examples/osc/osc-dump.ck)"
        ],
        "description": "Class for sending Open Sound Control (OSC) messages. See examples for usage.",
        "title": "**OSC Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#OscOut)"
    },
    "PCA": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>reduce</span>**(float[][] input, int D, float[][] output) Dimension-reduce 'input' (NxM) to 'output' (NxD) as the projection of the input data onto its first 'D' principle components."
        ],
        "examples": [
            "Examples: \t [pca.ck](https://chuck.stanford.edu/doc/examples/ai/pca/pca.ck)"
        ],
        "description": "A principle component analysis (PCA) utility, commonly used for dimensionality reduction.",
        "title": "**Principal Component Analyzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#PCA)"
    },
    "PRCRev": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set mix level.",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix level."
        ],
        "examples": [
            "Examples: \t [reverb.ck](https://chuck.stanford.edu/doc/examples/effects/reverb.ck)"
        ],
        "description": "Perry's simple reverberator class. This class is based on some of the famous Stanford/CCRMA reverbs (NRev, KipRev), which were based on the Chowning/Moorer/Schroeder reverberators using networks of simple allpass and comb delay filters. This class implements two series allpass units and two parallel comb filters. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Perry Cook's Simple Reverberator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#PRCRev)"
    },
    "Pan16": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>pan</span>**(float arg) Set pan position [0-16].",
            "float **<span style='color:#006AB1;'>pan</span>**() Get pan position [0-16]."
        ],
        "examples": [],
        "description": "Sixteen-channel equal-power panner.",
        "title": "**16-Channel Panner**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Pan16)"
    },
    "Pan2": {
        "functions": [],
        "examples": [
            "Examples: \t [chirp2.ck](https://chuck.stanford.edu/doc/examples/basic/chirp2.ck), [array.ck](https://chuck.stanford.edu/doc/examples/stereo/array.ck), [powerup2.ck](https://chuck.stanford.edu/doc/examples/stereo/powerup2.ck), [moe2.ck](https://chuck.stanford.edu/doc/examples/stereo/moe2.ck), [larry2.ck](https://chuck.stanford.edu/doc/examples/stereo/larry2.ck), [curly2.ck](https://chuck.stanford.edu/doc/examples/stereo/curly2.ck), [ugen-array.ck](https://chuck.stanford.edu/doc/examples/stereo/ugen-array.ck), [stereo-noise.ck](https://chuck.stanford.edu/doc/examples/stereo/stereo-noise.ck), [honkeytonk-algo1.ck](https://chuck.stanford.edu/doc/examples/stk/honkeytonk-algo1.ck), [hanoi++.ck](https://chuck.stanford.edu/doc/examples/hanoi++.ck), [hanoi2.ck](https://chuck.stanford.edu/doc/examples/hanoi2.ck), [hanoi3.ck](https://chuck.stanford.edu/doc/examples/hanoi3.ck)"
        ],
        "description": "A mono-to-stereo unit generator for stereo panning.",
        "title": "**Stereo Panner**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Pan2)"
    },
    "Pan4": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>pan</span>**(float arg) Set pan position [0-4].",
            "float **<span style='color:#006AB1;'>pan</span>**() Get pan position [0-4]."
        ],
        "examples": [
            "Examples: \t [Pan4.ck](https://chuck.stanford.edu/doc/examples/spatial/Pan4.ck)"
        ],
        "description": "Four-channel equal-power panner.",
        "title": "**4-Channel Panner**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Pan4)"
    },
    "Pan8": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>pan</span>**(float arg) Set pan position [0-8].",
            "float **<span style='color:#006AB1;'>pan</span>**() Get pan position [0-8]."
        ],
        "examples": [
            "Examples: \t [Pan8.ck](https://chuck.stanford.edu/doc/examples/spatial/Pan8.ck)"
        ],
        "description": "Eight-channel equal-power panner.",
        "title": "**8-Channel Panner**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Pan8)"
    },
    "PercFlut": {
        "functions": [],
        "examples": [
            "Examples: \t [ctrl_sequencer.ck](https://chuck.stanford.edu/doc/examples/ctrl/ctrl_sequencer.ck)"
        ],
        "description": "STK percussive flute FM synthesis instrument. This class implements algorithm 4 of the TX81Z. Algorithm 4 is : 4->3--\\ ___2-- + -->1-->Out Control Change Numbers: - Total Modulator Index = 2 (.controlOne) - Modulator Crossfade = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Percussive Flute**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#PercFlut)"
    },
    "Phasor": {
        "functions": [],
        "examples": [
            "Examples: \t [phasor.ck](https://chuck.stanford.edu/doc/examples/basic/phasor.ck)"
        ],
        "description": "A phasor oscillator; linearly rises from 0 to 1; can be used as a phase control.",
        "title": "**Phasor Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Phasor)"
    },
    "PitShift": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>effectMix</span>**(float value) Set effect mix level.",
            "float **<span style='color:#006AB1;'>effectMix</span>**() Get effect mix level.",
            "float **<span style='color:#006AB1;'>mix</span>**(float value) Set mix level.",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix level.",
            "float **<span style='color:#006AB1;'>shift</span>**(float value) Set degree of pitch shifting.",
            "float **<span style='color:#006AB1;'>shift</span>**() Get degree of pitch shifting."
        ],
        "examples": [
            "Examples: \t [pitch-shift.ck](https://chuck.stanford.edu/doc/examples/effects/pitch-shift.ck)"
        ],
        "description": "This class implements a simple pitch shifter using delay lines. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Pitch Shifter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#PitShift)"
    },
    "PitchTrack": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>bias</span>**(float arg) Set the bias. Katja's pitch tracker introduces a small bias to help with the tracking. See the link above.",
            "float **<span style='color:#006AB1;'>bias</span>**() Get the bias. Katja's pitch tracker introduces a small bias to help with the tracking. See the link above.",
            "float **<span style='color:#006AB1;'>fidelity</span>**(float arg) Set the threshold for certainty about the result. A highly periodic signal (i.e. one that has a strong pitch center) should produce a result with a high fidelity, which a non-periodic signal (eg noise) will have a very low fidelity. Setting this parameter close to 1 should reduce the number of inaccurate reports. [0-1], default 0.95.",
            "float **<span style='color:#006AB1;'>fidelity</span>**() Get the threshold for certainty about the result. A highly periodic signal (i.e. one that has a strong pitch center) should produce a result with a high fidelity, which a non-periodic signal (eg noise) will have a very low fidelity. Setting this parameter close to 1 should reduce the number of inaccurate reports. [0-1], default 0.95.",
            "int **<span style='color:#006AB1;'>frame</span>**(int arg) Set size of FFT frame for analysis. Smaller values result in lower latency and high responsiveness but less accuracy. Higher values result in considerably greater CPU load. Values that aren't powers of 2 get rounded up to the next power of 2. Recommend 512, 1024, or 2048. [128-?], default 2048.",
            "int **<span style='color:#006AB1;'>frame</span>**() Get size of FFT frame for analysis. Smaller values result in lower latency and high responsiveness but less accuracy. Higher values result in considerably greater CPU load. Values that aren't powers of 2 get rounded up to the next power of 2. Recommend 512, 1024, or 2048. [128-?], default 2048.",
            "float **<span style='color:#006AB1;'>get</span>**() Get calculated frequency.",
            "int **<span style='color:#006AB1;'>overlap</span>**(int arg) Set how much to overlap successive analysis frames. Higher values should produce smoother values, at the cost of an increase of CPU load. [1-?], default 2.",
            "int **<span style='color:#006AB1;'>overlap</span>**() Get how much to overlap successive analysis frames. Higher values should produce smoother values, at the cost of an increase of CPU load. [1-?], default 2.",
            "float **<span style='color:#006AB1;'>sensitivity</span>**(float arg) Set the minimum RMS value to trigger a pitch calculation. Setting this parameter low forces PitchTrack to attempt to find the pitch of even very quiet sounds. Higher values will cause it to trigger only on louder notes. [0-1], default 0.003.",
            "float **<span style='color:#006AB1;'>sensitivity</span>**() Get the minimum RMS value to trigger a pitch calculation. Setting this parameter low forces PitchTrack to attempt to find the pitch of even very quiet sounds. Higher values will cause it to trigger only on louder notes. [0-1], default 0.003."
        ],
        "examples": [
            "Examples: \t [autotune.ck](https://chuck.stanford.edu/doc/examples/effects/autotune.ck), [PitchTrack.ck](https://chuck.stanford.edu/doc/examples/analysis/PitchTrack.ck)"
        ],
        "description": "PitchTrack is a monophonic autocorrelation pitch tracker with a fast response and extremely high accuracy, even at low frequencies. It is adapted from [helmholtz~] for Pd by Katja, documented at http://www.katjaas.nl/helmholtz/helmholtz.html.",
        "title": "**Pitch Tracker**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#PitchTrack)"
    },
    "PoleZero": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>a1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>allpass</span>**(float value) Set allpass filter with given coefficient.",
            "float **<span style='color:#006AB1;'>allpass</span>**() Get allpass filter with given coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>blockZero</span>**(float value) Set DC blocking filter with given pole position.",
            "float **<span style='color:#006AB1;'>blockZero</span>**() Get DC blocking filter with given pole position."
        ],
        "examples": [
            "Examples: \t [dcblocker.ck](https://chuck.stanford.edu/doc/examples/filter/dcblocker.ck), [plu2.ck](https://chuck.stanford.edu/doc/examples/deep/plu2.ck), [plu3.ck](https://chuck.stanford.edu/doc/examples/deep/plu3.ck), [flute.ck](https://chuck.stanford.edu/doc/examples/stk/flute.ck), [pitch-track.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/pitch-track.ck), [pitch-third.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/pitch-third.ck), [pitch-fifth.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/pitch-fifth.ck), [pitch-seventh.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/pitch-seventh.ck), [Tracking.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/Tracking.ck)"
        ],
        "description": "A one-pole, one-zero digital filter. A method is provided for creating an allpass filter with a given coefficient. Another method is provided to create a DC blocking filter. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Pole-Zero Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#PoleZero)"
    },
    "PowerADSR": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>attack</span>**(dur attackDuration) Sets duration of the attack phase.",
            "float **<span style='color:#006AB1;'>attackCurve</span>**(float attackCurve) Sets envelope curve of the attack phase.",
            "float **<span style='color:#006AB1;'>attackCurve</span>**() Gets the attack curve.",
            "dur **<span style='color:#006AB1;'>attackTime</span>**(dur attackDuration) Sets duration of the attack phase.",
            "dur **<span style='color:#006AB1;'>attackTime</span>**() Gets the attack duration.",
            "dur **<span style='color:#006AB1;'>decay</span>**(dur decayDuration) Sets duration of the decay phase.",
            "float **<span style='color:#006AB1;'>decayCurve</span>**(float decayCurve) Sets envelope curve of the decay phase.",
            "float **<span style='color:#006AB1;'>decayCurve</span>**() Gets the decay curve.",
            "dur **<span style='color:#006AB1;'>decayTime</span>**(dur decayDuration) Sets duration of the decay phase.",
            "dur **<span style='color:#006AB1;'>decayTime</span>**() Gets the decay duration.",
            "int **<span style='color:#006AB1;'>keyOff</span>**() Begins the release phase of the envelope.",
            "int **<span style='color:#006AB1;'>keyOff</span>**(int keyOff) Begins the release phase of the envelope.",
            "int **<span style='color:#006AB1;'>keyOn</span>**() Begins the attack phase of the envelope.",
            "int **<span style='color:#006AB1;'>keyOn</span>**(int keyOn) Begins the attack phase of the envelope.",
            "dur **<span style='color:#006AB1;'>release</span>**(dur releaseDuration) Sets duration of the release phase.",
            "float **<span style='color:#006AB1;'>releaseCurve</span>**(float releaseCurve) Sets envelope curve of the release phase.",
            "float **<span style='color:#006AB1;'>releaseCurve</span>**() Gets the release curve.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**(dur releaseDuration) Sets duration of the release phase.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**() Gets the release duration.",
            "void **<span style='color:#006AB1;'>set</span>**(dur attackDuration, dur decayDuration, float sustainLevel, dur releaseDuration) Sets duration of the attack, decay, and release phases; as well as the sustain level (ADSR order).",
            "void **<span style='color:#006AB1;'>setCurves</span>**(float attackCurve, float decayCurve, float releaseCurve) Sets envelope curves of the attack, decay, and release phases.",
            "int **<span style='color:#006AB1;'>state</span>**() Gets current state.",
            "float **<span style='color:#006AB1;'>sustainLevel</span>**(float sustainLevel) Sets sustain level.",
            "float **<span style='color:#006AB1;'>sustainLevel</span>**() Gets sustain level.",
            "float **<span style='color:#006AB1;'>value</span>**() Gets current envelope value."
        ],
        "examples": [
            "Examples: \t [PowerADSR-feedback-beatings.ck](https://chuck.stanford.edu/doc/examples/effects/PowerADSR-feedback-beatings.ck), [PowerADSR.ck](https://chuck.stanford.edu/doc/examples/effects/PowerADSR.ck)"
        ],
        "description": "ADSR envelope that uses a power function to create curved envelope phases. In general, curves under 1.0 are sharp, while curves over 1.0 are soft.",
        "title": "**Power ADSR Envelope**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#PowerADSR)"
    },
    "PulseOsc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "float **<span style='color:#006AB1;'>width</span>**(float width) Set width of duty cycle [0,1).",
            "float **<span style='color:#006AB1;'>width</span>**() Get width of duty cycle [0,1)/."
        ],
        "examples": [
            "Examples: \t [pulse.ck](https://chuck.stanford.edu/doc/examples/basic/pulse.ck)"
        ],
        "description": "A pulse width oscillator.",
        "title": "**Pulse Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#PulseOsc)"
    },
    "RMS": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input) Manually computes the RMS from a float array."
        ],
        "examples": [
            "Examples: \t [rms.ck](https://chuck.stanford.edu/doc/examples/ai/features/rms.ck)"
        ],
        "description": "A unit analyzer that computes the root-mean-square (RMS) power mean from a magnitude spectrum (either from an incoming UAna, or given manually), and outputs a single number.",
        "title": "**Root Mean Square**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#RMS)"
    },
    "RegEx": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>match</span>**(string pattern, string str) Return true if match for pattern is found in str, false otherwise.",
            "int **<span style='color:#006AB1;'>match</span>**(string pattern, string str, string[] matches) Return the match and sub-patterns in matches. matches[0] in the entire matched pattern, matches[1] is the first sub-pattern (if any), and so on.",
            "string **<span style='color:#006AB1;'>replace</span>**(string pattern, string replacement, string str) Replace the first instance of pattern in str with replacement, returning the result.",
            "string **<span style='color:#006AB1;'>replaceAll</span>**(string pattern, string replacement, string str) Replace all instances of pattern in str with replacement, returning the result."
        ],
        "examples": [],
        "description": "Class for regular expression matching and replacing in strings. Regex style is POSIX-extended.",
        "title": "**Regular Expression**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#RegEx)"
    },
    "ResonZ": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>Q</span>**(float val) Set filter resonance.",
            "float **<span style='color:#006AB1;'>Q</span>**() Get filter resonance.",
            "float **<span style='color:#006AB1;'>freq</span>**(float val) Set filter center frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter center frequency.",
            "void **<span style='color:#006AB1;'>set</span>**(float freq, float Q) Set filter frequency and resonance at the same time."
        ],
        "examples": [
            "Examples: \t [resonz.ck](https://chuck.stanford.edu/doc/examples/filter/resonz.ck)"
        ],
        "description": "A resonance filter with equal-gain zeros; keeps gain under control independent of frequency.",
        "title": "**Resonant Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#ResonZ)"
    },
    "Rhodey": {
        "functions": [],
        "examples": [
            "Examples: \t [rhodey.ck](https://chuck.stanford.edu/doc/examples/stk/rhodey.ck)"
        ],
        "description": "STK Fender Rhodes-like electric piano FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is : 4->3-- + --> Out 2->1-- Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Rhodes Piano**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Rhodey)"
    },
    "RollOff": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>percent</span>**(float percent) Set the percentage for computing rolloff.",
            "float **<span style='color:#006AB1;'>percent</span>**() Get the percentage specified for the rolloff.",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input, float percent) Manually computes the rolloff from a float array."
        ],
        "examples": [
            "Examples: \t [rolloff.ck](https://chuck.stanford.edu/doc/examples/ai/features/rolloff.ck), [rolloff2.ck](https://chuck.stanford.edu/doc/examples/ai/features/rolloff2.ck)"
        ],
        "description": "A unit analyzer that computes the spectral rolloff from a magnitude spectrum (either from incoming UAna, or given manually), and outputs a single number.",
        "title": "**Spectral Rolloff**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#RollOff)"
    },
    "SFM": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input, float[] output) Manually computes the SFM of the input (an FFT spectrum), and stores the results in the output array (SFM coefficients).",
            "int **<span style='color:#006AB1;'>nrBands</span>**(int nr_bands) Set the number of frequency bands to use for SFM analysis.",
            "int **<span style='color:#006AB1;'>nrBands</span>**() Get the number of frequency bands to use for SFM analysis."
        ],
        "examples": [
            "Examples: \t [sfm.ck](https://chuck.stanford.edu/doc/examples/ai/features/sfm.ck)"
        ],
        "description": "A unit analyzer that computes the Spectral Flatness Measure (SFM) from a magnitude spectrum (either from an incoming UAna, or given manually), and outputs a single number.",
        "title": "**Spectral Flatness Measure**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#SFM)"
    },
    "SVM": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>predict</span>**(float[] x, float[] y) Predict the output 'y' given the input 'x'.",
            "int **<span style='color:#006AB1;'>train</span>**(float[][] x, float[][] y) Train the SVM model with the given samples 'x' and 'y'."
        ],
        "examples": [
            "Examples: \t [svm-basic.ck](https://chuck.stanford.edu/doc/examples/ai/svm/svm-basic.ck)"
        ],
        "description": "A support vector machine (SVM) utility trains a model and predicts output based on new input.",
        "title": "**Support Vector Machine**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#SVM)"
    },
    "SawOsc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "float **<span style='color:#006AB1;'>width</span>**(float width) Whether sawtooth wave is to fall (0) or rise (1).",
            "float **<span style='color:#006AB1;'>width</span>**() Whether sawtooth wave is to fall (0) or rise (1)."
        ],
        "examples": [
            "Examples: \t [thx.ck](https://chuck.stanford.edu/doc/examples/deep/thx.ck), [oscillatronx.ck](https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck)"
        ],
        "description": "Sawtooth wave oscillator.",
        "title": "**Sawtooth Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#SawOsc)"
    },
    "Saxofony": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>aperture</span>**(float value) Set reed aperture, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>aperture</span>**() Get reed aperture, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>blowPosition</span>**(float value) Set lip stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>blowPosition</span>**() Get lip stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>noiseGain</span>**(float value) Set noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>noiseGain</span>**() Get noise component gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**(float value) Set pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pressure</span>**() Get pressure, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>rate</span>**() Get rate of attack (seconds).",
            "float **<span style='color:#006AB1;'>startBlowing</span>**(float value) Start blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stiffness</span>**(float value) Set reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stiffness</span>**() Get reed stiffness, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stopBlowing</span>**(float value) Stop blowing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [saxofony.ck](https://chuck.stanford.edu/doc/examples/stk/saxofony.ck)"
        ],
        "description": "This class implements a 'hybrid' digital waveguide instrument that can generate a variety of wind-like sounds. It has also been referred to as the 'blowed string' model. The waveguide section is essentially that of a string, with one rigid and one lossy termination. The non-linear function is a reed table. The string can be 'blown' at any point between the terminations, though just as with strings, it is impossible to excite the system at either end. If the excitation is placed at the string mid-point, the sound is that of a clarinet. At points closer to the 'bridge', the sound is closer to that of a saxophone. See Scavone (2002) for more details. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Reed Stiffness = 2 - Reed Aperture = 26 - Noise Gain = 4 - Blow Position = 11 - Vibrato Frequency = 29 - Vibrato Gain = 1 - Breath Pressure = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Saxophone**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Saxofony)"
    },
    "SerialIO": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>baudRate</span>**(int r) Set baud rate.",
            "int **<span style='color:#006AB1;'>baudRate</span>**() Get current baud rate.",
            "void **<span style='color:#006AB1;'>close</span>**() No description available",
            "int **<span style='color:#006AB1;'>dataAvailable</span>**() No description available",
            "void **<span style='color:#006AB1;'>flush</span>**() Flush the IO buffer.",
            "int **<span style='color:#006AB1;'>getByte</span>**() Get next requested byte.",
            "int[] **<span style='color:#006AB1;'>getBytes</span>**() Get next requested number of bytes.",
            "int[] **<span style='color:#006AB1;'>getInts</span>**() Get next requested number of integers.",
            "string **<span style='color:#006AB1;'>getLine</span>**() Get next requested line.",
            "SerialIO **<span style='color:#006AB1;'>onByte</span>**() Wait for one byte (binary mode only).",
            "SerialIO **<span style='color:#006AB1;'>onBytes</span>**(int num) Wait for requested number of bytes (binary mode only).",
            "SerialIO **<span style='color:#006AB1;'>onFloats</span>**(int num) Wait for requested number of floats (ASCII or binary mode).",
            "SerialIO **<span style='color:#006AB1;'>onInts</span>**(int num) Wait for requested number of ints (ASCII or binary mode).",
            "SerialIO **<span style='color:#006AB1;'>onLine</span>**() Wait for one line (ASCII mode only).",
            "int **<span style='color:#006AB1;'>open</span>**(int i, int baud, int mode) Open serial device i with specified baud rate and mode (binary or ASCII).",
            "string **<span style='color:#006AB1;'>readLine</span>**() No description available",
            "void **<span style='color:#006AB1;'>writeByte</span>**(int b) Write a single byte.",
            "void **<span style='color:#006AB1;'>writeBytes</span>**(int[] b) Write array of bytes.",
            "string[] **<span style='color:#006AB1;'>list</span>**() Get list of available serial devices."
        ],
        "examples": [
            "Examples: \t [byte.ck](https://chuck.stanford.edu/doc/examples/serial/byte.ck), [bytes.ck](https://chuck.stanford.edu/doc/examples/serial/bytes.ck), [ints-bin.ck](https://chuck.stanford.edu/doc/examples/serial/ints-bin.ck), [ints-ascii.ck](https://chuck.stanford.edu/doc/examples/serial/ints-ascii.ck), [lines.ck](https://chuck.stanford.edu/doc/examples/serial/lines.ck), [list.ck](https://chuck.stanford.edu/doc/examples/serial/list.ck), [write-bytes.ck](https://chuck.stanford.edu/doc/examples/serial/write-bytes.ck), [write.ck](https://chuck.stanford.edu/doc/examples/serial/write.ck)"
        ],
        "description": "Serial input/output. popularly used to communicate with systems like Arduino.",
        "title": "**Serial Input/Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/io.html#SerialIO)"
    },
    "Shakers": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>decay</span>**(float value) Set system decay, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>decay</span>**() Get system decay, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>energy</span>**(float value) Set shake energy, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>energy</span>**() Get shake energy, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set frequency (Hz).",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency (Hz).",
            "float **<span style='color:#006AB1;'>noteOff</span>**(float value) Trigger note off.",
            "float **<span style='color:#006AB1;'>noteOn</span>**(float value) Trigger note on.",
            "float **<span style='color:#006AB1;'>objects</span>**(float value) Set number of objects, [0.0-128.0].",
            "float **<span style='color:#006AB1;'>objects</span>**() Get number of objects, [0.0-128.0].",
            "int **<span style='color:#006AB1;'>preset</span>**(int value) Set instrument, [0-22] (see above).",
            "int **<span style='color:#006AB1;'>preset</span>**() Get instrument, [0-22] (see above).",
            "int **<span style='color:#006AB1;'>which</span>**(int value) Set instrument, [0-22] (see above).",
            "int **<span style='color:#006AB1;'>which</span>**() Get instrument, [0-22] (see above)."
        ],
        "examples": [
            "Examples: \t [shake-cycle.ck](https://chuck.stanford.edu/doc/examples/stk/shake-cycle.ck), [shake-o-matic.ck](https://chuck.stanford.edu/doc/examples/stk/shake-o-matic.ck)"
        ],
        "description": "PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects. This class is a meta-model that can simulate a Maraca, Sekere, Cabasa, Bamboo Wind Chimes, Water Drops, Tambourine, Sleighbells, and a Guiro. PhOLIES (Physically-Oriented Library of Imitated Environmental Sounds) is a similar approach for the synthesis of environmental sounds. This class implements simulations of breaking sticks, crunchy snow (or not), a wrench, sandpaper, and more. Control Change Numbers: - Shake Energy = 2 - System Decay = 4 - Number Of Objects = 11 - Resonance Frequency = 1 - Shake Energy = 128 - Instrument Selection = 1071 - Maraca = 0 - Cabasa = 1 - Sekere = 2 - Guiro = 3 - Water Drops = 4 - Bamboo Chimes = 5 - Tambourine = 6 - Sleigh Bells = 7 - Sticks = 8 - Crunch = 9 - Wrench = 10 - Sand Paper = 11 - Coke Can = 12 - Next Mug = 13 - Penny + Mug = 14 - Nickle + Mug = 15 - Dime + Mug = 16 - Quarter + Mug = 17 - Franc + Mug = 18 - Peso + Mug = 19 - Big Rocks = 20 - Little Rocks = 21 - Tuned Bamboo Chimes = 22 by Perry R. Cook, 1996 - 1999.",
        "title": "**STK Shakers**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Shakers)"
    },
    "Shred": {
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>arg</span>**(int index) Get the Shred argument at the specified index.",
            "int **<span style='color:#006AB1;'>args</span>**() Get the number of arguments provided to the Shred.",
            "int **<span style='color:#006AB1;'>childMemSize</span>**(int sizeInBytes) Set size hint of per-shred call stack (\"mem\") for children shreds subsequently sporked from the calling shred (NOTE this size hint does not affect the calling shred--only its descendants); if sizeInBytes <= 0, the size hint is set to the VM default. (FYI This is an arcane functionality that most programmers never need to worry about. Advanced usage: set size hint to small values (e.g., 1K) to support A LOT (e.g., >10000) of simultaneous shreds; set size hint to large values (e.g., >65K) to spork functions with extremely deep recursion, or to support A LOT (>10000) of declared local variables. Use with care.)",
            "int **<span style='color:#006AB1;'>childMemSize</span>**() Get the memory stack size hint (in bytes) for shreds sporked from this one.",
            "int **<span style='color:#006AB1;'>childRegSize</span>**(int sizeInBytes) Set size hint of per-shred operand stack (\"reg\") for children shreds subsequently sporked from the calling shred (NOTE this size hint does not affect the calling shred--only its descendants); if sizeInBytes <= 0, the size hint is set to the VM default. (FYI This is an arcane functionality that most programmers never need to worry about. Advanced usage: set size hint to small values (e.g., 256 bytes) to support A LOT (>10000) of simultaneous shreds; set size hint to large values (e.g., >20K) to spork functions with extremely lengthy (>10000) statements, including array initializer lists. Use with care.)",
            "int **<span style='color:#006AB1;'>childRegSize</span>**() Get the operand stack size hint (in bytes) for shreds sporked from this one.",
            "string **<span style='color:#006AB1;'>dir</span>**() Get the enclosing directory of the source file from which this Shred's code is derived (same as .sourceDir()).",
            "string **<span style='color:#006AB1;'>dir</span>**(int levelsUp) Get the enclosing directory, the specified number of parent directories up.",
            "int **<span style='color:#006AB1;'>done</span>**() Has the Shred reached the end of its execution?",
            "void **<span style='color:#006AB1;'>exit</span>**() Halt the shred's operation and remove it from the virtual machine.",
            "int **<span style='color:#006AB1;'>id</span>**() Get the unique numeric id of the Shred.",
            "string **<span style='color:#006AB1;'>path</span>**() Get the path of the source file from which this Shred's code is derived (same as .sourcePath()).",
            "int **<span style='color:#006AB1;'>running</span>**() Is the Shred currently actively running in the VM?",
            "string **<span style='color:#006AB1;'>sourceDir</span>**() Get the enclosing directory of the source file from which this Shred's code is derived (same as .dir()).",
            "string **<span style='color:#006AB1;'>sourcePath</span>**() Get the path of the source file from which this Shred's code is derived (same as .path()).",
            "void **<span style='color:#006AB1;'>yield</span>**() Cause the current Shred to temporarily suspend without advancing time, allowing other simultaneously schreduled shreds to run as needed. NOTE: yield() is equivalent to '0::second +=> now;'",
            "Shred **<span style='color:#006AB1;'>ancestor</span>**() Get the calling shred's \"ancestor\" shred (i.e., the top-level shred). Returns itself if the calling shred is the top-level shred. (Related: see Shred.parent())",
            "Shred **<span style='color:#006AB1;'>fromId</span>**(int id) Get Shred corresponding to a Shred ID.",
            "Shred **<span style='color:#006AB1;'>parent</span>**() Get the calling shred's parent shred (i.e., the shred that sporked the calling shred). Returns null if there is no parent Shred. (Related: see Shred.ancestor())"
        ],
        "examples": [
            "Examples: \t [spork.ck](https://chuck.stanford.edu/doc/examples/shred/spork.ck), [spork2.ck](https://chuck.stanford.edu/doc/examples/shred/spork2.ck), [spork2-exit.ck](https://chuck.stanford.edu/doc/examples/shred/spork2-exit.ck), [spork2-remove.ck](https://chuck.stanford.edu/doc/examples/shred/spork2-remove.ck), [powerup.ck](https://chuck.stanford.edu/doc/examples/shred/powerup.ck), [broadcast.ck](https://chuck.stanford.edu/doc/examples/event/broadcast.ck), [signal.ck](https://chuck.stanford.edu/doc/examples/event/signal.ck), [signal4.ck](https://chuck.stanford.edu/doc/examples/event/signal4.ck), [parent.ck](https://chuck.stanford.edu/doc/examples/shred/parent.ck), [ancestor.ck](https://chuck.stanford.edu/doc/examples/shred/ancestor.ck)"
        ],
        "description": "A strongly-timed ChucK thread of execution.",
        "title": "**ChucK Shred Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Shred)"
    },
    "Sigmund": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>amp</span>**(int amp) Report amplitude of nth sinusoundal peak sorting depends on parameter \"tracks.\"",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear buffers and reset.",
            "float **<span style='color:#006AB1;'>env</span>**() Get reported RMS value (in dB) of input signal.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get reported frequency of input signal.",
            "float **<span style='color:#006AB1;'>maxfreq</span>**(float arg) Set maximum frequency of sinusoidal peaks to look for. This can be useful in situations where background noise creates high-frequency, spurious peaks...",
            "float **<span style='color:#006AB1;'>minpower</span>**(float arg) Set the minimum dB level to report a pitch. Signals quieter than this will be assumed to be crosstalk and ignored. default: 50.",
            "int **<span style='color:#006AB1;'>npeak</span>**(int npeak) Set the maximum number of sinusoidal peaks to look for. The computation time is quadratic in the number of peaks actually found (this number only sets an upper limit). Use it to balance CPU time with quality of results.",
            "int **<span style='color:#006AB1;'>npts</span>**(int npts) Set the number of points used in analysis. Must be a power of 2, at least 128. The minimum frequency that can be tracked is about 2 * samplerate / npts. Default: 1024.",
            "float **<span style='color:#006AB1;'>param1</span>**(float arg) Mysterious setting...",
            "float **<span style='color:#006AB1;'>param2</span>**(float arg) Mysterious setting...",
            "float **<span style='color:#006AB1;'>param3</span>**(float arg) Mysterious setting...",
            "float **<span style='color:#006AB1;'>peak</span>**(int peak) Report freq of nth sinusoundal peak sorting. Depends on parameter \"tracks.\"",
            "dur **<span style='color:#006AB1;'>stabletime</span>**(dur stabletime) Set period of stability needed for note. Not implemented.",
            "int **<span style='color:#006AB1;'>tracks</span>**(int tracks) Toggle whether peak and amp are sorted in order of amplitude or organized into tracks. Default false."
        ],
        "examples": [
            "Examples: \t [Sigmund.ck](https://chuck.stanford.edu/doc/examples/analysis/Sigmund.ck)"
        ],
        "description": "Sinusoidal analysis & pitch tracking. Adapted from Miller Puckette’s sigmund~ Max object.",
        "title": "**Pitch Tracking UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Sigmund)"
    },
    "SinOsc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode."
        ],
        "examples": [
            "Examples: \t [otf_05.ck](https://chuck.stanford.edu/doc/examples/otf_05.ck), [otf_06.ck](https://chuck.stanford.edu/doc/examples/otf_06.ck), [foo.ck](https://chuck.stanford.edu/doc/examples/basic/foo.ck), [bar.ck](https://chuck.stanford.edu/doc/examples/basic/bar.ck), [chirp.ck](https://chuck.stanford.edu/doc/examples/basic/chirp.ck), [alarm.ck](https://chuck.stanford.edu/doc/examples/basic/alarm.ck), [whirl.ck](https://chuck.stanford.edu/doc/examples/basic/whirl.ck), [fft.ck](https://chuck.stanford.edu/doc/examples/analysis/fft.ck)"
        ],
        "description": "A sine wave oscillator.",
        "title": "**Sine Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#SinOsc)"
    },
    "Sitar": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>pluck</span>**(float value) Pluck string."
        ],
        "examples": [
            "Examples: \t [sitar.ck](https://chuck.stanford.edu/doc/examples/stk/sitar.ck)"
        ],
        "description": "This class implements a sitar plucked string physical model based on the Karplus-Strong algorithm. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. There exist at least two patents, assigned to Stanford, bearing the names of Karplus and/or Strong. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Sitar**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Sitar)"
    },
    "SndBuf": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>channel</span>**(int channel) For sound file containing more than one channel of audio, select the channel to play.",
            "int **<span style='color:#006AB1;'>channel</span>**() Get the selected chanel of audio this buffer is playing.",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels available in the sound file.",
            "int **<span style='color:#006AB1;'>chunks</span>**(int frames) Set chunk size, in frames, for loading the file from disk. Set to 0 to disable chunking.",
            "int **<span style='color:#006AB1;'>chunks</span>**() Get chunk size, in frames, for loading the file from disk. 0 indicates that chunking is disabled.",
            "int **<span style='color:#006AB1;'>frames</span>**() Get total number of sample frames in the file; same as .samples().",
            "float **<span style='color:#006AB1;'>freq</span>**(float freq) Set loop rate (in file loops per second).",
            "float **<span style='color:#006AB1;'>freq</span>**() Get loop rate (in file loops per second).",
            "int **<span style='color:#006AB1;'>interp</span>**(int interp) Set interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation.",
            "int **<span style='color:#006AB1;'>interp</span>**() Get interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation.",
            "dur **<span style='color:#006AB1;'>length</span>**() Get total length of the file as a duration.",
            "int **<span style='color:#006AB1;'>loop</span>**(int loop) Toggle looping file playback.",
            "int **<span style='color:#006AB1;'>loop</span>**() Get whether file playback is set to loop.",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set phase position, normalized to [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get phase position, normalized to [0,1).",
            "float **<span style='color:#006AB1;'>phaseOffset</span>**(float value) Advance the playhead by the specified phase offset in [0,1), where 0 is no advance and 1 advance the entire length of the file.",
            "float **<span style='color:#006AB1;'>play</span>**(float play) (same as .rate)",
            "float **<span style='color:#006AB1;'>play</span>**() (same as .rate)",
            "int **<span style='color:#006AB1;'>pos</span>**(int pos) Set play position (between 0 and number of samples).",
            "int **<span style='color:#006AB1;'>pos</span>**() Get play position (between 0 and number of samples).",
            "float **<span style='color:#006AB1;'>rate</span>**(float rate) Set playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast.",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast.",
            "string **<span style='color:#006AB1;'>read</span>**(string read) Read file for reading.",
            "int **<span style='color:#006AB1;'>ready</span>**() Query whether the SndBuf is ready for use (e.g., sound file successfully loaded).",
            "int **<span style='color:#006AB1;'>samples</span>**() Get total number of sample frames in the file; same as .frames().",
            "float **<span style='color:#006AB1;'>valueAt</span>**(int pos) Get sample value at given position (in samples).",
            "string **<span style='color:#006AB1;'>write</span>**(string read) Set file for writing (currently unsupported)."
        ],
        "examples": [
            "Examples: \t [sndbuf.ck](https://chuck.stanford.edu/doc/examples/basic/sndbuf.ck), [doh.ck](https://chuck.stanford.edu/doc/examples/basic/doh.ck), [valueat.ck](https://chuck.stanford.edu/doc/examples/basic/valueat.ck), [otf_01.ck](https://chuck.stanford.edu/doc/examples/otf_01.ck), [otf_02.ck](https://chuck.stanford.edu/doc/examples/otf_02.ck), [otf_03.ck](https://chuck.stanford.edu/doc/examples/otf_03.ck), [otf_04.ck](https://chuck.stanford.edu/doc/examples/otf_04.ck)"
        ],
        "description": "An interpolating sound buffer/player with single-channel output; can read audio data from a variety of uncompressed formats.",
        "title": "**Sound Buffer Player**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#SndBuf)"
    },
    "SndBuf2": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>channel</span>**(int channel) For sound file containing more than one channel of audio, select the channel to play.",
            "int **<span style='color:#006AB1;'>channel</span>**() Get the selected chanel of audio this buffer is playing.",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels available in the sound file.",
            "int **<span style='color:#006AB1;'>chunks</span>**(int frames) Set chunk size, in frames, for loading the file from disk. Set to 0 to disable chunking.",
            "int **<span style='color:#006AB1;'>chunks</span>**() Get chunk size, in frames, for loading the file from disk. 0 indicates that chunking is disabled.",
            "int **<span style='color:#006AB1;'>frames</span>**() Get total number of sample frames in the file; same as .samples().",
            "float **<span style='color:#006AB1;'>freq</span>**(float freq) Set loop rate (in file loops per second).",
            "float **<span style='color:#006AB1;'>freq</span>**() Get loop rate (in file loops per second).",
            "int **<span style='color:#006AB1;'>interp</span>**(int interp) Set interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation.",
            "int **<span style='color:#006AB1;'>interp</span>**() Get interpolation mode: (0) drop sample; (1) linear interpolation; (2) sinc interpolation.",
            "dur **<span style='color:#006AB1;'>length</span>**() Get total length of the file as a duration.",
            "int **<span style='color:#006AB1;'>loop</span>**(int loop) Toggle looping file playback.",
            "int **<span style='color:#006AB1;'>loop</span>**() Get whether file playback is set to loop.",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set phase position, normalized to [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get phase position, normalized to [0,1).",
            "float **<span style='color:#006AB1;'>phaseOffset</span>**(float value) Advance the playhead by the specified phase offset in [0,1), where 0 is no advance and 1 advance the entire length of the file.",
            "float **<span style='color:#006AB1;'>play</span>**(float play) (same as .rate)",
            "float **<span style='color:#006AB1;'>play</span>**() (same as .rate)",
            "int **<span style='color:#006AB1;'>pos</span>**(int pos) Set play position (between 0 and number of samples).",
            "int **<span style='color:#006AB1;'>pos</span>**() Get play position (between 0 and number of samples).",
            "float **<span style='color:#006AB1;'>rate</span>**(float rate) Set playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast.",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate (relative to file's natural speed). For example, 1.0 is 'normal', 0.5 is half speed, and 2 is twice as fast.",
            "string **<span style='color:#006AB1;'>read</span>**(string read) Read file for reading.",
            "int **<span style='color:#006AB1;'>ready</span>**() Query whether the SndBuf is ready for use (e.g., sound file successfully loaded).",
            "int **<span style='color:#006AB1;'>samples</span>**() Get total number of sample frames in the file; same as .frames().",
            "float **<span style='color:#006AB1;'>valueAt</span>**(int pos) Get sample value at given position (in samples).",
            "string **<span style='color:#006AB1;'>write</span>**(string read) Set file for writing (currently unsupported)."
        ],
        "examples": [],
        "description": "An interpolating sound buffer with two-channel output. Reads from a variety of uncompressed formats.",
        "title": "**Sound Buffer Player (Stereo)**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#SndBuf2)"
    },
    "Spectacle": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>bands</span>**(int arg) Set number of frequency bands, [1 - 512], default 64.",
            "int **<span style='color:#006AB1;'>bands</span>**() Get number of frequency bands, [1 - 512], default 64.",
            "void **<span style='color:#006AB1;'>clear</span>**() Reset Spectacle.",
            "dur **<span style='color:#006AB1;'>delay</span>**(dur delay) Set the same delay duration for all bands.",
            "dur **<span style='color:#006AB1;'>delayMax</span>**(dur delay) Set maximum delay time.",
            "dur **<span style='color:#006AB1;'>delayMax</span>**() Get maximum delay time.",
            "dur **<span style='color:#006AB1;'>delayMin</span>**(dur delay) Set minimum delay time.",
            "dur **<span style='color:#006AB1;'>delayMin</span>**() Get minimum delay time.",
            "float **<span style='color:#006AB1;'>eq</span>**(float eq) Set the same EQ value for all bands (value is +/- dB).",
            "float **<span style='color:#006AB1;'>feedback</span>**(float feedback) Set the same feedback value for all bands [-1.0 - 1.0].",
            "int **<span style='color:#006AB1;'>fftlen</span>**(int arg) Set FFT frame size (power of 2).",
            "int **<span style='color:#006AB1;'>fftlen</span>**() Get FFT frame size (power of 2).",
            "float **<span style='color:#006AB1;'>freqMax</span>**(float arg) Set maximum frequency processed by Spectacle.",
            "float **<span style='color:#006AB1;'>freqMax</span>**() Get maximum frequency processed by Spectacle.",
            "float **<span style='color:#006AB1;'>freqMin</span>**(float arg) Set minimum frequency processed by Spectacle.",
            "float **<span style='color:#006AB1;'>freqMin</span>**() Get minimum frequency processed by Spectacle.",
            "int **<span style='color:#006AB1;'>hold</span>**(int arg) Set hold. True to suppress input, false disables.",
            "int **<span style='color:#006AB1;'>hold</span>**() Get hold. True to suppress input, false disables.",
            "float **<span style='color:#006AB1;'>mix</span>**(float mix) Set mix of processed and unprocessed signal [0 - 1].",
            "float **<span style='color:#006AB1;'>mix</span>**() Get mix of processed and unprocessed signal [0 - 1].",
            "int **<span style='color:#006AB1;'>overlap</span>**(int arg) Set frame overlap; best between 2 and 6.",
            "int **<span style='color:#006AB1;'>overlap</span>**() Get frame overlap; best between 2 and 6.",
            "int **<span style='color:#006AB1;'>posteq</span>**(int arg) Set posteq to true to apply EQ after delay, rather than before.",
            "int **<span style='color:#006AB1;'>posteq</span>**() Get posteq. True applies EQ after delay, rather than before.",
            "void **<span style='color:#006AB1;'>range</span>**(float arg1, float arg2) Set both min and max freqs in one command.",
            "int **<span style='color:#006AB1;'>table</span>**(string table, string type) Set \"delay\", “eq”, or \"feedback\" tables to the types \"random\", \"ascending\", or \"descending.\" Example: table(\"delay\", \"random\");."
        ],
        "examples": [
            "Examples: \t [Spectacle.ck](https://chuck.stanford.edu/doc/examples/effects/Spectacle.ck)"
        ],
        "description": "FFT-based spectral delay and EQ by John Gibson. Inspired by the totally awesome Spektral Delay plug-in by Native Instruments.",
        "title": "**Spectral Delay and EQ**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#Spectacle)"
    },
    "SqrOsc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "float **<span style='color:#006AB1;'>width</span>**() Set width of duty cycle (always 0.5)."
        ],
        "examples": [
            "Examples: \t [oscillatronx.ck](https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck), [brf.ck](https://chuck.stanford.edu/doc/examples/filter/brf.ck), [rlpf.ck](https://chuck.stanford.edu/doc/examples/filter/rlpf.ck), [rhpf.ck](https://chuck.stanford.edu/doc/examples/filter/rhpf.ck)"
        ],
        "description": "A square wave oscillator (same as PulseOsc with 0.5 duty cycle).",
        "title": "**Square Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#SqrOsc)"
    },
    "Std": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>abs</span>**(int value) Return absolute value of integer.",
            "float **<span style='color:#006AB1;'>atof</span>**(string value) Converts ascii (string) to floating point value (float).",
            "int **<span style='color:#006AB1;'>atoi</span>**(string value) Convert ascii (string) to integer (int).",
            "int **<span style='color:#006AB1;'>clamp</span>**(int value, int min, int max) Clamp integer to range [min, max].",
            "float **<span style='color:#006AB1;'>clampf</span>**(float value, float min, float max) Clamp float to range [min, max].",
            "float **<span style='color:#006AB1;'>dbtolin</span>**(float value) Convert decibels (dB) to linear amplitude.",
            "float **<span style='color:#006AB1;'>dbtopow</span>**(float value) Convert decibels (dB) to signal power ratio.",
            "float **<span style='color:#006AB1;'>dbtorms</span>**(float value) Convert decibels (dB) to rms.",
            "float **<span style='color:#006AB1;'>fabs</span>**(float value) Return absolute value of float.",
            "string **<span style='color:#006AB1;'>ftoa</span>**(float f, int precision) Converts floating point value (float) to ascii (string) with specified precision (number of decimal digits).",
            "int **<span style='color:#006AB1;'>ftoi</span>**(float f) Convert float to integer.",
            "float **<span style='color:#006AB1;'>ftom</span>**(float value) Convert frequency (Hz) to MIDI note number space.",
            "string **<span style='color:#006AB1;'>getenv</span>**(string key) Get the value of an environment variable (e.g., PATH).",
            "string **<span style='color:#006AB1;'>getenv</span>**(string key, string default) Get the value of an environment variable, returning the provided default if unset.",
            "string **<span style='color:#006AB1;'>itoa</span>**(int i) Converts integer (int) to ascii (string).",
            "float **<span style='color:#006AB1;'>lintodb</span>**(float value) Convert linear amplitude to decibels (dB).",
            "float **<span style='color:#006AB1;'>mtof</span>**(float value) Convert a MIDI note number to frequency (Hz). Note the input value is of type float (supports fractional note number). For reference, MIDI note number 60 is Middle C; each whole number is one semitone.",
            "float **<span style='color:#006AB1;'>powtodb</span>**(float value) Convert signal power ratio to decibels (dB).",
            "int **<span style='color:#006AB1;'>rand2</span>**(int min, int max) Generate a random integer in range [min, max]. (NOTE: this is deprecated; use Math.random2()).",
            "float **<span style='color:#006AB1;'>rand2f</span>**(float min, float max) Generate random floating point number in the range [min, max]. (NOTE: this is deprecated; use Math.random2f())",
            "int **<span style='color:#006AB1;'>rand</span>**() Generate a random integer between 0 and Std.RAND_MAX. (NOTE: this is deprecated; use Math.random()).",
            "float **<span style='color:#006AB1;'>randf</span>**() Generate random floating point number in the range [-1, 1]. (Note: this is deprecated; use Math.randomf())",
            "int[] **<span style='color:#006AB1;'>range</span>**(int stop) Return array containing the range [0,stop).",
            "int[] **<span style='color:#006AB1;'>range</span>**(int start, int stop) Return array containing the range [start,stop).",
            "int[] **<span style='color:#006AB1;'>range</span>**(int start, int stop, int step) Return array containing values from start up to (but not including) stop, hopping by step.",
            "float **<span style='color:#006AB1;'>rmstodb</span>**(float value) Convert rms to decibels (dB).",
            "float **<span style='color:#006AB1;'>scalef</span>**(float value, float srcmin, float srcmax, float dstmin, float dstmax) Scale a float from source range to destination range.",
            "int **<span style='color:#006AB1;'>setenv</span>**(string key, string value) Set the value of environment variable named 'key'",
            "float **<span style='color:#006AB1;'>sgn</span>**(float value) Get sign of value as -1 (negative), 0, or 1 (positive).",
            "void **<span style='color:#006AB1;'>srand</span>**(int seed) Seed the random number generator. Different seeds will likely generate different sequences of random numbers even if the seeds are close together; alternatively, a sequence of random numbers can be repeated by setting the same seed. (NOTE: this is deprecated; use Math.srandom())",
            "int **<span style='color:#006AB1;'>system</span>**(string cmd) Pass a command to be executed in the shell (requires --caution-to-the-wind flag to be set).",
            "static member variables int RAND_MAX",
            "The largest possible value returned by Std.**<span style='color:#006AB1;'>rand</span>**(). [ top ]"
        ],
        "examples": [],
        "description": "A standard library in ChucK, which includes utility functions for random number generation, unit conversions, and absolute value.",
        "title": "**ChucK Standard Library**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#Std)"
    },
    "Step": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>next</span>**(float next) Set the next step value.",
            "float **<span style='color:#006AB1;'>next</span>**() Get the next step value."
        ],
        "examples": [
            "Examples: \t [step.ck](https://chuck.stanford.edu/doc/examples/basic/step.ck), [fm3.ck](https://chuck.stanford.edu/doc/examples/basic/fm3.ck), [zerox.ck](https://chuck.stanford.edu/doc/examples/basic/zerox.ck)"
        ],
        "description": "A step generator. Step behaves like Impulse, except that once a next value is set, that value is held for all following samples, until a different value is set.",
        "title": "**Step Function Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#Step)"
    },
    "StifKarp": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>baseLoopGain</span>**(float value) Set base loop gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>baseLoopGain</span>**() Get base loop gain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>clear</span>**(float value) Clear instrument.",
            "float **<span style='color:#006AB1;'>pickupPosition</span>**(float value) Set pickup position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pickupPosition</span>**() Get pickup position, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pluck</span>**(float value) Pluck string.",
            "float **<span style='color:#006AB1;'>stretch</span>**(float value) Set string stretch, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>stretch</span>**() Get string stretch, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>sustain</span>**(float value) Set string sustain, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>sustain</span>**() Get string sustain, [0.0-1.0]."
        ],
        "examples": [
            "Examples: \t [stifkarp.ck](https://chuck.stanford.edu/doc/examples/stk/stifkarp.ck), [stif-o-karp.ck](https://chuck.stanford.edu/doc/examples/stk/stif-o-karp.ck)"
        ],
        "description": "This class implements a simple plucked string algorithm (Karplus Strong) with enhancements (Jaffe-Smith, Smith, and others), including string stiffness and pluck position controls. The stiffness is modeled with allpass filters. This is a digital waveguide model, making its use possibly subject to patents held by Stanford University, Yamaha, and others. Control Change Numbers: - Pickup Position = 4 - String Sustain = 11 - String Stretch = 1 by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Stiff Karplus-Strong**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#StifKarp)"
    },
    "StkInstrument": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>controlChange</span>**(int ctrl, float value) Assert control change; numbers are instrument specific; value range [0.0 - 127.0].",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency.",
            "float **<span style='color:#006AB1;'>noteOff</span>**(float value) Trigger note off.",
            "float **<span style='color:#006AB1;'>noteOn</span>**(float value) Trigger note on."
        ],
        "examples": [],
        "description": "Super-class for STK instruments.",
        "title": "**STK Instrument**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#StkInstrument)"
    },
    "StringTokenizer": {
        "description": "Break a string into tokens. This uses whitespace as the delimiter.",
        "examples": [
            "Examples: \t [token.ck](https://chuck.stanford.edu/doc/examples/string/token.ck), [readline.ck](https://chuck.stanford.edu/doc/examples/string/readline.ck), [read-tokens.ck](https://chuck.stanford.edu/doc/examples/io/read-tokens.ck), [jabberwocky.txt](https://chuck.stanford.edu/doc/examples/io/jabberwocky.txt), [word2vec-prompt.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/word2vec-prompt.ck)"
        ],
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>get</span>**(int index) Return the i-th token in the set string.",
            "string **<span style='color:#006AB1;'>get</span>**(int index, string out) Return the i-th token in the set string. Additionally, write the token string to the `out` string variable.",
            "int **<span style='color:#006AB1;'>more</span>**() Return true (1) if there are still more tokens, false (0) if no more tokens.",
            "string **<span style='color:#006AB1;'>next</span>**() Return the next token string.",
            "string **<span style='color:#006AB1;'>next</span>**(string out) Return the next token string. Additionally, write the token string to the 'out' string variable.",
            "void **<span style='color:#006AB1;'>reset</span>**() Reset token iteration back to the beginning of the set string.",
            "void **<span style='color:#006AB1;'>set</span>**(string line) Set the string to be tokenized.",
            "int **<span style='color:#006AB1;'>size</span>**() Returns the number of token strings that the set string can be broken into."
        ],
        "title": "**String Tokenizer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/utils.html#StringTokenizer)"
    },
    "SubNoise": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>rate</span>**(int value) Set subsampling rate.",
            "int **<span style='color:#006AB1;'>rate</span>**() Get subsampling rate."
        ],
        "examples": [
            "Examples: \t [subnoise-control.ck](https://chuck.stanford.edu/doc/examples/stk/subnoise-control.ck), [subnoise-audio.ck](https://chuck.stanford.edu/doc/examples/stk/subnoise-audio.ck)"
        ],
        "description": "Generates a new random number every 'rate' ticks using the C `rand()` function. The quality of the r`and()` function varies from one OS to another. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Sub-Sampling Noise Generator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#SubNoise)"
    },
    "TriOsc": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>freq</span>**(float hz) Set frequency of oscillator in Hertz; maintains phase.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of oscillator in Hertz.",
            "dur **<span style='color:#006AB1;'>period</span>**(dur value) Set period of oscillator (inverse of frequency).",
            "dur **<span style='color:#006AB1;'>period</span>**() Get period of oscillator (inverse of frequency).",
            "float **<span style='color:#006AB1;'>phase</span>**(float phase) Set oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>phase</span>**() Get oscillator phase, in range [0,1).",
            "float **<span style='color:#006AB1;'>sfreq</span>**(float hz) Set frequency of oscillator in Hertz; resets phase to 0.",
            "int **<span style='color:#006AB1;'>sync</span>**(int type) Choose how to interpret input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>sync</span>**() Get current interpretation of input: (0) sync frequency to input; (1) sync phase to input; (2) frequency modulation (add input to internal frequency).",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode.",
            "float **<span style='color:#006AB1;'>width</span>**(float width) Set width of triangle wave (ratio of rise time to fall time).",
            "float **<span style='color:#006AB1;'>width</span>**() Get width of triangle wave (ratio of rise time to fall time)."
        ],
        "examples": [
            "Examples: \t [oscillatronx.ck](https://chuck.stanford.edu/doc/examples/basic/oscillatronx.ck), [shepard.ck](https://chuck.stanford.edu/doc/examples/deep/shepard.ck)"
        ],
        "description": "A triangle wave oscillator.",
        "title": "**Triangle Wave Oscillator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#TriOsc)"
    },
    "TubeBell": {
        "functions": [],
        "examples": [],
        "description": "STK tubular bell (orchestral chime) FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is : 4->3-- + --> Out 2->1-- Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Tubular Bell**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#TubeBell)"
    },
    "TwoPole": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>a1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>a2</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>a2</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set filter resonance frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter resonance frequency.",
            "int **<span style='color:#006AB1;'>norm</span>**(int value) Set filter normalization.",
            "int **<span style='color:#006AB1;'>norm</span>**() Get filter normalization.",
            "float **<span style='color:#006AB1;'>radius</span>**(float value) Set filter radius resonance.",
            "float **<span style='color:#006AB1;'>radius</span>**() Get filter radius resonance."
        ],
        "examples": [
            "Examples: \t [powerup.ck](https://chuck.stanford.edu/doc/examples/shred/powerup.ck)"
        ],
        "description": "This Filter subclass implements a two-pole digital filter. A method is provided for creating a resonance in the frequency response while maintaining a nearly constant filter gain. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Two-Pole Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#TwoPole)"
    },
    "TwoZero": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>b0</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b0</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b1</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>b2</span>**(float value) Set filter coefficient.",
            "float **<span style='color:#006AB1;'>b2</span>**() Get filter coefficient.",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set filter notch frequency.",
            "float **<span style='color:#006AB1;'>freq</span>**() Get filter notch frequency.",
            "float **<span style='color:#006AB1;'>radius</span>**(float value) Set filter notch radius.",
            "float **<span style='color:#006AB1;'>radius</span>**() Get filter notch radius."
        ],
        "examples": [
            "Examples: \t [chant.ck](https://chuck.stanford.edu/doc/examples/deep/chant.ck), [say-chu.ck](https://chuck.stanford.edu/doc/examples/deep/say-chu.ck)"
        ],
        "description": "This Filter subclass implements a two-zero digital filter. A method is provided for creating a 'notch' in the frequency response while maintaining a constant filter gain. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Two-Zero Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-filters.html#TwoZero)"
    },
    "Type": {
        "description": "A representation of a ChucK type.",
        "examples": [
            "Examples: \t [type_type.ck](https://chuck.stanford.edu/doc/examples/type/type_type.ck), [type_query.ck](https://chuck.stanford.edu/doc/examples/type/type_query.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>arrayDepth</span>**() Return the number of array dimensions associated with this Type (e.g., 'int[][]' has 2; 'int' has 0).",
            "string **<span style='color:#006AB1;'>baseName</span>**() Return the base name of this Type. The base of name of an array Type is the type without the array dimensions (e.g., base name of 'int[][]' is 'int')",
            "Type[] **<span style='color:#006AB1;'>children</span>**() Retrieve this Type's children Types.",
            "int **<span style='color:#006AB1;'>equals</span>**(Type another) Return whether this Type is same as 'another'.",
            "int **<span style='color:#006AB1;'>isArray</span>**() Return whether this Type is some kind of an array.",
            "int **<span style='color:#006AB1;'>isPrimitive</span>**() Return whether this is a primitive Type (e.g., 'int' and 'dur' are primitives types; 'Object' and its children Types are not).",
            "int **<span style='color:#006AB1;'>isa</span>**(Type another) Return whether this Type is a kind of 'another'.",
            "int **<span style='color:#006AB1;'>isa</span>**(string another) Return whether this Type is a kind of 'another'.",
            "string **<span style='color:#006AB1;'>name</span>**() Return the name of this Type.",
            "string **<span style='color:#006AB1;'>origin</span>**() Return a string describing where this Type was defined (e.g., \"builtin\", \"chugin\", \"cklib\", \"user\").",
            "Type **<span style='color:#006AB1;'>parent</span>**() Return this Type's parent Type; returns null if this Type is 'Object'.",
            "Type **<span style='color:#006AB1;'>find</span>**(string typeName) Find and return the Type associated with 'typeName'; returns null if no Types currently in the VM with that name.",
            "Type[] **<span style='color:#006AB1;'>getTypes</span>**(int attributes, int origins) Retrieve all top-level Types in the ChucK runtime type system that fit the attributes and origins flags. Flags that can bitwise-OR'ed for attributes: Type.ATTRIB_OBJECT, Type.ATTRIB_PRIMITIVE, TYPE_SPECIAL -- and for origins: Type.ORIGIN_BUILTIN, Type.ORIGIN_CHUGIN, Type.ORIGIN_CKLIB, Type.ORIGIN_USER.",
            "Type[] **<span style='color:#006AB1;'>getTypes</span>**() Retrieves all top-level Types currently in the type system.",
            "Type **<span style='color:#006AB1;'>of</span>**(Object obj) Return the Type of 'obj'",
            "Type **<span style='color:#006AB1;'>of</span>**(int val) Return the Type associated with 'int'.",
            "Type **<span style='color:#006AB1;'>of</span>**(float val) Return the Type associated with 'float'.",
            "Type **<span style='color:#006AB1;'>of</span>**(time val) Return the Type associated with 'time'.",
            "Type **<span style='color:#006AB1;'>of</span>**(dur val) Return the Type associated with 'dur'.",
            "Type **<span style='color:#006AB1;'>of</span>**(complex val) Return the Type associated with 'complex'.",
            "Type **<span style='color:#006AB1;'>of</span>**(polar val) Return the Type associated with 'polar'.",
            "Type **<span style='color:#006AB1;'>of</span>**(vec3 val) Return the Type associated with 'vec3'.",
            "Type **<span style='color:#006AB1;'>of</span>**(vec4 val) Return the Type associated with 'vec4'."
        ],
        "title": "**ChucK Type Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/utils.html#Type)"
    },
    "UAna": {
        "functions": [
            "**Methods:**",
            "complex **<span style='color:#006AB1;'>cval</span>**(int index) Get blob's complex value at index.",
            "complex[] **<span style='color:#006AB1;'>cvals</span>**() Get blob's complex array.",
            "float **<span style='color:#006AB1;'>fval</span>**(int index) Get blob's float value at index.",
            "float[] **<span style='color:#006AB1;'>fvals</span>**() Get blob's float array.",
            "int **<span style='color:#006AB1;'>isUpConnectedTo</span>**(UAna right) Is connected to another uana via =^?",
            "UAnaBlob **<span style='color:#006AB1;'>upchuck</span>**() Initiate analysis at the UAna and return result."
        ],
        "examples": [],
        "description": "Base class from which all unit analyzer (UAna) types inherit; UAnae (note plural form) can be interconnected using => (chuck operator for synthesis; all UAnae are also UGens) or using =^ (upchuck operator for analysis) -- the operator used will determine how data is passed. When .upchuck() is invoked on a given UAna, the UAna-chain (i.e., UAnae connected via =^) is traversed upstream from the upchucked UAna, and analysis is performed at each UAna along the chain; the analysis results are returned in UAnaBlobs.",
        "title": "**Unit Analyzer Base Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#UAna)"
    },
    "UAnaBlob": {
        "functions": [
            "**Methods:**",
            "complex **<span style='color:#006AB1;'>cval</span>**(int index) Get blob's complex value at index.",
            "complex[] **<span style='color:#006AB1;'>cvals</span>**() Get blob's complex array.",
            "float **<span style='color:#006AB1;'>fval</span>**(int index) Get blob's float value at index.",
            "float[] **<span style='color:#006AB1;'>fvals</span>**() Get blob's float array.",
            "time **<span style='color:#006AB1;'>when</span>**() Get the time when blob was last upchucked."
        ],
        "examples": [],
        "description": "A data structure that contains results associated with UAna analysis. There is a UAnaBlob associated with every UAna. As a UAna is upchucked (using .upchuck()), the result is stored in the UAnaBlob's floating point vector and/or complex vector. The interpretation of the results depends on the specific UAna.",
        "title": "**Unit Analyzer Blob**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#UAnaBlob)"
    },
    "UGen": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>buffered</span>**(int val) Set the unit generator's buffered operation mode, typically used externally from hosts that embed ChucK as a component. If true, the UGen stores a buffer of its most recent samples, which can be fetched using global variables in the host language.",
            "int **<span style='color:#006AB1;'>buffered</span>**() Get the ugen's buffered operation mode.",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int num) Get channel (as a UGen) at specified index.",
            "int **<span style='color:#006AB1;'>channels</span>**(int num) Set number of channels. (currently NOT supported)",
            "int **<span style='color:#006AB1;'>channels</span>**() Get number of channels.",
            "float **<span style='color:#006AB1;'>gain</span>**(float val) Set the gain of the unit generator.",
            "float **<span style='color:#006AB1;'>gain</span>**() Get the gain of the unit generator.",
            "int **<span style='color:#006AB1;'>isConnectedTo</span>**(UGen rhs) Return true if this UGen's output is connected to the input of rhs; if either this UGen or rhs has more than one channel, this function returns true if any connections exist between the channels; return false if there are no connections.",
            "float **<span style='color:#006AB1;'>last</span>**() Get the last sample value of the unit generator.",
            "int **<span style='color:#006AB1;'>op</span>**(int val) Set the unit generator's operation mode. Accepted values are: 1 (sum inputs), 2 (take difference between first input and subsequent inputs), 3 (multiply inputs), 4 (divide first input by subsequent inputs), 0 (do not synthesize audio, output 0) or -1 (passthrough inputs to output).",
            "int **<span style='color:#006AB1;'>op</span>**() Get the unit generator's operation mode."
        ],
        "examples": [],
        "description": "Base class for all unit generator (UGen) types.",
        "title": "**Unit Generator Base Class**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#UGen)"
    },
    "UGen_Multi": {
        "functions": [
            "**Methods:**",
            "UGen **<span style='color:#006AB1;'>chan</span>**(int which) Get UGen representing a specific channel of this UGen, or null if no such channel is available."
        ],
        "examples": [],
        "description": "Base class for multi-channel unit generators.",
        "title": "**Multi-Channel UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#UGen_Multi)"
    },
    "UGen_Stereo": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>pan</span>**(float val) Pan between left and right channels, in range [-1,1], with -1 being far-left, 1 far-right, and 0 centered.",
            "float **<span style='color:#006AB1;'>pan</span>**() Pan between left and right channels, in range [-1,1], with -1 being far-left, 1 far-right, and 0 centered.",
            "int **<span style='color:#006AB1;'>panType</span>**(int val) Set the panning type: (1) constant power panning, (0) unity gain anti-panning.",
            "int **<span style='color:#006AB1;'>panType</span>**() Get the panning type: (1) constant power panning, (0) unity gain anti-panning.",
            "member variables UGen left",
            "Left **<span style='color:#006AB1;'>channel</span>**(same as .chan(0)). UGen right",
            "Right **<span style='color:#006AB1;'>channel</span>**(same as .chan(1)). [ top ]"
        ],
        "examples": [],
        "description": "Base class for stereo unit generators.",
        "title": "**Stereo UGen**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-basic.html#UGen_Stereo)"
    },
    "UnFlip": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>output</span>**(float[] buffer) Manually take pilF (as opposed to using .upchuck() / upchuck operator)",
            "int **<span style='color:#006AB1;'>size</span>**(int size) Set the pilF size.",
            "int **<span style='color:#006AB1;'>size</span>**() Get the pilF size.",
            "void **<span style='color:#006AB1;'>transform</span>**() Manually take pilF (as opposed to using .upchuck() / upchuck operator).",
            "float[] **<span style='color:#006AB1;'>window</span>**(float[] win) Set/get the transform window/size.",
            "int **<span style='color:#006AB1;'>windowSize</span>**() Get the current window size."
        ],
        "examples": [
            "Examples: \t [flip.ck](https://chuck.stanford.edu/doc/examples/analysis/flip.ck)"
        ],
        "description": "Turns UAna frames into audio samples, via overlap add.",
        "title": "**Signal Unflip**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#UnFlip)"
    },
    "VoicForm": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>loudness</span>**(float value) Set 'loudness' of voice, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>loudness</span>**() Get 'loudness' of voice, [0.0-1.0].",
            "string **<span style='color:#006AB1;'>phoneme</span>**(string value) Set phoneme (see above).",
            "string **<span style='color:#006AB1;'>phoneme</span>**() Get phoneme (see above).",
            "int **<span style='color:#006AB1;'>phonemeNum</span>**(int value) Set phoneme by number, [0.0-128.0].",
            "int **<span style='color:#006AB1;'>phonemeNum</span>**() Get phoneme by number, [0.0-128.0].",
            "float **<span style='color:#006AB1;'>pitchSweepRate</span>**(float value) Set rate of pitch sweep, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>pitchSweepRate</span>**() Get rate of pitch sweep, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>quiet</span>**(float value) Stop singing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>speak</span>**(float value) Start singing, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>unVoiced</span>**(float value) Set mix for unvoiced component, [0.0 - 1.0].",
            "float **<span style='color:#006AB1;'>unVoiced</span>**() Get mix for unvoiced component, [0.0 - 1.0].",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**(float value) Set vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoFreq</span>**() Get vibrato frequency (Hz).",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**(float value) Set vibrato gain (Hz), [0.0-1.0].",
            "float **<span style='color:#006AB1;'>vibratoGain</span>**() Get vibrato gain (Hz), [0.0-1.0].",
            "float **<span style='color:#006AB1;'>voiceMix</span>**(float value) Set voiced/unvoiced mix, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>voiceMix</span>**() Get voiced/unvoiced mix, [0.0-1.0].",
            "float **<span style='color:#006AB1;'>voiced</span>**(float value) Set mix for voiced component, [0.0 - 1.0].",
            "float **<span style='color:#006AB1;'>voiced</span>**() Get mix for voiced component, [0.0 - 1.0]."
        ],
        "examples": [
            "Examples: \t [voic-o-form.ck](https://chuck.stanford.edu/doc/examples/stk/voic-o-form.ck)"
        ],
        "description": "This instrument contains an excitation singing wavetable (looping wave with random and periodic vibrato, smoothing on frequency, etc.), excitation noise, and four sweepable complex resonances. Measured formant data is included, and enough data is there to support either parallel or cascade synthesis. In the floating point case cascade synthesis is the most natural so that's what you'll find here. Control Change Numbers: Voiced/Unvoiced Mix = 2 Vowel/Phoneme Selection = 4 Vibrato Frequency = 11 Vibrato Gain = 1 Loudness (Spectral Tilt) = 128 by Perry R. Cook and Gary P. Scavone, 1995 - 2002. Phoneme Names: 'eee' 'ihh' 'ehh' 'aaa' 'ahh' 'aww' 'ohh' 'uhh' 'uuu' 'ooo' 'rrr' 'lll' 'mmm' 'nnn' 'nng' 'ngg' 'fff' 'sss' 'thh' 'shh' 'xxx' 'hee' 'hoo' 'hah' 'bbb' 'ddd' 'jjj' 'ggg' 'vvv' 'zzz' 'thz' 'zhh'",
        "title": "**STK Voice Formant**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#VoicForm)"
    },
    "WPDiodeLadder": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>cutoff</span>**(float arg) Cuttoff is in Hz [0..Nyquist).",
            "float **<span style='color:#006AB1;'>cutoff</span>**() Get cuttoff frequency in Hz [0..Nyquist).",
            "int **<span style='color:#006AB1;'>nlp_type</span>**(int arg) Set to 1 to normalize non-linear output.",
            "int **<span style='color:#006AB1;'>nlp_type</span>**() Get non-linear output setting. 1 is normalized.",
            "int **<span style='color:#006AB1;'>nonlinear</span>**(int arg) Enable non linear saturator.",
            "int **<span style='color:#006AB1;'>nonlinear</span>**() Get non-linear saturator setting. 1 is enabled.",
            "float **<span style='color:#006AB1;'>resonance</span>**(float arg) Resonance goes between [0...17].",
            "float **<span style='color:#006AB1;'>resonance</span>**() Get resonance [0 - 17].",
            "float **<span style='color:#006AB1;'>saturation</span>**(float arg) Saturation is a scalar gain, and can be used to drive the non-linearity.",
            "float **<span style='color:#006AB1;'>saturation</span>**() Get saturation. Saturation is a scalar gain, and can be used to drive the non-linearity."
        ],
        "examples": [
            "Examples: \t [WPDiodeLadder.ck](https://chuck.stanford.edu/doc/examples/filter/WPDiodeLadder.ck)"
        ],
        "description": "Virtual analog low pass filter based on Will Pirkle's Diode Ladder application notes.",
        "title": "**WPD Diode Ladder Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#WPDiodeLadder)"
    },
    "WPKorg35": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>cutoff</span>**(float arg) Cuttoff is in Hz [0..Nyquist).",
            "float **<span style='color:#006AB1;'>cutoff</span>**() Get cutoff in Hz [0..Nyquist).",
            "int **<span style='color:#006AB1;'>nonlinear</span>**(int arg) Enable non linear saturator.",
            "int **<span style='color:#006AB1;'>nonlinear</span>**() Get non-linear saturator setting. 1 is enabled.",
            "float **<span style='color:#006AB1;'>resonance</span>**(float arg) Resonance goes between [0...2).",
            "float **<span style='color:#006AB1;'>resonance</span>**() Get resonance [0 - 2).",
            "float **<span style='color:#006AB1;'>saturation</span>**(float arg) Saturation is a scalar gain, and can be used to drive the non-linearity.",
            "float **<span style='color:#006AB1;'>saturation</span>**() Get saturation. Saturation is a scalar gain, and can be used to drive the non-linearity."
        ],
        "examples": [
            "Examples: \t [WPKorg35.ck](https://chuck.stanford.edu/doc/examples/filter/WPKorg35.ck)"
        ],
        "description": "Virtual analog low pass filter based on Will Pirkle's Korg35 application notes.",
        "title": "**WPD Korg 35 Filter**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#WPKorg35)"
    },
    "WarpTable": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>coefs</span>**(float[] v) Set lookup table coefficients."
        ],
        "examples": [
            "Examples: \t [GenX-WarpTable-test.ck](https://chuck.stanford.edu/doc/examples/special/GenX-WarpTable-test.ck)"
        ],
        "description": "An end-constrained mapping table, mostly useful for conditioning control signals.",
        "title": "**Warp Table**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-advanced.html#WarpTable)"
    },
    "WaveLoop": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>addPhase</span>**(float value) Set offset by phase.",
            "float **<span style='color:#006AB1;'>addPhase</span>**() Get offset by phase.",
            "float **<span style='color:#006AB1;'>addPhaseOffset</span>**(float value) Set phase offset.",
            "float **<span style='color:#006AB1;'>addPhaseOffset</span>**() Get phase offset.",
            "float **<span style='color:#006AB1;'>freq</span>**(float value) Set frequency of playback (loops/second).",
            "float **<span style='color:#006AB1;'>freq</span>**() Get frequency of playback (loops/second)."
        ],
        "examples": [],
        "description": "This class inherits from WvIn and provides audio file looping functionality. WaveLoop supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which return samples produced by averaging across sample frames, from the `tickFrame()` methods, which return pointers to multi-channel sample frames. For single-channel data, these methods return equivalent values. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Audio File Looping**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#WaveLoop)"
    },
    "Wekinator": {
        "functions": [
            "**Methods:**",
            "void **<span style='color:#006AB1;'>add</span>**() Add current inputs and outputs to the observations.",
            "void **<span style='color:#006AB1;'>add</span>**(float[] inputs, float[] outputs) Add given inputs and outputs to the observations.",
            "void **<span style='color:#006AB1;'>add</span>**(int output_index, float[] inputs, float[] outputs) Add given inputs and outputs to the observations for the specified output.",
            "void **<span style='color:#006AB1;'>clear</span>**() Clear everything except the global properties.",
            "void **<span style='color:#006AB1;'>clearAllObs</span>**() Clear all observations.",
            "void **<span style='color:#006AB1;'>clearAllObs</span>**(int output_index) Clear all observations for the specified output.",
            "void **<span style='color:#006AB1;'>clearObs</span>**(int lo, int hi) Clear the observations by id range.",
            "void **<span style='color:#006AB1;'>clearObs</span>**(int output_index, int lo, int hi) Clear the observations by id range for the specified output.",
            "void **<span style='color:#006AB1;'>deleteLastRound</span>**() Delete the last round of observations.",
            "void **<span style='color:#006AB1;'>exportObs</span>**(string filename) Export the observations to a file.",
            "void **<span style='color:#006AB1;'>exportObs</span>**(int output_index, string filename) Export the observations for the specified output to a file.",
            "int **<span style='color:#006AB1;'>getAllRecordStatus</span>**() Get the record status for all outputs.",
            "int **<span style='color:#006AB1;'>getAllRunStatus</span>**() Get the run status for all outputs.",
            "void **<span style='color:#006AB1;'>getObs</span>**(float[][] obs) Get the observations in the Wekinator.",
            "void **<span style='color:#006AB1;'>getObs</span>**(int output_index, float[][] obs) Get the observations for the specified output in the Wekinator.",
            "void **<span style='color:#006AB1;'>getOutputProperty</span>**(int output_index, string property_name, int[] property_value) Get the output property of the Wekinator. See the Wekinator documentation for more information.",
            "float **<span style='color:#006AB1;'>getOutputPropertyFloat</span>**(int output_index, int property_type, string property_name) Get the output property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>getOutputPropertyInt</span>**(int output_index, string property_name) Get the output property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>getOutputPropertyInt</span>**(int output_index, int property_type, string property_name) Get the output property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>getOutputRecordStatus</span>**(int output_index) Get the record status for the specified output.",
            "int **<span style='color:#006AB1;'>getOutputRunStatus</span>**(int output_index) Get the run status for the specified output.",
            "float **<span style='color:#006AB1;'>getPropertyFloat</span>**(int property_type, string property_name) Get the property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>getPropertyInt</span>**(int property_type, string property_name) Get the property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>getRound</span>**() Get the current recording round.",
            "void **<span style='color:#006AB1;'>importObs</span>**(string filename) Import the observations from a file.",
            "void **<span style='color:#006AB1;'>input</span>**(float[] inputs) Set the inputs of the Wekinator.",
            "int **<span style='color:#006AB1;'>inputDims</span>**(int n) Set the number of input dimensions to Wekinator.",
            "int **<span style='color:#006AB1;'>inputDims</span>**() Get the number of input dimensions to Wekinator.",
            "void **<span style='color:#006AB1;'>load</span>**(string filename) Load the Wekinator from a file.",
            "int **<span style='color:#006AB1;'>modelType</span>**(int model_type) Set the model type of the Wekinator. Options: AI.Regression: AI.MLP, AI.LR, AI.Classification: AI.KNN, AI.SVM, AI.DT.",
            "int **<span style='color:#006AB1;'>modelType</span>**() Get the model type id of the Wekinator.",
            "string **<span style='color:#006AB1;'>modelTypeName</span>**() Get the model type name of the Wekinator.",
            "void **<span style='color:#006AB1;'>nextRound</span>**() Bump the recording round.",
            "int **<span style='color:#006AB1;'>numObs</span>**() Get the number of observations in the Wekinator.",
            "int **<span style='color:#006AB1;'>numObs</span>**(int output_index) Get the number of observations for the specified output in the Wekinator.",
            "void **<span style='color:#006AB1;'>output</span>**(float[] outputs) Set the outputs of the Wekinator.",
            "int **<span style='color:#006AB1;'>outputDims</span>**(int n) Set the number of output dimensions to Wekinator.",
            "int **<span style='color:#006AB1;'>outputDims</span>**() Get the number of output dimensions to Wekinator.",
            "void **<span style='color:#006AB1;'>predict</span>**(float[] inputs, float[] outputs) Predict outputs for the given inputs.",
            "void **<span style='color:#006AB1;'>randomizeOutputs</span>**() Randomize the outputs of the Wekinator.",
            "void **<span style='color:#006AB1;'>save</span>**(string filename) Save the Wekinator to a file.",
            "void **<span style='color:#006AB1;'>setAllRecordStatus</span>**(int status) Set the record status for all outputs.",
            "void **<span style='color:#006AB1;'>setAllRunStatus</span>**(int status) Set the run status for all outputs.",
            "void **<span style='color:#006AB1;'>setOutputProperty</span>**(int output_index, string property_name, int property_value) Set the output property of the Wekinator. See the Wekinator documentation for more information.",
            "void **<span style='color:#006AB1;'>setOutputProperty</span>**(int output_index, int property_type, string property_name, int property_value) Set the output property of the Wekinator. See the Wekinator documentation for more information.",
            "void **<span style='color:#006AB1;'>setOutputProperty</span>**(int output_index, int property_type, string property_name, float property_value) Set the output property of the Wekinator. See the Wekinator documentation for more information.",
            "void **<span style='color:#006AB1;'>setOutputProperty</span>**(int output_index, string property_name, int[] property_value) Set the output property of the Wekinator. See the Wekinator documentation for more information.",
            "void **<span style='color:#006AB1;'>setOutputRecordStatus</span>**(int output_index, int status) Set the record status for the specified output.",
            "void **<span style='color:#006AB1;'>setOutputRunStatus</span>**(int output_index, int status) Set the run status for the specified output.",
            "void **<span style='color:#006AB1;'>setProperty</span>**(int property_type, string property_name, int property_value) Set the property of the Wekinator. See the Wekinator documentation for more information.",
            "void **<span style='color:#006AB1;'>setProperty</span>**(int property_type, string property_name, float property_value) Set the property of the Wekinator. See the Wekinator documentation for more information.",
            "int **<span style='color:#006AB1;'>taskType</span>**(int task_type) Set the task type of the Wekinator. Options: AI.Regression, AI.Classification.",
            "int **<span style='color:#006AB1;'>taskType</span>**() Get the task type id of the Wekinator.",
            "string **<span style='color:#006AB1;'>taskTypeName</span>**() Get the task type name of the Wekinator.",
            "void **<span style='color:#006AB1;'>train</span>**() Train models for all outputs."
        ],
        "examples": [
            "Examples: \t [wekinator-basic.ck](https://chuck.stanford.edu/doc/examples/ai/wekinator/wekinator-basic.ck), [wekinator-customize.ck](https://chuck.stanford.edu/doc/examples/ai/wekinator/wekinator-customize.ck), [wekinator-import.ck](https://chuck.stanford.edu/doc/examples/ai/wekinator/wekinator-import.ck)"
        ],
        "description": "A Wekinator utility that maps input vectors to output vectors, commonly used for interactive machine learning combining human-computer interaction and ML. Based on Rebecca Fiebrink's Wekinator framework.",
        "title": "**Wekinator**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#Wekinator)"
    },
    "WinFuncEnv": {
        "functions": [
            "**Methods:**",
            "dur **<span style='color:#006AB1;'>attackTime</span>**(dur attackDuration) Set duration of the attack phase.",
            "int **<span style='color:#006AB1;'>keyOff</span>**() Start release phase.",
            "int **<span style='color:#006AB1;'>keyOff</span>**(int keyOff) Start release phase.",
            "int **<span style='color:#006AB1;'>keyOn</span>**() Start attack phase.",
            "int **<span style='color:#006AB1;'>keyOn</span>**(int keyOn) Start attack phase.",
            "dur **<span style='color:#006AB1;'>releaseTime</span>**(dur releaseDuration) Set duration of the release phase.",
            "void **<span style='color:#006AB1;'>setBlackman</span>**() Set Blackman Window Envelope with default value (0.16).",
            "void **<span style='color:#006AB1;'>setBlackman</span>**(float a) Set Blackman Window Envelope with a custom value.",
            "void **<span style='color:#006AB1;'>setBlackmanDerivative</span>**(float a0, float a1, float a2, float a3) Set a custom Blackman Derivative Envelope with custom values.",
            "void **<span style='color:#006AB1;'>setBlackmanHarris</span>**() Set BlackmanHarris Window Envelope.",
            "void **<span style='color:#006AB1;'>setBlackmanNutall</span>**() Set BlackmanNutall Window Envelope.",
            "void **<span style='color:#006AB1;'>setExponential</span>**() Set Exponential Function Envelope with default value (8.69/60.0).",
            "void **<span style='color:#006AB1;'>setExponential</span>**(float a) Set Exponential Function Envleope with a custom value.",
            "void **<span style='color:#006AB1;'>setHann</span>**() Set Hann (Hanning) Window Envelope.",
            "void **<span style='color:#006AB1;'>setHannPoisson</span>**() Set Hann-Poisson Window Envelope with default value (0.5).",
            "void **<span style='color:#006AB1;'>setHannPoisson</span>**(float a) Set Hann-Poisson Window Envelope with a custom value.",
            "void **<span style='color:#006AB1;'>setNutall</span>**() Set Nutall Window Envelope.",
            "void **<span style='color:#006AB1;'>setParzen</span>**() Set Parzen Window Envelope.",
            "void **<span style='color:#006AB1;'>setPoisson</span>**() Set Poisson Window Envelope with default value (6.0).",
            "void **<span style='color:#006AB1;'>setPoisson</span>**(float a) Set Poisson Window Envelope with a custom value.",
            "void **<span style='color:#006AB1;'>setSigmoid</span>**() Set Sigmoid Window Envelope with default value (2.0).",
            "void **<span style='color:#006AB1;'>setSigmoid</span>**(float k) Set Sigmoid Window Envelope with a custom value.",
            "void **<span style='color:#006AB1;'>setTukey</span>**() Set Tukey Window Envelope with default value (0.5).",
            "void **<span style='color:#006AB1;'>setTukey</span>**(float a) Set Tukey Window Envelope with a custom value.",
            "void **<span style='color:#006AB1;'>setWelch</span>**() Set Welch Window Window.",
            "float **<span style='color:#006AB1;'>windowValue</span>**() Get current window value."
        ],
        "examples": [
            "Examples: \t [WinFuncEnv.ck](https://chuck.stanford.edu/doc/examples/effects/WinFuncEnv.ck)"
        ],
        "description": "WinFunEnv is an Attack/Release envelope built around window functions!",
        "title": "**Window Function Envelope**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/chugins.html#WinFuncEnv)"
    },
    "Windowing": {
        "functions": [
            "**Methods:**",
            "float[] **<span style='color:#006AB1;'>blackmanHarris</span>**(int size) No description available",
            "float[] **<span style='color:#006AB1;'>hamming</span>**(int size) No description available",
            "float[] **<span style='color:#006AB1;'>hann</span>**(int size) No description available",
            "float[] **<span style='color:#006AB1;'>rectangle</span>**(int size) No description available",
            "float[] **<span style='color:#006AB1;'>triangle</span>**(int size) No description available"
        ],
        "examples": [
            "Examples: \t [win.ck](https://chuck.stanford.edu/doc/examples/analysis/win.ck), [xsynth.ck](https://chuck.stanford.edu/doc/examples/analysis/xsynth.ck), [pitch-track.ck](https://chuck.stanford.edu/doc/examples/analysis/tracking/pitch-track.ck), [rolloff2.ck](https://chuck.stanford.edu/doc/examples/ai/features/rolloff2.ck), [win.ck](https://chuck.stanford.edu/doc/examples/analysis/win.ck), [feature-extract.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/feature-extract.ck), [genre-classify.ck](https://chuck.stanford.edu/doc/examples/ai/genre-classify/genre-classify.ck)"
        ],
        "description": "No description available",
        "title": "**Windowing Function**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#Windowing)"
    },
    "Word2Vec": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>contains</span>**(string word) Query if 'word' is in the current model.",
            "int **<span style='color:#006AB1;'>dim</span>**() Get number of dimensions for word embedding.",
            "int **<span style='color:#006AB1;'>getSimilar</span>**(string word, int k, string[] output) Get the k most similar words to the given word; return false if 'word' is not in model.",
            "int **<span style='color:#006AB1;'>getSimilar</span>**(float[] vec, int k, string[] output) Get the k most similar words to the given vector.",
            "int **<span style='color:#006AB1;'>getVector</span>**(string word, float[] output) Get the vector of the given word; returns false if 'word' is not in model.",
            "int **<span style='color:#006AB1;'>load</span>**(string path) Load pre-trained word embedding model from the given path.",
            "int **<span style='color:#006AB1;'>load</span>**(string path, int useKDTreeDim) Load pre-trained word embedding model from the given path; will use KDTree for similarity searches if the data dimension is less than or equal to 'useKDTreeDim'. Set 'useKDTreeDim' to 0 to use linear (brute force) similarity search; set 'useKDTreeDim' to less than 0 to always use KDTree.",
            "void **<span style='color:#006AB1;'>minMax</span>**(float[] mins, float[] maxs) Retrieve the minimums and maximums for each dimension.",
            "int **<span style='color:#006AB1;'>size</span>**() Get number of words in dictionary.",
            "int **<span style='color:#006AB1;'>useKDTree</span>**() Get whether a KDTree is used for similarity search."
        ],
        "examples": [
            "Examples: \t [word2vec-basic.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/word2vec-basic.ck), [poem-i-feel.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-i-feel.ck), [poem-randomwalk.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-randomwalk.ck), [poem-spew.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-spew.ck), [poem-ungenerate.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/poem-ungenerate.ck), [word2vec-prompt.ck](https://chuck.stanford.edu/doc/examples/ai/word2vec/word2vec-prompt.ck)"
        ],
        "description": "A word embeddings utility that maps words to vectors; can load a model and perform similarity retrieval.",
        "title": "**Word2Vec**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ai.html#Word2Vec)"
    },
    "Wurley": {
        "functions": [],
        "examples": [
            "Examples: \t [wurley.ck](https://chuck.stanford.edu/doc/examples/stk/wurley.ck), [wurley2.ck](https://chuck.stanford.edu/doc/examples/stk/wurley2.ck), [wurley3.ck](https://chuck.stanford.edu/doc/examples/stk/wurley3.ck)"
        ],
        "description": "STK Wurlitzer electric piano FM synthesis instrument. This class implements two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z. Algorithm 5 is : 4->3-- + --> Out 2->1-- Control Change Numbers: - Modulator Index One = 2 (.controlOne) - Crossfade of Outputs = 4 (.controlTwo) - LFO Speed = 11 - LFO Depth = 1 - ADSR 2 & 4 Target = 128 The basic Chowning/Stanford FM patent expired in 1995, but there exist follow-on patents, mostly assigned to Yamaha. If you are of the type who should worry about this (making money) worry away. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**STK Wurlitzer**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#Wurley)"
    },
    "WvIn": {
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>path</span>**(string value) Set file to be played.",
            "string **<span style='color:#006AB1;'>path</span>**() Get file to be played.",
            "float **<span style='color:#006AB1;'>rate</span>**(float value) Set playback rate.",
            "float **<span style='color:#006AB1;'>rate</span>**() Get playback rate."
        ],
        "examples": [],
        "description": "This class provides input support for various audio file formats. It also serves as a base class for 'realtime' streaming subclasses. WvIn loads the contents of an audio file for subsequent output. Linear interpolation is used for fractional 'read rates'. WvIn supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which return samples produced by averaging across sample frames, from the `tickFrame()` methods, which return pointers to multi-channel sample frames. For single-channel data, these methods return equivalent values. Small files are completely read into local memory during instantiation. Large files are read incrementally from disk. The file size threshold and the increment size values are defined in WvIn.h. WvIn currently supports WAV, AIFF, SND (AU), MAT-file (Matlab), and STK RAW file formats. Signed integer (8-, 16-, and 32-bit) and floating-point (32- and 64-bit) data types are supported. Uncompressed data types are not supported. If using MAT-files, data should be saved in an array with each data channel filling a matrix row. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Audio File Input**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#WvIn)"
    },
    "WvOut": {
        "functions": [
            "**Methods:**",
            "string **<span style='color:#006AB1;'>aifFilename</span>**(string value) Open an AIFF file for writing (with default datatype IO.INT16).",
            "string **<span style='color:#006AB1;'>aifFilename</span>**(string value, int datatype) Open an AIFF file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64).",
            "string **<span style='color:#006AB1;'>autoPrefix</span>**(string value) Set auto prefix string for \"special:auto\" filename generation.",
            "string **<span style='color:#006AB1;'>autoPrefix</span>**() Get auto prefix string for \"special:auto\" filename generation.",
            "string **<span style='color:#006AB1;'>closeFile</span>**(string value) Close the file properly.",
            "string **<span style='color:#006AB1;'>closeFile</span>**() Close the file properly.",
            "float **<span style='color:#006AB1;'>fileGain</span>**(float value) Set file gain.",
            "float **<span style='color:#006AB1;'>fileGain</span>**() Get file gain.",
            "string **<span style='color:#006AB1;'>filename</span>**() Get filename.",
            "string **<span style='color:#006AB1;'>matFilename</span>**(string value) Open MATLAB file for writing (with default datatype IO.FLOAT64).",
            "string **<span style='color:#006AB1;'>matFilename</span>**(string value, int datatype) Open MATLAB file for writing; datatype for MATLAB files can only be IO.FLOAT64.",
            "string **<span style='color:#006AB1;'>rawFilename</span>**(string value) Open a RAW file for writing (note: raw audio files are mono and 16-bit).",
            "string **<span style='color:#006AB1;'>rawFilename</span>**(string value, int datatype) Open a RAW file for writing; datatype for raw files can only be IO.INT16.",
            "int **<span style='color:#006AB1;'>record</span>**(int value) Start/stop output.",
            "int **<span style='color:#006AB1;'>record</span>**() Start/stop output.",
            "string **<span style='color:#006AB1;'>sndFilename</span>**(string value) Open SND file for writing (with default datatype IO.INT16).",
            "string **<span style='color:#006AB1;'>sndFilename</span>**(string value, int datatype) Open SND file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64).",
            "string **<span style='color:#006AB1;'>wavFilename</span>**(string value) Open WAVE file for writing (with default datatype IO.INT16).",
            "string **<span style='color:#006AB1;'>wavFilename</span>**(string value, int datatype) Open WAVE file for writing, with datatype (e.g., IO.INT16, IO.INT24, IO.INT32, IO.FLOAT32, IO.FLOAT64)."
        ],
        "examples": [
            "Examples: \t [rec.ck](https://chuck.stanford.edu/doc/examples/basic/rec.ck), [rec-auto.ck](https://chuck.stanford.edu/doc/examples/basic/rec-auto.ck), [rec-auto-stereo.ck](https://chuck.stanford.edu/doc/examples/basic/rec-auto-stereo.ck), [wvout-24bit.ck](https://chuck.stanford.edu/doc/examples/stk/wvout-24bit.ck)"
        ],
        "description": "This class provides output support for various audio file formats. It also serves as a base class for 'realtime' streaming subclasses. WvOut writes samples to an audio file. It supports multi-channel data in interleaved format. It is important to distinguish the `tick()` methods, which output single samples to all channels in a sample frame, from the `tickFrame()` method, which takes a pointer to multi-channel sample frame data. WvOut currently supports WAV, AIFF, AIFC, SND (AU), MAT-file (Matlab), and STK RAW file formats. Signed integer (8-, 16-, and 32-bit) and floating- point (32- and 64-bit) data types are supported. STK RAW files use 16-bit integers by definition. MAT-files will always be written as 64-bit floats. If a data type specification does not match the specified file type, the data type will automatically be modified. Uncompressed data types are not supported. Currently, WvOut is non-interpolating and the output rate is always `Stk::sampleRate()`. by Perry R. Cook and Gary P. Scavone, 1995 - 2002.",
        "title": "**Audio File Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#WvOut)"
    },
    "WvOut2": {
        "functions": [],
        "examples": [
            "Examples: \t [rec.ck](https://chuck.stanford.edu/doc/examples/basic/rec.ck), [rec-auto.ck](https://chuck.stanford.edu/doc/examples/basic/rec-auto.ck), [rec-auto-stereo.ck](https://chuck.stanford.edu/doc/examples/basic/rec-auto-stereo.ck), [wvout-24bit.ck](https://chuck.stanford.edu/doc/examples/stk/wvout-24bit.ck)"
        ],
        "description": "WvOut2 is the stereo version of WvOut; opens and writes a 2-channel audio file; see WvOut for usage.",
        "title": "**Stereo Audio File Output**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/ugens-stk.html#WvOut2)"
    },
    "XCorr": {
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>normalize</span>**(int flag) No description available",
            "int **<span style='color:#006AB1;'>normalize</span>**() No description available",
            "float[] **<span style='color:#006AB1;'>compute</span>**(float[] f, float[] g, int normalize, float[] y) No description available"
        ],
        "examples": [
            "Examples: \t [xcorr.ck](https://chuck.stanford.edu/doc/examples/analysis/xcorr.ck)"
        ],
        "description": "A unit analyzer that computes cross-correlation between two incoming analysis frames.",
        "title": "**Cross Correlation**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#XCorr)"
    },
    "ZeroX": {
        "functions": [
            "**Methods:**",
            "float **<span style='color:#006AB1;'>compute</span>**(float[] input) Manually computes the zero crossing rate for an array."
        ],
        "examples": [
            "Examples: \t [zerox.ck](https://chuck.stanford.edu/doc/examples/ai/features/zerox.ck)"
        ],
        "description": "Zero crossing detector.",
        "title": "**Zero Crossing Detector**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/uanae.html#ZeroX)"
    },
    "string": {
        "description": "Textual data as a sequence of characters, along with functions for manipulating text.",
        "examples": [
            "Examples: \t [strops.ck](https://chuck.stanford.edu/doc/examples/string/strops.ck), [strops2.ck](https://chuck.stanford.edu/doc/examples/string/strops2.ck), [replace.ck](https://chuck.stanford.edu/doc/examples/string/replace.ck), [token.ck](https://chuck.stanford.edu/doc/examples/string/token.ck), [escape.ck](https://chuck.stanford.edu/doc/examples/string/escape.ck), [tostr.ck](https://chuck.stanford.edu/doc/examples/string/tostr.ck)"
        ],
        "functions": [
            "**Methods:**",
            "int **<span style='color:#006AB1;'>charAt</span>**(int index) Get a character at the specified index.",
            "void **<span style='color:#006AB1;'>erase</span>**(int start, int length) Erase length characters of the string from start position.",
            "int **<span style='color:#006AB1;'>find</span>**(int theChar) Get the index of the first occurrence of theChar, or -1 if theChar is not found.",
            "int **<span style='color:#006AB1;'>find</span>**(int theChar, int start) Get the index of the first occurrence of theChar at or after the start position, or -1 if theChar is not found.",
            "int **<span style='color:#006AB1;'>find</span>**(string str) Get the index of the first occurrence of str, or -1 if str is not found.",
            "int **<span style='color:#006AB1;'>find</span>**(string str, int start) Get the index of the first occurrence of str at or after the start position, or -1 if str is not found.",
            "void **<span style='color:#006AB1;'>insert</span>**(int position, string str) Insert a string at the specified position.",
            "int **<span style='color:#006AB1;'>length</span>**() Get the number of characters of the string.",
            "string **<span style='color:#006AB1;'>lower</span>**() Get a new string in which the uppercase characters of the original string have been converted to lowercase.",
            "string **<span style='color:#006AB1;'>ltrim</span>**() Get a new string in which leading whitespace has been removed.",
            "void **<span style='color:#006AB1;'>replace</span>**(int position, string str) Replace characters from 'position' with contents of 'str'.",
            "void **<span style='color:#006AB1;'>replace</span>**(int position, int length, string str) Replace 'length' characters from 'position' with contents of 'str'.",
            "void **<span style='color:#006AB1;'>replace</span>**(string from, string to) Replace all instances of 'from' in the string with 'to'.",
            "int **<span style='color:#006AB1;'>rfind</span>**(int theChar) Get the index of the last occurrence of theChar, or -1 if theChar is not found.",
            "int **<span style='color:#006AB1;'>rfind</span>**(int theChar, int start) Get the index of the last occurrence of theChar at or before the start position, or -1 if theChar is not found.",
            "int **<span style='color:#006AB1;'>rfind</span>**(string str) Get the index of the last occurrence of str, or -1 if str is not found.",
            "int **<span style='color:#006AB1;'>rfind</span>**(string str, int start) Get the index of the last occurrence of str at or before the start position, or -1 if str is not found.",
            "string **<span style='color:#006AB1;'>rtrim</span>**() Get a new string in which trailing whitespace has been removed.",
            "int **<span style='color:#006AB1;'>setCharAt</span>**(int index, int theChar) Set the character at the specified index.",
            "string **<span style='color:#006AB1;'>substring</span>**(int start) Get a new string containing the substring from the start index to the end of the string.",
            "string **<span style='color:#006AB1;'>substring</span>**(int start, int length) Get a new string containing the substring from the start index of the specified length.",
            "float **<span style='color:#006AB1;'>toFloat</span>**() Attempt to convert the contents of the string to an float and return the result, or 0 if conversion failed.",
            "int **<span style='color:#006AB1;'>toInt</span>**() Attempt to convert the contents of the string to an integer and return the result, or 0 if conversion failed.",
            "string **<span style='color:#006AB1;'>toString</span>**() Return the reference of calling string.",
            "string **<span style='color:#006AB1;'>trim</span>**() Get a new string in which leading and trailing whitespace has been removed.",
            "string **<span style='color:#006AB1;'>upper</span>**() Get a new string in which the lowercase characters of the original string have been converted to uppercase."
        ],
        "title": "**String Object**",
        "link": "[More...](https://chuck.stanford.edu/doc/reference/base.html#string)"
    }
}